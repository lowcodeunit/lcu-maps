import * as signalR from '@aspnet/signalr';
import { Injector } from '@angular/core';
import { LCUServiceSettings } from '../lcu-service-settings';
import { Observable, ReplaySubject, Observer, Subject } from 'rxjs';
export declare class RealTimeService {
    protected injector: Injector;
    protected attemptingToReconnect: boolean;
    protected connectionAttempts: number;
    protected hub: signalR.HubConnection;
    protected showConnectionError: boolean;
    protected started: ReplaySubject<signalR.HubConnection>;
    protected url: string;
    private zone;
    ReconnectionAttempt: Subject<boolean>;
    Settings: LCUServiceSettings;
    Started: Observable<signalR.HubConnection>;
    constructor(injector: Injector);
    Start(): Promise<signalR.HubConnection>;
    RegisterHandler(methodName: string): Observable<any>;
    Invoke(methodName: string, ...args: any[]): Observable<any>;
    WithHub(action: (hub: signalR.HubConnection) => void | Observable<any>): Observable<any>;
    protected buildHub(urlRoot: string): Promise<signalR.HubConnection>;
    protected buildHubUrl(urlRoot: string): string;
    protected loadHubPath(): string;
    protected loadHubUrl(urlRoot: string): string;
    protected loadStateRoot(): string;
    protected runWithHub(obs: Observer<any>, action: (hub: signalR.HubConnection) => void | Observable<any>): void;
    protected start(): void;
    protected stop(): void;
    /**
     * Retry connection
     */
    protected retryConnection(): void;
    /**
     * Attempt to reconnect
     */
    protected reconnect(): void;
    /**
     * Stop trying to reconnect
     */
    protected stopReconnection(): void;
    /**
     * Notify user of reconnection attempt(s)
     */
    protected reconnectionMessage(): void;
}
