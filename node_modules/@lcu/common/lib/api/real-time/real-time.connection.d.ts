import * as signalR from '@aspnet/signalr';
import { EventEmitter } from '@angular/core';
import { Observable } from 'rxjs';
import { HttpClient, HttpHeaders } from '@angular/common/http';
export declare class RealTimeConnection {
    protected http: HttpClient;
    protected actionUrl: string;
    protected connectionAttempts: number;
    protected rtUrl: string;
    ConnectionError: EventEmitter<any>;
    Hub: signalR.HubConnection;
    MaxConnectionRetryAttempts: number;
    ReconnectionAttempt: EventEmitter<number>;
    Started: EventEmitter<signalR.HubConnection>;
    constructor(http: HttpClient, rtUrl: string, actionUrl: string, maxConnectionRetryAttempts?: number);
    Start(transport?: signalR.HttpTransportType): void;
    RegisterHandler(methodName: string): Observable<any>;
    InvokeAction(methodName: string, headers: HttpHeaders | {
        [header: string]: string | string[];
    }, args: {}): Observable<Object>;
    Invoke(methodName: string, ...args: any[]): Observable<unknown>;
    protected buildHub(transport: signalR.HttpTransportType): Promise<signalR.HubConnection>;
    protected stop(): Promise<void>;
    /**
     * Retry connection
     */
    protected retryConnection(): void;
    /**
     * Attempt to reconnect
     */
    protected reconnect(): void;
}
