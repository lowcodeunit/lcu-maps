import { ObservableContextService } from '../api/observable-context/observable-context.service';
import { StateAction } from './state-action.model';
import { Injector } from '@angular/core';
import { Subject, Subscription, BehaviorSubject, Observable } from 'rxjs';
import { RealTimeConnection } from './../api/real-time/real-time.connection';
import { LCUServiceSettings } from '../api/lcu-service-settings';
import { HttpClient } from '@angular/common/http';
import { Status } from '../status';
export declare abstract class StateContext<T> extends ObservableContextService<T> {
    protected injector: Injector;
    protected connectedToState: BehaviorSubject<Status>;
    protected groupName: string;
    protected http: HttpClient;
    protected rt: RealTimeConnection;
    protected startSub: Subscription;
    ConnectedToState: Observable<Status>;
    ReconnectionAttempt: Subject<boolean>;
    Settings: LCUServiceSettings;
    constructor(injector: Injector);
    Execute(action: StateAction): Promise<Subscription>;
    $Refresh(args?: any): void;
    Start(shouldUpdate: boolean): Promise<void>;
    protected buildActionUrl(urlRoot: string): string;
    protected buildHubUrl(urlRoot: string): string;
    protected callRefresh(): void;
    protected connectToState(shouldUpdate: boolean): Promise<string>;
    protected defaultValue(): T;
    protected executeAction(action: StateAction): Promise<Subscription>;
    protected loadActionPath(): string;
    protected loadActionUrl(urlRoot: string): string;
    protected loadEnvironment(): string;
    protected loadHeaders(): {
        [header: string]: string | string[];
    };
    protected loadHubPath(): string;
    protected loadHubUrl(urlRoot: string): string;
    protected abstract loadStateKey(): string;
    protected abstract loadStateName(): string;
    protected loadStateRoot(): string;
    protected loadStateActionRoot(): string;
    protected loadUsernameMock(): string;
    protected setup(): void;
    protected setupReceiveState(groupName: string): void;
}
