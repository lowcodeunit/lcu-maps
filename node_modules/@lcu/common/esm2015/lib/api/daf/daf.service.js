import { throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { LCUServiceSettings } from '../lcu-service-settings';
export class DAFService {
    //  Constructors
    constructor(injector) {
        this.injector = injector;
        this.http = injector.get(HttpClient);
        try {
            this.settings = injector.get(LCUServiceSettings);
        }
        catch (err) { }
    }
    //  Helpers
    catchError() {
        return catchError(this.handleError);
    }
    delete(path) {
        return this.http.delete(this.resolvePath(path)).pipe(this.catchError());
    }
    get(path) {
        return this.http.get(this.resolvePath(path)).pipe(this.catchError());
    }
    handleError(error) {
        // In a real world app, we might use a remote logging infrastructure
        // We'd also dig deeper into the error to get a better message
        const errMsg = error.message ? error.message : error.status ? `${error.status} - ${error.statusText}` : 'Server error';
        console.error(errMsg); // log to console instead
        return throwError(errMsg);
    }
    patch(data, path) {
        const options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json'
            })
        };
        return this.http.patch(this.resolvePath(path), data, options).pipe(this.catchError());
    }
    post(data, path) {
        const options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json'
            })
        };
        return this.http.post(this.resolvePath(path), data, options).pipe(this.catchError());
    }
    put(data, path) {
        const options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json'
            })
        };
        return this.http.put(this.resolvePath(path), data, options).pipe(this.catchError());
    }
    resolvePath(path) {
        if (this.settings && this.settings.APIRoot) {
            if (this.settings.APIRoot.endsWith('/')) {
                this.settings.APIRoot = this.settings.APIRoot.substring(this.settings.APIRoot.length - 1);
            }
            if (path.startsWith('/')) {
                path = path.substring(1);
            }
            return `${this.settings.APIRoot}/${path}`;
        }
        else {
            return path;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFmLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbGN1L2NvbW1vbi8iLCJzb3VyY2VzIjpbImxpYi9hcGkvZGFmL2RhZi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBZ0MsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hFLE9BQU8sRUFBTyxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVqRCxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRy9ELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRTdELE1BQU0sT0FBZ0IsVUFBVTtJQU05QixnQkFBZ0I7SUFDaEIsWUFBc0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUN0QyxJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFckMsSUFBSTtZQUNGLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1NBQ2xEO1FBQUMsT0FBTyxHQUFHLEVBQUUsR0FBRTtJQUNsQixDQUFDO0lBRUQsV0FBVztJQUNELFVBQVU7UUFDbEIsT0FBTyxVQUFVLENBQVcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFUyxNQUFNLENBQUMsSUFBWTtRQUMzQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFlLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDeEYsQ0FBQztJQUVTLEdBQUcsQ0FBSSxJQUFZO1FBQzNCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQXlCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDL0YsQ0FBQztJQUVTLFdBQVcsQ0FBQyxLQUFVO1FBQzlCLG9FQUFvRTtRQUNwRSw4REFBOEQ7UUFDOUQsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxNQUFNLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDO1FBRXZILE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyx5QkFBeUI7UUFFaEQsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVTLEtBQUssQ0FBSSxJQUFTLEVBQUUsSUFBWTtRQUN4QyxNQUFNLE9BQU8sR0FBRztZQUNkLE9BQU8sRUFBRSxJQUFJLFdBQVcsQ0FBQztnQkFDdkIsY0FBYyxFQUFFLGtCQUFrQjthQUNuQyxDQUFDO1NBQ0gsQ0FBQztRQUVGLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQXlCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUNoSCxDQUFDO0lBRVMsSUFBSSxDQUFJLElBQVMsRUFBRSxJQUFZO1FBQ3ZDLE1BQU0sT0FBTyxHQUFHO1lBQ2QsT0FBTyxFQUFFLElBQUksV0FBVyxDQUFDO2dCQUN2QixjQUFjLEVBQUUsa0JBQWtCO2FBQ25DLENBQUM7U0FDSCxDQUFDO1FBRUYsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBeUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQy9HLENBQUM7SUFFUyxHQUFHLENBQUksSUFBUyxFQUFFLElBQVk7UUFDdEMsTUFBTSxPQUFPLEdBQUc7WUFDZCxPQUFPLEVBQUUsSUFBSSxXQUFXLENBQUM7Z0JBQ3ZCLGNBQWMsRUFBRSxrQkFBa0I7YUFDbkMsQ0FBQztTQUNILENBQUM7UUFFRixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUF5QixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7SUFDOUcsQ0FBQztJQUVTLFdBQVcsQ0FBQyxJQUFZO1FBQ2hDLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRTtZQUMxQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDdkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQzthQUMzRjtZQUVELElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDeEIsSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDMUI7WUFFRCxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLElBQUksSUFBSSxFQUFFLENBQUM7U0FDM0M7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDO1NBQ2I7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBPcGVyYXRvckZ1bmN0aW9uLCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCwgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cEhlYWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4uL2Jhc2UtcmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBCYXNlTW9kZWxlZFJlc3BvbnNlIH0gZnJvbSAnLi4vYmFzZS1tb2RlbGVkLXJlc3BvbnNlJztcclxuaW1wb3J0IHsgTENVU2VydmljZVNldHRpbmdzIH0gZnJvbSAnLi4vbGN1LXNlcnZpY2Utc2V0dGluZ3MnO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIERBRlNlcnZpY2Uge1xyXG4gIC8vIFx0RmllbGRzXHJcbiAgcHJvdGVjdGVkIGh0dHA6IEh0dHBDbGllbnQ7XHJcblxyXG4gIHByb3RlY3RlZCBzZXR0aW5nczogTENVU2VydmljZVNldHRpbmdzO1xyXG5cclxuICAvLyAgQ29uc3RydWN0b3JzXHJcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3Rvcikge1xyXG4gICAgdGhpcy5odHRwID0gaW5qZWN0b3IuZ2V0KEh0dHBDbGllbnQpO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIHRoaXMuc2V0dGluZ3MgPSBpbmplY3Rvci5nZXQoTENVU2VydmljZVNldHRpbmdzKTtcclxuICAgIH0gY2F0Y2ggKGVycikge31cclxuICB9XHJcblxyXG4gIC8vICBIZWxwZXJzXHJcbiAgcHJvdGVjdGVkIGNhdGNoRXJyb3IoKTogT3BlcmF0b3JGdW5jdGlvbjxhbnksIGFueT4ge1xyXG4gICAgcmV0dXJuIGNhdGNoRXJyb3I8YW55LCBhbnk+KHRoaXMuaGFuZGxlRXJyb3IpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGRlbGV0ZShwYXRoOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEJhc2VSZXNwb25zZT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5kZWxldGU8QmFzZVJlc3BvbnNlPih0aGlzLnJlc29sdmVQYXRoKHBhdGgpKS5waXBlKHRoaXMuY2F0Y2hFcnJvcigpKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBnZXQ8VD4ocGF0aDogc3RyaW5nKTogT2JzZXJ2YWJsZTxCYXNlTW9kZWxlZFJlc3BvbnNlPFQ+PiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxCYXNlTW9kZWxlZFJlc3BvbnNlPFQ+Pih0aGlzLnJlc29sdmVQYXRoKHBhdGgpKS5waXBlKHRoaXMuY2F0Y2hFcnJvcigpKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBoYW5kbGVFcnJvcihlcnJvcjogYW55KTogYW55IHtcclxuICAgIC8vIEluIGEgcmVhbCB3b3JsZCBhcHAsIHdlIG1pZ2h0IHVzZSBhIHJlbW90ZSBsb2dnaW5nIGluZnJhc3RydWN0dXJlXHJcbiAgICAvLyBXZSdkIGFsc28gZGlnIGRlZXBlciBpbnRvIHRoZSBlcnJvciB0byBnZXQgYSBiZXR0ZXIgbWVzc2FnZVxyXG4gICAgY29uc3QgZXJyTXNnID0gZXJyb3IubWVzc2FnZSA/IGVycm9yLm1lc3NhZ2UgOiBlcnJvci5zdGF0dXMgPyBgJHtlcnJvci5zdGF0dXN9IC0gJHtlcnJvci5zdGF0dXNUZXh0fWAgOiAnU2VydmVyIGVycm9yJztcclxuXHJcbiAgICBjb25zb2xlLmVycm9yKGVyck1zZyk7IC8vIGxvZyB0byBjb25zb2xlIGluc3RlYWRcclxuXHJcbiAgICByZXR1cm4gdGhyb3dFcnJvcihlcnJNc2cpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHBhdGNoPFQ+KGRhdGE6IGFueSwgcGF0aDogc3RyaW5nKTogT2JzZXJ2YWJsZTxCYXNlTW9kZWxlZFJlc3BvbnNlPFQ+PiB7XHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBoZWFkZXJzOiBuZXcgSHR0cEhlYWRlcnMoe1xyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgfSlcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wYXRjaDxCYXNlTW9kZWxlZFJlc3BvbnNlPFQ+Pih0aGlzLnJlc29sdmVQYXRoKHBhdGgpLCBkYXRhLCBvcHRpb25zKS5waXBlKHRoaXMuY2F0Y2hFcnJvcigpKTtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBwb3N0PFQ+KGRhdGE6IGFueSwgcGF0aDogc3RyaW5nKTogT2JzZXJ2YWJsZTxCYXNlTW9kZWxlZFJlc3BvbnNlPFQ+PiB7XHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBoZWFkZXJzOiBuZXcgSHR0cEhlYWRlcnMoe1xyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgfSlcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0PEJhc2VNb2RlbGVkUmVzcG9uc2U8VD4+KHRoaXMucmVzb2x2ZVBhdGgocGF0aCksIGRhdGEsIG9wdGlvbnMpLnBpcGUodGhpcy5jYXRjaEVycm9yKCkpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHB1dDxUPihkYXRhOiBhbnksIHBhdGg6IHN0cmluZyk6IE9ic2VydmFibGU8QmFzZU1vZGVsZWRSZXNwb25zZTxUPj4ge1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgaGVhZGVyczogbmV3IEh0dHBIZWFkZXJzKHtcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgIH0pXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiB0aGlzLmh0dHAucHV0PEJhc2VNb2RlbGVkUmVzcG9uc2U8VD4+KHRoaXMucmVzb2x2ZVBhdGgocGF0aCksIGRhdGEsIG9wdGlvbnMpLnBpcGUodGhpcy5jYXRjaEVycm9yKCkpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHJlc29sdmVQYXRoKHBhdGg6IHN0cmluZykge1xyXG4gICAgaWYgKHRoaXMuc2V0dGluZ3MgJiYgdGhpcy5zZXR0aW5ncy5BUElSb290KSB7XHJcbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLkFQSVJvb3QuZW5kc1dpdGgoJy8nKSkge1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MuQVBJUm9vdCA9IHRoaXMuc2V0dGluZ3MuQVBJUm9vdC5zdWJzdHJpbmcodGhpcy5zZXR0aW5ncy5BUElSb290Lmxlbmd0aCAtIDEpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocGF0aC5zdGFydHNXaXRoKCcvJykpIHtcclxuICAgICAgICBwYXRoID0gcGF0aC5zdWJzdHJpbmcoMSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBgJHt0aGlzLnNldHRpbmdzLkFQSVJvb3R9LyR7cGF0aH1gO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHBhdGg7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==