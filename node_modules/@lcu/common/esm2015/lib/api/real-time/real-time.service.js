import { __awaiter } from "tslib";
import * as signalR from '@aspnet/signalr';
import { NgZone } from '@angular/core';
import { Injectable, Injector } from '@angular/core';
import { LCUServiceSettings } from '../lcu-service-settings';
import { Observable, ReplaySubject, Subject } from 'rxjs';
import * as i0 from "@angular/core";
//  TODO:  Need to manage reconnection to hub scenarios here
export class RealTimeService {
    //  Constructors
    constructor(injector) {
        this.injector = injector;
        this.ReconnectionAttempt = new Subject();
        this.connectionAttempts = 0;
        try {
            this.Settings = injector.get(LCUServiceSettings);
            this.zone = injector.get(NgZone);
        }
        catch (err) { }
        this.started = new ReplaySubject();
        this.Started = this.started.asObservable();
        this.start();
    }
    //  API Methods
    Start() {
        return new Promise((resolve, reject) => {
            this.buildHub('').then((hub) => {
                this.hub = hub;
                this.hub.serverTimeoutInMilliseconds = 600000;
                this.hub.onclose(err => {
                    console.log('onclose: ' + err);
                    this.retryConnection();
                });
                try {
                    this.hub
                        .start()
                        .then(() => {
                        // this.connectionAttempts = 0;
                        console.log(`Connection started`);
                        resolve(this.hub);
                    })
                        .catch(err => {
                        this.retryConnection();
                        if (this.showConnectionError) {
                            reject(err);
                            console.log('Error while starting connection: ' + err);
                            this.showConnectionError = false;
                        }
                    });
                }
                catch (err) {
                    console.log('Error while starting connection 02: ' + err);
                    this.retryConnection();
                }
            });
        });
    }
    RegisterHandler(methodName) {
        return this.WithHub(hub => {
            return Observable.create((obs) => {
                try {
                    hub.on(methodName, req => {
                        obs.next(req);
                        this.zone.run(() => { });
                    });
                }
                catch (err) {
                    console.log(`Error while handling ${methodName}: ` + err);
                    obs.error(err);
                    this.retryConnection();
                }
            });
        });
    }
    Invoke(methodName, ...args) {
        return this.WithHub(hub => {
            return Observable.create((obs) => {
                try {
                    hub
                        .invoke(methodName, ...args)
                        .then(res => {
                        obs.next(res);
                        this.zone.run(() => { });
                    })
                        .catch(e => {
                        obs.error(e);
                    });
                }
                catch (err) {
                    console.log(`Error while invoking ${methodName}: ` + err);
                    obs.error(err);
                    this.retryConnection();
                }
            });
        });
    }
    WithHub(action) {
        try {
            return Observable.create((obs) => {
                if (this.hub.state !== signalR.HubConnectionState.Connected) {
                    this.Start().then(hub => {
                        console.log('Restarting connection in flight...');
                        this.runWithHub(obs, action);
                    });
                }
                else {
                    this.runWithHub(obs, action);
                }
            });
        }
        catch (err) {
            return Observable.create((obs) => {
                obs.error(err);
                obs.complete();
            });
        }
    }
    //  Helpers
    buildHub(urlRoot) {
        return __awaiter(this, void 0, void 0, function* () {
            this.url = this.buildHubUrl(urlRoot);
            return (new signalR.HubConnectionBuilder()
                .configureLogging(signalR.LogLevel.Information)
                .withUrl(this.url)
                // .withUrl(this.url, {
                //   transport: signalR.HttpTransportType.LongPolling
                // })
                .build());
        });
    }
    buildHubUrl(urlRoot) {
        const url = this.loadHubUrl(urlRoot);
        return url;
    }
    loadHubPath() {
        const stateRoot = this.loadStateRoot();
        return `${stateRoot}?lcu-app-id=${this.Settings.AppConfig.ID}&lcu-app-ent-api-key=${this.Settings.AppConfig.EnterpriseAPIKey}&lcu-environment=${this.Settings.StateConfig.Environment || ''}`;
    }
    loadHubUrl(urlRoot) {
        const apiRoot = this.Settings ? this.Settings.APIRoot || '' : '';
        const hubPath = this.loadHubPath();
        return `${apiRoot}${urlRoot || ''}${hubPath}`;
    }
    loadStateRoot() {
        // return this.Settings.StateConfig &&
        //   this.Settings.StateConfig.Root !== undefined
        //   ? this.Settings.StateConfig.Root
        //   : '/state';
        return '/state';
    }
    runWithHub(obs, action) {
        const res = action(this.hub);
        if (res) {
            res.subscribe(r => {
                obs.next(r);
                this.zone.run(() => { });
            }, e => {
                obs.error(e);
            });
        }
    }
    start() {
        setTimeout(() => {
            this.Start().then(hub => this.started.next(hub));
        }, 50);
    }
    stop() {
        // this.hub.stop();
        this.showConnectionError = true;
    }
    /**
     * Retry connection
     */
    retryConnection() {
        if (this.connectionAttempts < 5) {
            console.log(`Retrying connection attempt ${this.connectionAttempts}`);
            this.connectionAttempts += 1;
            this.reconnect();
        }
        else if (this.connectionAttempts >= 5) {
            this.stopReconnection();
        }
    }
    /**
     * Attempt to reconnect
     */
    reconnect() {
        this.attemptingToReconnect = true;
        this.reconnectionMessage();
        this.start();
    }
    /**
     * Stop trying to reconnect
     */
    stopReconnection() {
        this.attemptingToReconnect = false;
        this.reconnectionMessage();
        this.stop();
    }
    /**
     * Notify user of reconnection attempt(s)
     */
    reconnectionMessage() {
        this.ReconnectionAttempt.next(this.attemptingToReconnect);
    }
}
RealTimeService.ctorParameters = () => [
    { type: Injector }
];
RealTimeService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RealTimeService_Factory() { return new RealTimeService(i0.ɵɵinject(i0.INJECTOR)); }, token: RealTimeService, providedIn: "root" });
RealTimeService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
RealTimeService.ctorParameters = () => [
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,