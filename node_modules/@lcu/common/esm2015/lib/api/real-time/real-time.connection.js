import { __awaiter } from "tslib";
import * as signalR from '@aspnet/signalr';
import { EventEmitter } from '@angular/core';
import { Observable } from 'rxjs';
export class RealTimeConnection {
    //  Constructors
    constructor(http, rtUrl, actionUrl, maxConnectionRetryAttempts = 10) {
        this.http = http;
        this.actionUrl = actionUrl;
        this.connectionAttempts = 0;
        this.rtUrl = rtUrl;
        this.ConnectionError = new EventEmitter();
        this.ReconnectionAttempt = new EventEmitter();
        this.MaxConnectionRetryAttempts = maxConnectionRetryAttempts;
        this.Started = new EventEmitter();
    }
    //  API Methods
    Start(transport = signalR.HttpTransportType.WebSockets) {
        this.buildHub(transport).then((hub) => {
            this.Hub = hub;
            this.Hub.serverTimeoutInMilliseconds = 600000;
            this.Hub.onclose(err => {
                console.log('onclose: ' + err);
                this.retryConnection();
            });
            try {
                this.Hub.start()
                    .then(() => {
                    this.connectionAttempts = 0;
                    console.log(`Connection started`);
                    this.Started.emit(this.Hub);
                })
                    .catch(err => {
                    console.log('Error while starting connection: ' + err);
                    this.ConnectionError.emit(err);
                    this.retryConnection();
                });
            }
            catch (err) {
                console.log('Error while starting connection: ' + err);
                this.retryConnection();
            }
        });
    }
    RegisterHandler(methodName) {
        return new Observable(obs => {
            if (this.Hub) {
                try {
                    this.Hub.on(methodName, req => {
                        obs.next(req);
                    });
                }
                catch (err) {
                    console.log(`Error while handling ${methodName}: ` + err);
                    obs.error(err);
                }
            }
            else {
                obs.error('The hub must be started and configured before registering a handler.');
            }
        });
    }
    InvokeAction(methodName, headers, args) {
        const url = `${this.actionUrl}/${methodName}`;
        return this.http.post(url, args, {
            headers,
            withCredentials: true
        });
    }
    Invoke(methodName, ...args) {
        return new Observable(obs => {
            if (this.Hub) {
                try {
                    this.Hub.invoke(methodName, ...args)
                        .then(res => {
                        obs.next(res);
                    })
                        .catch(e => {
                        obs.error(e);
                    });
                }
                catch (err) {
                    console.log(`Error while invoking ${methodName}: ` + err);
                    obs.error(err);
                }
            }
            else {
                obs.error('The hub must be started and configured before invoking.');
            }
        });
    }
    //  Helpers
    buildHub(transport) {
        return __awaiter(this, void 0, void 0, function* () {
            return new signalR.HubConnectionBuilder()
                .configureLogging(signalR.LogLevel.Information)
                .withUrl(this.rtUrl, {
                transport
            })
                .build();
        });
    }
    stop() {
        return this.Hub.stop();
    }
    /**
     * Retry connection
     */
    retryConnection() {
        if (this.connectionAttempts < this.MaxConnectionRetryAttempts) {
            console.log(`Retrying connection attempt ${this.connectionAttempts}`);
            this.connectionAttempts += 1;
            setTimeout(() => {
                this.reconnect();
            }, 1000);
        }
        else if (this.connectionAttempts >= this.MaxConnectionRetryAttempts) {
            this.stop().then();
            this.ConnectionError.emit('The maximum number of connection retries has been met.');
        }
    }
    /**
     * Attempt to reconnect
     */
    reconnect() {
        this.ReconnectionAttempt.emit(this.connectionAttempts);
        this.Start();
    }
}
//# sourceMappingURL=data:application/json;base64,