import { __decorate, __metadata, __param } from "tslib";
import { Inject } from '@angular/core';
import { InjectionToken } from '@angular/core';
export let BROWSER_FAVICONS_CONFIG = new InjectionToken('Favicons Configuration');
/**
 * Abstract class that acts as both interface for implementation and as the dependency-injection
 */
export class FaviconsService {
}
/**
 * Provide the browser-oriented implementation of the Favicons class
 */
let BrowserFavicons = class BrowserFavicons {
    /**
     * initialize the Favicons service.
     */
    constructor(config) {
        this.elementId = 'favicons-service-injected-node';
        this.icons = Object.assign(Object.create(null), config.icons);
        this.useCacheBusting = (config.cacheBusting || false);
        // Since the document may have a static favicon definition, we want to strip out
        // any exisitng elements that are attempting to define a favicon. This way, there
        // is only one favicon element on the page at a time.
        this.removeExternalLinkElements();
    }
    /**
     * Active favicon with given identifier
     *
     * @param name favicon name
     */
    activate(name) {
        if (!this.icons[name]) {
            throw (new Error(`Favicon for [ ${name} ] not found.`));
        }
        this.setNode(this.icons[name].type, this.icons[name].href);
    }
    /**
     * Activate the default favicon (with isDefault set to True)
     */
    reset() {
        for (const name of Object.keys(this.icons)) {
            const icon = this.icons[name];
            if (icon.isDefault) {
                this.setNode(icon.type, icon.href);
                return;
            }
        }
        // If we made it this far, none of the favicons were flagged as default. In that
        // case, let's just remove the favicon node altogether.
        this.removeNode();
    }
    /**
     * Inject the favicon element into the document header
     *
     * @param type type of icon (.png, .jpeg, etc)
     *
     * @param href location
     */
    addNode(type, href) {
        const linkElement = document.createElement('link');
        linkElement.setAttribute('id', this.elementId);
        linkElement.setAttribute('rel', 'icon');
        linkElement.setAttribute('type', type);
        linkElement.setAttribute('href', href);
        document.head.appendChild(linkElement);
    }
    /**
     * Return an augmented HREF value with a cache-busting query-string parameter
     *
     * @param href location
     */
    cacheBustHref(href) {
        const augmentedHref = (href.indexOf('?') === -1)
            ? `${href}?faviconCacheBust=${Date.now()}`
            : `${href}&faviconCacheBust=${Date.now()}`;
        return (augmentedHref);
    }
    /**
     * I remove any favicon nodes that are not controlled by this service
     */
    removeExternalLinkElements() {
        // tslint:disable-next-line:prefer-const
        let linkElements = document.querySelectorAll(`link[ rel ~= 'icon' i]`);
        for (const linkElement of Array.from(linkElements)) {
            linkElement.parentNode.removeChild(linkElement);
        }
    }
    /**
     * Remove the favicon node from the document header
     */
    removeNode() {
        const linkElement = document.head.querySelector('#' + this.elementId);
        if (linkElement) {
            document.head.removeChild(linkElement);
        }
    }
    /**
     * Remove existing favicon node and inject a new favicon node with the give
     * elemet settings
     *
     * @param type type of favicon
     * @param href location
     */
    setNode(type, href) {
        const augmentedHref = this.useCacheBusting
            ? this.cacheBustHref(href)
            : href;
        this.removeNode();
        this.addNode(type, augmentedHref);
    }
};
BrowserFavicons = __decorate([
    __param(0, Inject(BROWSER_FAVICONS_CONFIG)),
    __metadata("design:paramtypes", [Object])
], BrowserFavicons);
export { BrowserFavicons };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmF2aWNvbnMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BsY3UvY29tbW9uLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL2Zhdmljb25zLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQWlCL0MsTUFBTSxDQUFDLElBQUksdUJBQXVCLEdBQUcsSUFBSSxjQUFjLENBQWtCLHdCQUF3QixDQUFFLENBQUM7QUFFcEc7O0dBRUc7QUFDSCxNQUFNLE9BQWdCLGVBQWU7Q0FHcEM7QUFFRDs7R0FFRztBQUNILElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWU7SUFNeEI7O09BRUc7SUFDSCxZQUFnRCxNQUFzQjtRQUVsRSxJQUFJLENBQUMsU0FBUyxHQUFHLGdDQUFnQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBRSxNQUFNLENBQUMsTUFBTSxDQUFFLElBQUksQ0FBRSxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUUsQ0FBQztRQUNsRSxJQUFJLENBQUMsZUFBZSxHQUFHLENBQUUsTUFBTSxDQUFDLFlBQVksSUFBSSxLQUFLLENBQUUsQ0FBQztRQUV4RCxnRkFBZ0Y7UUFDaEYsaUZBQWlGO1FBQ2pGLHFEQUFxRDtRQUNyRCxJQUFJLENBQUMsMEJBQTBCLEVBQUUsQ0FBQztJQUV0QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLFFBQVEsQ0FBRSxJQUFZO1FBRXpCLElBQUssQ0FBRSxJQUFJLENBQUMsS0FBSyxDQUFFLElBQUksQ0FBRSxFQUFHO1lBRXhCLE1BQUssQ0FBRSxJQUFJLEtBQUssQ0FBRSxpQkFBa0IsSUFBSyxlQUFlLENBQUUsQ0FBRSxDQUFDO1NBRWhFO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBRSxJQUFJLENBQUMsS0FBSyxDQUFFLElBQUksQ0FB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Q0FvSjNCO1NBcEpZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRmF2aWNvbnNDb25maWcge1xyXG4gICAgaWNvbnM6IEljb25zQ29uZmlnO1xyXG4gICAgY2FjaGVCdXN0aW5nPzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJY29uc0NvbmZpZyB7XHJcbiAgICBbIG5hbWU6IHN0cmluZyBdOiBJY29uQ29uZmlnO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEljb25Db25maWcge1xyXG4gICAgdHlwZTogc3RyaW5nO1xyXG4gICAgaHJlZjogc3RyaW5nO1xyXG4gICAgaXNEZWZhdWx0PzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGxldCBCUk9XU0VSX0ZBVklDT05TX0NPTkZJRyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxGYXZpY29uc0NvbmZpZz4oICdGYXZpY29ucyBDb25maWd1cmF0aW9uJyApO1xyXG5cclxuLyoqXHJcbiAqIEFic3RyYWN0IGNsYXNzIHRoYXQgYWN0cyBhcyBib3RoIGludGVyZmFjZSBmb3IgaW1wbGVtZW50YXRpb24gYW5kIGFzIHRoZSBkZXBlbmRlbmN5LWluamVjdGlvblxyXG4gKi9cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEZhdmljb25zU2VydmljZSB7XHJcbiAgICBhYnN0cmFjdCBhY3RpdmF0ZSggbmFtZTogc3RyaW5nICk6IHZvaWQ7XHJcbiAgICBhYnN0cmFjdCByZXNldCgpOiB2b2lkO1xyXG59XHJcblxyXG4vKipcclxuICogUHJvdmlkZSB0aGUgYnJvd3Nlci1vcmllbnRlZCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgRmF2aWNvbnMgY2xhc3NcclxuICovXHJcbmV4cG9ydCBjbGFzcyBCcm93c2VyRmF2aWNvbnMgaW1wbGVtZW50cyBGYXZpY29uc1NlcnZpY2Uge1xyXG5cclxuICAgIHByb3RlY3RlZCBlbGVtZW50SWQ6IHN0cmluZztcclxuICAgIHByb3RlY3RlZCBpY29uczogSWNvbnNDb25maWc7XHJcbiAgICBwcm90ZWN0ZWQgdXNlQ2FjaGVCdXN0aW5nOiBib29sZWFuO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogaW5pdGlhbGl6ZSB0aGUgRmF2aWNvbnMgc2VydmljZS5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoIEBJbmplY3QoIEJST1dTRVJfRkFWSUNPTlNfQ09ORklHICkgY29uZmlnOiBGYXZpY29uc0NvbmZpZyApIHtcclxuXHJcbiAgICAgICAgdGhpcy5lbGVtZW50SWQgPSAnZmF2aWNvbnMtc2VydmljZS1pbmplY3RlZC1ub2RlJztcclxuICAgICAgICB0aGlzLmljb25zID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggbnVsbCApLCBjb25maWcuaWNvbnMgKTtcclxuICAgICAgICB0aGlzLnVzZUNhY2hlQnVzdGluZyA9ICggY29uZmlnLmNhY2hlQnVzdGluZyB8fCBmYWxzZSApO1xyXG5cclxuICAgICAgICAvLyBTaW5jZSB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYSBzdGF0aWMgZmF2aWNvbiBkZWZpbml0aW9uLCB3ZSB3YW50IHRvIHN0cmlwIG91dFxyXG4gICAgICAgIC8vIGFueSBleGlzaXRuZyBlbGVtZW50cyB0aGF0IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSBhIGZhdmljb24uIFRoaXMgd2F5LCB0aGVyZVxyXG4gICAgICAgIC8vIGlzIG9ubHkgb25lIGZhdmljb24gZWxlbWVudCBvbiB0aGUgcGFnZSBhdCBhIHRpbWUuXHJcbiAgICAgICAgdGhpcy5yZW1vdmVFeHRlcm5hbExpbmtFbGVtZW50cygpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFjdGl2ZSBmYXZpY29uIHdpdGggZ2l2ZW4gaWRlbnRpZmllclxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBuYW1lIGZhdmljb24gbmFtZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYWN0aXZhdGUoIG5hbWU6IHN0cmluZyApOiB2b2lkIHtcclxuXHJcbiAgICAgICAgaWYgKCAhIHRoaXMuaWNvbnNbIG5hbWUgXSApIHtcclxuXHJcbiAgICAgICAgICAgIHRocm93KCBuZXcgRXJyb3IoIGBGYXZpY29uIGZvciBbICR7IG5hbWUgfSBdIG5vdCBmb3VuZC5gICkgKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNldE5vZGUoIHRoaXMuaWNvbnNbIG5hbWUgXS50eXBlLCB0aGlzLmljb25zWyBuYW1lIF0uaHJlZiApO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFjdGl2YXRlIHRoZSBkZWZhdWx0IGZhdmljb24gKHdpdGggaXNEZWZhdWx0IHNldCB0byBUcnVlKVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XHJcblxyXG4gICAgICAgIGZvciAoIGNvbnN0IG5hbWUgb2YgT2JqZWN0LmtleXMoIHRoaXMuaWNvbnMgKSApIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGljb24gPSB0aGlzLmljb25zWyBuYW1lIF07XHJcblxyXG4gICAgICAgICAgICBpZiAoIGljb24uaXNEZWZhdWx0ICkge1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0Tm9kZSggaWNvbi50eXBlLCBpY29uLmhyZWYgKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZiB3ZSBtYWRlIGl0IHRoaXMgZmFyLCBub25lIG9mIHRoZSBmYXZpY29ucyB3ZXJlIGZsYWdnZWQgYXMgZGVmYXVsdC4gSW4gdGhhdFxyXG4gICAgICAgIC8vIGNhc2UsIGxldCdzIGp1c3QgcmVtb3ZlIHRoZSBmYXZpY29uIG5vZGUgYWx0b2dldGhlci5cclxuICAgICAgICB0aGlzLnJlbW92ZU5vZGUoKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbmplY3QgdGhlIGZhdmljb24gZWxlbWVudCBpbnRvIHRoZSBkb2N1bWVudCBoZWFkZXJcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHR5cGUgdHlwZSBvZiBpY29uICgucG5nLCAuanBlZywgZXRjKVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBocmVmIGxvY2F0aW9uXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBhZGROb2RlKCB0eXBlOiBzdHJpbmcsIGhyZWY6IHN0cmluZyApOiB2b2lkIHtcclxuXHJcbiAgICAgICAgY29uc3QgbGlua0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnbGluaycgKTtcclxuICAgICAgICBsaW5rRWxlbWVudC5zZXRBdHRyaWJ1dGUoICdpZCcsIHRoaXMuZWxlbWVudElkICk7XHJcbiAgICAgICAgbGlua0VsZW1lbnQuc2V0QXR0cmlidXRlKCAncmVsJywgJ2ljb24nICk7XHJcbiAgICAgICAgbGlua0VsZW1lbnQuc2V0QXR0cmlidXRlKCAndHlwZScsIHR5cGUgKTtcclxuICAgICAgICBsaW5rRWxlbWVudC5zZXRBdHRyaWJ1dGUoICdocmVmJywgaHJlZiApO1xyXG4gICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIGxpbmtFbGVtZW50ICk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIGFuIGF1Z21lbnRlZCBIUkVGIHZhbHVlIHdpdGggYSBjYWNoZS1idXN0aW5nIHF1ZXJ5LXN0cmluZyBwYXJhbWV0ZXJcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaHJlZiBsb2NhdGlvblxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgY2FjaGVCdXN0SHJlZiggaHJlZjogc3RyaW5nICk6IHN0cmluZyB7XHJcblxyXG4gICAgICAgIGNvbnN0IGF1Z21lbnRlZEhyZWYgPSAoIGhyZWYuaW5kZXhPZiggJz8nICkgPT09IC0xIClcclxuICAgICAgICAgICAgPyBgJHsgaHJlZiB9P2Zhdmljb25DYWNoZUJ1c3Q9JHsgRGF0ZS5ub3coKSB9YFxyXG4gICAgICAgICAgICA6IGAkeyBocmVmIH0mZmF2aWNvbkNhY2hlQnVzdD0keyBEYXRlLm5vdygpIH1gXHJcbiAgICAgICAgO1xyXG5cclxuICAgICAgICByZXR1cm4oIGF1Z21lbnRlZEhyZWYgKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJIHJlbW92ZSBhbnkgZmF2aWNvbiBub2RlcyB0aGF0IGFyZSBub3QgY29udHJvbGxlZCBieSB0aGlzIHNlcnZpY2VcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIHJlbW92ZUV4dGVybmFsTGlua0VsZW1lbnRzKCk6IHZvaWQge1xyXG5cclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6cHJlZmVyLWNvbnN0XHJcbiAgICAgICAgbGV0IGxpbmtFbGVtZW50czogTm9kZUxpc3RPZjxFbGVtZW50PiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoIGBsaW5rWyByZWwgfj0gJ2ljb24nIGldYCApO1xyXG5cclxuICAgICAgICBmb3IgKCBjb25zdCBsaW5rRWxlbWVudCBvZiBBcnJheS5mcm9tKCBsaW5rRWxlbWVudHMgKSApIHtcclxuXHJcbiAgICAgICAgICAgIGxpbmtFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGxpbmtFbGVtZW50ICk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgdGhlIGZhdmljb24gbm9kZSBmcm9tIHRoZSBkb2N1bWVudCBoZWFkZXJcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIHJlbW92ZU5vZGUoKTogdm9pZCB7XHJcblxyXG4gICAgICAgIGNvbnN0IGxpbmtFbGVtZW50ID0gZG9jdW1lbnQuaGVhZC5xdWVyeVNlbGVjdG9yKCAnIycgKyB0aGlzLmVsZW1lbnRJZCApO1xyXG5cclxuICAgICAgICBpZiAoIGxpbmtFbGVtZW50ICkge1xyXG5cclxuICAgICAgICAgICAgZG9jdW1lbnQuaGVhZC5yZW1vdmVDaGlsZCggbGlua0VsZW1lbnQgKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBleGlzdGluZyBmYXZpY29uIG5vZGUgYW5kIGluamVjdCBhIG5ldyBmYXZpY29uIG5vZGUgd2l0aCB0aGUgZ2l2ZVxyXG4gICAgICogZWxlbWV0IHNldHRpbmdzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHR5cGUgdHlwZSBvZiBmYXZpY29uXHJcbiAgICAgKiBAcGFyYW0gaHJlZiBsb2NhdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgcHJvdGVjdGVkIHNldE5vZGUoIHR5cGU6IHN0cmluZywgaHJlZjogc3RyaW5nICk6IHZvaWQge1xyXG5cclxuICAgICAgICBjb25zdCBhdWdtZW50ZWRIcmVmID0gdGhpcy51c2VDYWNoZUJ1c3RpbmdcclxuICAgICAgICAgICAgPyB0aGlzLmNhY2hlQnVzdEhyZWYoIGhyZWYgKVxyXG4gICAgICAgICAgICA6IGhyZWZcclxuICAgICAgICA7XHJcblxyXG4gICAgICAgIHRoaXMucmVtb3ZlTm9kZSgpO1xyXG4gICAgICAgIHRoaXMuYWRkTm9kZSggdHlwZSwgYXVnbWVudGVkSHJlZiApO1xyXG5cclxuICAgIH1cclxuXHJcbn1cclxuIl19