// @dynamic
/**
 * @dynamic is used because this class contains static properties
 */
import { Base64Model } from '../../models/base64.model';
import { Subject } from 'rxjs';
export class ConvertToBase64Util {
    /**
     *
     * @param event either type File or Blob
     *
     * Converts to Base64 and returns an observable of Base64Model
     */
    static GetBase64(files) {
        const base64Observable = new Subject();
        const baseArray = [];
        let file;
        for (file of files) {
            const reader = new FileReader();
            // tslint:disable-next-line:no-shadowed-variable
            ((file) => {
                reader.onload = () => {
                    baseArray.push(new Base64Model(reader.result.toString(), file));
                    if (baseArray.length === files.length) {
                        base64Observable.next(baseArray);
                    }
                };
            })(file);
            reader.readAsDataURL(file['file'].rawFile);
            reader.onerror = (error) => {
                console.error('Error: ', error);
            };
        }
        return base64Observable;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVydC10by1iYXNlNjQudXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BsY3UvY29tbW9uLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL2ltYWdlcy9jb252ZXJ0LXRvLWJhc2U2NC51dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFdBQVc7QUFFWDs7R0FFRztBQUVILE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RCxPQUFPLEVBQTBCLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUV2RCxNQUFNLE9BQU8sbUJBQW1CO0lBRTVCOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFrQjtRQUN4QyxNQUFNLGdCQUFnQixHQUFHLElBQUksT0FBTyxFQUFzQixDQUFDO1FBQzNELE1BQU0sU0FBUyxHQUF1QixFQUFFLENBQUM7UUFDekMsSUFBSSxJQUFVLENBQUM7UUFFZixLQUFLLElBQUksSUFBSSxLQUFLLEVBQUU7WUFDbEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztZQUNoQyxnREFBZ0Q7WUFDaEQsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUNWLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFO29CQUNuQixTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFFaEUsSUFBSSxTQUFTLENBQUMsTUFBTSxLQUFLLEtBQUssQ0FBQyxNQUFNLEVBQUU7d0JBQ3JDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztxQkFDbEM7Z0JBQ0gsQ0FBQyxDQUFDO1lBQ0osQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDUCxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMzQyxNQUFNLENBQUMsT0FBTyxHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ3pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ2xDLENBQUMsQ0FBQztTQUNIO1FBRUQsT0FBTyxnQkFBZ0IsQ0FBQztJQUMxQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZHluYW1pY1xyXG5cclxuLyoqXHJcbiAqIEBkeW5hbWljIGlzIHVzZWQgYmVjYXVzZSB0aGlzIGNsYXNzIGNvbnRhaW5zIHN0YXRpYyBwcm9wZXJ0aWVzXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQmFzZTY0TW9kZWwgfSBmcm9tICcuLi8uLi9tb2RlbHMvYmFzZTY0Lm1vZGVsJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaWJlciwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbnZlcnRUb0Jhc2U2NFV0aWwge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBldmVudCBlaXRoZXIgdHlwZSBGaWxlIG9yIEJsb2JcclxuICAgICAqXHJcbiAgICAgKiBDb252ZXJ0cyB0byBCYXNlNjQgYW5kIHJldHVybnMgYW4gb2JzZXJ2YWJsZSBvZiBCYXNlNjRNb2RlbFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIEdldEJhc2U2NChmaWxlczogQXJyYXk8RmlsZT4pOiBPYnNlcnZhYmxlPEFycmF5PEJhc2U2NE1vZGVsPj4ge1xyXG4gICAgICBjb25zdCBiYXNlNjRPYnNlcnZhYmxlID0gbmV3IFN1YmplY3Q8QXJyYXk8QmFzZTY0TW9kZWw+PigpO1xyXG4gICAgICBjb25zdCBiYXNlQXJyYXk6IEFycmF5PEJhc2U2NE1vZGVsPiA9IFtdO1xyXG4gICAgICBsZXQgZmlsZTogRmlsZTtcclxuXHJcbiAgICAgIGZvciAoZmlsZSBvZiBmaWxlcykge1xyXG4gICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXNoYWRvd2VkLXZhcmlhYmxlXHJcbiAgICAgICAgKChmaWxlKSA9PiB7XHJcbiAgICAgICAgcmVhZGVyLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgIGJhc2VBcnJheS5wdXNoKG5ldyBCYXNlNjRNb2RlbChyZWFkZXIucmVzdWx0LnRvU3RyaW5nKCksIGZpbGUpKTtcclxuXHJcbiAgICAgICAgICBpZiAoYmFzZUFycmF5Lmxlbmd0aCA9PT0gZmlsZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGJhc2U2NE9ic2VydmFibGUubmV4dChiYXNlQXJyYXkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgIH0pKGZpbGUpO1xyXG4gICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGVbJ2ZpbGUnXS5yYXdGaWxlKTtcclxuICAgICAgICByZWFkZXIub25lcnJvciA9IChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3I6ICcsIGVycm9yKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gYmFzZTY0T2JzZXJ2YWJsZTtcclxuICAgIH1cclxufVxyXG4iXX0=