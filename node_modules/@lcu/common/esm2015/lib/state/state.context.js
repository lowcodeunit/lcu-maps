import { __awaiter } from "tslib";
import { ObservableContextService } from '../api/observable-context/observable-context.service';
import { Subject, BehaviorSubject, } from 'rxjs';
import { RealTimeConnection } from './../api/real-time/real-time.connection';
import { LCUServiceSettings } from '../api/lcu-service-settings';
import { HttpClient } from '@angular/common/http';
//  TODO:  Need to manage reconnection to hub scenarios here
export class StateContext extends ObservableContextService {
    //  Constructors
    constructor(injector) {
        super();
        this.injector = injector;
        this.connectedToState = new BehaviorSubject({
            Code: -1,
            Message: 'Initialized',
        });
        this.ConnectedToState = this.connectedToState.asObservable();
        this.http = injector.get(HttpClient);
        this.ReconnectionAttempt = new Subject();
        this.Settings = injector.get(LCUServiceSettings);
        const rtUrl = this.buildHubUrl('');
        const actionUrl = this.loadActionUrl('');
        this.rt = new RealTimeConnection(this.http, rtUrl, actionUrl);
        this.rt.ReconnectionAttempt.subscribe((val) => {
            this.ReconnectionAttempt.next(val);
        });
        this.setup();
    }
    //  API Methods
    Execute(action) {
        return this.executeAction(action);
    }
    $Refresh(args = {}) {
        this.Execute({
            Arguments: args,
            Type: 'Refresh',
        });
    }
    Start(shouldUpdate) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.startSub) {
                this.startSub = this.rt.Started.subscribe(() => __awaiter(this, void 0, void 0, function* () {
                    const groupName = yield this.connectToState(shouldUpdate);
                    this.setupReceiveState(groupName);
                    this.connectedToState.next({ Code: 0, Message: 'Success' });
                    this.callRefresh();
                }));
                this.rt.Start();
            }
        });
    }
    //  Helpers
    buildActionUrl(urlRoot) {
        const url = this.loadActionUrl(urlRoot);
        return url;
    }
    buildHubUrl(urlRoot) {
        const url = this.loadHubUrl(urlRoot);
        return url;
    }
    callRefresh() {
        this.$Refresh();
    }
    connectToState(shouldUpdate) {
        return __awaiter(this, void 0, void 0, function* () {
            const stateKey = this.loadStateKey();
            const stateName = this.loadStateName();
            const env = this.loadEnvironment();
            return new Promise((resolve, reject) => {
                this.rt
                    .InvokeAction('ConnectToState', this.loadHeaders(), {
                    ShouldSend: shouldUpdate,
                    Key: stateKey,
                    State: stateName,
                    Environment: env,
                })
                    .subscribe({
                    next: (req) => {
                        if (req.status && req.status.code === 0) {
                            resolve(req.groupName);
                        }
                        else {
                            reject(req.status
                                ? req.status.message
                                : 'Unknown issue connecting to state.');
                        }
                    },
                    error: (err) => reject(err),
                });
            });
        });
    }
    defaultValue() {
        return {};
    }
    executeAction(action) {
        return __awaiter(this, void 0, void 0, function* () {
            const stateKey = this.loadStateKey();
            const stateName = this.loadStateName();
            return this.rt
                .InvokeAction(action.Type, this.loadHeaders(), Object.assign(Object.assign({}, action), { Key: stateKey, State: stateName }))
                .subscribe();
        });
    }
    loadActionPath() {
        const actionRoot = this.loadStateActionRoot();
        return `${actionRoot}`; // ?lcu-app-id=${this.Settings.AppConfig.ID}&lcu-app-ent-api-key=${this.Settings.AppConfig.EnterpriseAPIKey}`;
    }
    loadActionUrl(urlRoot) {
        const apiRoot = this.Settings ? this.Settings.APIRoot || '' : '';
        const actionPath = this.loadActionPath();
        return `${apiRoot}${urlRoot || ''}${actionPath}`;
    }
    loadEnvironment() {
        let env = this.Settings.StateConfig
            ? this.Settings.StateConfig.Environment
            : null;
        if (!env) {
            env = '';
        }
        return env;
    }
    loadHeaders() {
        return {
            'lcu-ent-api-key': this.Settings.AppConfig.EnterpriseAPIKey,
            'lcu-hub-name': this.loadStateName(),
            'lcu-state-key': this.loadStateKey(),
            'lcu-environment': this.loadEnvironment(),
            'lcu-username-mock': this.loadUsernameMock(),
        };
    }
    loadHubPath() {
        const stateRoot = this.loadStateRoot();
        const env = this.loadEnvironment();
        const unmock = this.loadUsernameMock();
        return `${stateRoot}?lcu-app-ent-api-key=${this.Settings.AppConfig.EnterpriseAPIKey}&lcu-environment=${env}&lcu-username-mock=${unmock}`;
    }
    loadHubUrl(urlRoot) {
        const apiRoot = this.Settings ? this.Settings.APIRoot || '' : '';
        const hubPath = this.loadHubPath();
        return `${apiRoot}${urlRoot || ''}${hubPath}`;
    }
    loadStateRoot() {
        const stateRoot = this.Settings.StateConfig && this.Settings.StateConfig.Root !== undefined
            ? this.Settings.StateConfig.Root
            : '';
        return `${stateRoot}/${this.loadStateName()}`;
    }
    loadStateActionRoot() {
        const stateActinRoot = this.Settings.StateConfig &&
            this.Settings.StateConfig.ActionRoot !== undefined
            ? this.Settings.StateConfig.ActionRoot
            : '';
        return `${stateActinRoot}/${this.loadStateName()}`;
    }
    loadUsernameMock() {
        return this.Settings.StateConfig && this.Settings.StateConfig.UsernameMock
            ? this.Settings.StateConfig.UsernameMock
            : '';
    }
    setup() {
        this.Start(false).then();
    }
    setupReceiveState(groupName) {
        this.rt.RegisterHandler(`ReceiveState=>${groupName}`).subscribe((req) => {
            this.subject.next(req);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,