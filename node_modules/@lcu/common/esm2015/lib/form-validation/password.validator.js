// @dynamic
/**
 * @dynamic is used because this class contains static properties
 */
export class PasswordValidator {
    /**
     * Check if password and confirm password match
     *
     * @param password password control
     * @param confirm confirm password control
     */
    static PasswordsMatch(password, confirm) {
        if (!password || !confirm) {
            return;
        }
        return (formGroup) => {
            if (password.value !== confirm.value) {
                confirm.setErrors({ PasswordsMatch: true });
            }
            else {
                confirm.setErrors(null);
            }
            return;
        };
    }
}
/**
 * Password regular expression pattern:
 *
 * At least one upper case English letter
 *
 * At least one lower case Englis letter
 *
 * At least one digit
 *
 * At least one special character
 *
 * Minimum of eight characters
 */
PasswordValidator.StrongPassword = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\$%\^&\*])(?=.{8,}$)/gm;
// public static readonly StrongPassword: string = '\(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\$%\^&\*])(?=.{8,}$)';
PasswordValidator.MediumPassword = /^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})$/gm;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQudmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGxjdS9jb21tb24vIiwic291cmNlcyI6WyJsaWIvZm9ybS12YWxpZGF0aW9uL3Bhc3N3b3JkLnZhbGlkYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxXQUFXO0FBRVg7O0dBRUc7QUFDSCxNQUFNLE9BQU8saUJBQWlCO0lBcUI1Qjs7Ozs7T0FLRztJQUNJLE1BQU0sQ0FBQyxjQUFjLENBQUMsUUFBeUIsRUFBRSxPQUF3QjtRQUU5RSxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQUUsT0FBTztTQUFFO1FBRXRDLE9BQU8sQ0FBQyxTQUFTLEVBQW9CLEVBQUU7WUFDckMsSUFBSSxRQUFRLENBQUMsS0FBSyxLQUFLLE9BQU8sQ0FBQyxLQUFLLEVBQUU7Z0JBQ3BDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQzthQUM3QztpQkFBTTtnQkFDTCxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3pCO1lBQ0QsT0FBTztRQUNULENBQUMsQ0FBQztJQUNKLENBQUM7O0FBckNEOzs7Ozs7Ozs7Ozs7R0FZRztBQUNvQixnQ0FBYyxHQUFXLG1FQUFtRSxDQUFDO0FBQ3BILHFIQUFxSDtBQUc5RixnQ0FBYyxHQUFXLDJGQUEyRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9ybUdyb3VwLCBGb3JtQ29udHJvbCwgVmFsaWRhdG9yRm4sIFZhbGlkYXRpb25FcnJvcnMsIEFic3RyYWN0Q29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuXHJcblxyXG4vLyBAZHluYW1pY1xyXG5cclxuLyoqXHJcbiAqIEBkeW5hbWljIGlzIHVzZWQgYmVjYXVzZSB0aGlzIGNsYXNzIGNvbnRhaW5zIHN0YXRpYyBwcm9wZXJ0aWVzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUGFzc3dvcmRWYWxpZGF0b3Ige1xyXG5cclxuICAvKipcclxuICAgKiBQYXNzd29yZCByZWd1bGFyIGV4cHJlc3Npb24gcGF0dGVybjpcclxuICAgKlxyXG4gICAqIEF0IGxlYXN0IG9uZSB1cHBlciBjYXNlIEVuZ2xpc2ggbGV0dGVyXHJcbiAgICpcclxuICAgKiBBdCBsZWFzdCBvbmUgbG93ZXIgY2FzZSBFbmdsaXMgbGV0dGVyXHJcbiAgICpcclxuICAgKiBBdCBsZWFzdCBvbmUgZGlnaXRcclxuICAgKlxyXG4gICAqIEF0IGxlYXN0IG9uZSBzcGVjaWFsIGNoYXJhY3RlclxyXG4gICAqXHJcbiAgICogTWluaW11bSBvZiBlaWdodCBjaGFyYWN0ZXJzXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBTdHJvbmdQYXNzd29yZDogUmVnRXhwID0gL14oPz0uKlthLXpdKSg/PS4qW0EtWl0pKD89LipbMC05XSkoPz0uKlshQCNcXCQlXFxeJlxcKl0pKD89Lns4LH0kKS9nbTtcclxuICAvLyBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFN0cm9uZ1Bhc3N3b3JkOiBzdHJpbmcgPSAnXFwoPz0uKlthLXpdKSg/PS4qW0EtWl0pKD89LipbMC05XSkoPz0uKlshQCNcXCQlXFxeJlxcKl0pKD89Lns4LH0kKSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG5cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IE1lZGl1bVBhc3N3b3JkOiBSZWdFeHAgPSAvXigoKD89LipbYS16XSkoPz0uKltBLVpdKSl8KCg/PS4qW2Etel0pKD89LipbMC05XSkpfCgoPz0uKltBLVpdKSg/PS4qWzAtOV0pKSkoPz0uezYsfSkkL2dtO1xyXG5cclxuICAvKipcclxuICAgKiBDaGVjayBpZiBwYXNzd29yZCBhbmQgY29uZmlybSBwYXNzd29yZCBtYXRjaFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHBhc3N3b3JkIHBhc3N3b3JkIGNvbnRyb2xcclxuICAgKiBAcGFyYW0gY29uZmlybSBjb25maXJtIHBhc3N3b3JkIGNvbnRyb2xcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIFBhc3N3b3Jkc01hdGNoKHBhc3N3b3JkOiBBYnN0cmFjdENvbnRyb2wsIGNvbmZpcm06IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRvckZuIHtcclxuXHJcbiAgICBpZiAoIXBhc3N3b3JkIHx8ICFjb25maXJtKSB7IHJldHVybjsgfVxyXG5cclxuICAgIHJldHVybiAoZm9ybUdyb3VwKTogVmFsaWRhdGlvbkVycm9ycyA9PiB7XHJcbiAgICAgIGlmIChwYXNzd29yZC52YWx1ZSAhPT0gY29uZmlybS52YWx1ZSkge1xyXG4gICAgICAgIGNvbmZpcm0uc2V0RXJyb3JzKHsgUGFzc3dvcmRzTWF0Y2g6IHRydWUgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uZmlybS5zZXRFcnJvcnMobnVsbCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrIGlmIHBhc3N3b3JkIGFuZCBjb25maXJtIHBhc3N3b3JkIGFyZSBlcXVhbFxyXG4gICAqXHJcbiAgICogQHBhcmFtIGZvcm1Hcm91cCBmb3JtR3JvdXAgY29udGFpbmluZyB0aGUgcGFzc3dvcmQgYW5kIGNvbmZpcm0gcGFzc3dvcmQgZmllbGRzXHJcbiAgICovXHJcbiAgLy8gcHVibGljIHN0YXRpYyBQYXNzd29yZHNNYXRjaChmb3JtR3JvdXA6IEZvcm1Hcm91cCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0ge1xyXG4gIC8vICAgbGV0IHZhbHVlOiBzdHJpbmc7XHJcblxyXG4gIC8vICAgZm9yIChjb25zdCBrZXkgaW4gZm9ybUdyb3VwLmNvbnRyb2xzKSB7XHJcbiAgLy8gICAgIGlmIChmb3JtR3JvdXAuY29udHJvbHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gIC8vICAgICAgIGNvbnN0IGNvbnRyb2w6IEZvcm1Db250cm9sID0gPEZvcm1Db250cm9sPmZvcm1Hcm91cC5jb250cm9sc1trZXldO1xyXG5cclxuICAvLyAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xyXG4gIC8vICAgICAgICAgdmFsdWUgPSBjb250cm9sLnZhbHVlO1xyXG4gIC8vICAgICAgIH0gZWxzZSB7XHJcbiAgLy8gICAgICAgICBpZiAodmFsdWUgIT09IGNvbnRyb2wudmFsdWUpIHtcclxuICAvLyAgICAgICAgICAgcmV0dXJuICh7IFBhc3N3b3Jkc01hdGNoOiB0cnVlIH0pO1xyXG4gIC8vICAgICAgICAgICBicmVhaztcclxuICAvLyAgICAgICAgIH1cclxuICAvLyAgICAgICB9XHJcbiAgLy8gICAgIH1cclxuICAvLyAgIH1cclxuXHJcbiAgLy8gICByZXR1cm4gbnVsbDtcclxuICAvLyB9XHJcbn1cclxuIl19