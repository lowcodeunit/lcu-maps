import { EmailValidationMessagesConstants } from './../utils/constants/email-validation-messages.constants';
import { UserValidationMessagesConstants } from '../utils/constants/user-validation-messages.constants';
import { Constants } from '../utils/constants/constants';
import { PasswordValidationMessagesConstants } from '../utils/constants/password-validation-messages.constants';
import { ZipcodeValidationMessagesConstants } from '../utils/zipcode-validataion-messages.constants';
// @dynamic
/**
 * @dynamic need this because there are static memebers
 */
export class ValidationMessages {
}
ValidationMessages.UserName = [
    { Type: Constants.REQUIRED, Message: UserValidationMessagesConstants.REQUIRED },
    { Type: Constants.MIN_LENGTH, Message: UserValidationMessagesConstants.MIN_LENGTH(5) },
    { Type: Constants.MAX_LENGTH, Message: UserValidationMessagesConstants.MAX_LENGTH(25) },
    { Type: Constants.PATTERN, Message: UserValidationMessagesConstants.PATTERN },
    { Type: Constants.VALID_USERNAME, Message: UserValidationMessagesConstants.VALID }
];
ValidationMessages.Email = [
    { Type: Constants.REQUIRED, Message: EmailValidationMessagesConstants.REQUIRED },
    { Type: Constants.PATTERN, Message: EmailValidationMessagesConstants.PATTERN }
];
ValidationMessages.Password = [
    { Type: Constants.REQUIRED, Message: PasswordValidationMessagesConstants.REQUIRED },
    { Type: Constants.MIN_LENGTH, Message: PasswordValidationMessagesConstants.MIN_LENGTH(5) },
    { Type: Constants.PATTERN, Message: PasswordValidationMessagesConstants.PATTERN }
];
ValidationMessages.ConfirmPassword = [
    { Type: Constants.REQUIRED, Message: PasswordValidationMessagesConstants.CONFIRM_REQUIRED },
    { Type: Constants.PASSWORDS_MATCH, Message: PasswordValidationMessagesConstants.PASSWORDS_MATCH }
];
ValidationMessages.Zipcode = [
    { Type: Constants.PATTERN, Message: ZipcodeValidationMessagesConstants.PATTERN }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMudmFsaWRhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BsY3UvY29tbW9uLyIsInNvdXJjZXMiOlsibGliL2Zvcm0tdmFsaWRhdGlvbi9tZXNzYWdlcy52YWxpZGF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBRTVHLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBQ3hHLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSwyREFBMkQsQ0FBQztBQUNoSCxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUVyRyxXQUFXO0FBQ1g7O0dBRUc7QUFDSCxNQUFNLE9BQU8sa0JBQWtCOztBQUNOLDJCQUFRLEdBQWtDO0lBQy9ELEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLCtCQUErQixDQUFDLFFBQVEsRUFBRTtJQUMvRSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsVUFBVSxFQUFFLE9BQU8sRUFBRSwrQkFBK0IsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUU7SUFDdEYsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsK0JBQStCLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQ3ZGLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLCtCQUErQixDQUFDLE9BQU8sRUFBRTtJQUM3RSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsY0FBYyxFQUFFLE9BQU8sRUFBRSwrQkFBK0IsQ0FBQyxLQUFLLEVBQUU7Q0FDbkYsQ0FBQztBQUVxQix3QkFBSyxHQUFrQztJQUM1RCxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxnQ0FBZ0MsQ0FBQyxRQUFRLEVBQUU7SUFDaEYsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsZ0NBQWdDLENBQUMsT0FBTyxFQUFFO0NBQy9FLENBQUM7QUFFcUIsMkJBQVEsR0FBa0M7SUFDL0QsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsbUNBQW1DLENBQUMsUUFBUSxFQUFFO0lBQ25GLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLG1DQUFtQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUMxRixFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxtQ0FBbUMsQ0FBQyxPQUFPLEVBQUU7Q0FDbEYsQ0FBQztBQUVxQixrQ0FBZSxHQUFrQztJQUN0RSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxtQ0FBbUMsQ0FBQyxnQkFBZ0IsRUFBRTtJQUMzRixFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsZUFBZSxFQUFFLE9BQU8sRUFBRSxtQ0FBbUMsQ0FBQyxlQUFlLEVBQUU7Q0FDbEcsQ0FBQztBQUVxQiwwQkFBTyxHQUFrQztJQUM5RCxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxrQ0FBa0MsQ0FBQyxPQUFPLEVBQUU7Q0FDakYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVtYWlsVmFsaWRhdGlvbk1lc3NhZ2VzQ29uc3RhbnRzIH0gZnJvbSAnLi8uLi91dGlscy9jb25zdGFudHMvZW1haWwtdmFsaWRhdGlvbi1tZXNzYWdlcy5jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBWYWxpZGF0aW9uTWVzc2FnZU1vZGVsIH0gZnJvbSAnLi8uLi9tb2RlbHMvdmFsaWRhdGlvbi1tZXNzYWdlLm1vZGVsJztcclxuaW1wb3J0IHsgVXNlclZhbGlkYXRpb25NZXNzYWdlc0NvbnN0YW50cyB9IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cy91c2VyLXZhbGlkYXRpb24tbWVzc2FnZXMuY29uc3RhbnRzJztcclxuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzL2NvbnN0YW50cyc7XHJcbmltcG9ydCB7IFBhc3N3b3JkVmFsaWRhdGlvbk1lc3NhZ2VzQ29uc3RhbnRzIH0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzL3Bhc3N3b3JkLXZhbGlkYXRpb24tbWVzc2FnZXMuY29uc3RhbnRzJztcclxuaW1wb3J0IHsgWmlwY29kZVZhbGlkYXRpb25NZXNzYWdlc0NvbnN0YW50cyB9IGZyb20gJy4uL3V0aWxzL3ppcGNvZGUtdmFsaWRhdGFpb24tbWVzc2FnZXMuY29uc3RhbnRzJztcclxuXHJcbi8vIEBkeW5hbWljXHJcbi8qKlxyXG4gKiBAZHluYW1pYyBuZWVkIHRoaXMgYmVjYXVzZSB0aGVyZSBhcmUgc3RhdGljIG1lbWViZXJzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVmFsaWRhdGlvbk1lc3NhZ2VzIHtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFVzZXJOYW1lOiBBcnJheTxWYWxpZGF0aW9uTWVzc2FnZU1vZGVsPiA9IFtcclxuICAgIHsgVHlwZTogQ29uc3RhbnRzLlJFUVVJUkVELCBNZXNzYWdlOiBVc2VyVmFsaWRhdGlvbk1lc3NhZ2VzQ29uc3RhbnRzLlJFUVVJUkVEIH0sXHJcbiAgICB7IFR5cGU6IENvbnN0YW50cy5NSU5fTEVOR1RILCBNZXNzYWdlOiBVc2VyVmFsaWRhdGlvbk1lc3NhZ2VzQ29uc3RhbnRzLk1JTl9MRU5HVEgoNSkgfSxcclxuICAgIHsgVHlwZTogQ29uc3RhbnRzLk1BWF9MRU5HVEgsIE1lc3NhZ2U6IFVzZXJWYWxpZGF0aW9uTWVzc2FnZXNDb25zdGFudHMuTUFYX0xFTkdUSCgyNSkgfSxcclxuICAgIHsgVHlwZTogQ29uc3RhbnRzLlBBVFRFUk4sIE1lc3NhZ2U6IFVzZXJWYWxpZGF0aW9uTWVzc2FnZXNDb25zdGFudHMuUEFUVEVSTiB9LFxyXG4gICAgeyBUeXBlOiBDb25zdGFudHMuVkFMSURfVVNFUk5BTUUsIE1lc3NhZ2U6IFVzZXJWYWxpZGF0aW9uTWVzc2FnZXNDb25zdGFudHMuVkFMSUQgfVxyXG4gIF07XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgRW1haWw6IEFycmF5PFZhbGlkYXRpb25NZXNzYWdlTW9kZWw+ID0gW1xyXG4gICAgeyBUeXBlOiBDb25zdGFudHMuUkVRVUlSRUQsIE1lc3NhZ2U6IEVtYWlsVmFsaWRhdGlvbk1lc3NhZ2VzQ29uc3RhbnRzLlJFUVVJUkVEIH0sXHJcbiAgICB7IFR5cGU6IENvbnN0YW50cy5QQVRURVJOLCBNZXNzYWdlOiBFbWFpbFZhbGlkYXRpb25NZXNzYWdlc0NvbnN0YW50cy5QQVRURVJOIH1cclxuICBdO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFBhc3N3b3JkOiBBcnJheTxWYWxpZGF0aW9uTWVzc2FnZU1vZGVsPiA9IFtcclxuICAgIHsgVHlwZTogQ29uc3RhbnRzLlJFUVVJUkVELCBNZXNzYWdlOiBQYXNzd29yZFZhbGlkYXRpb25NZXNzYWdlc0NvbnN0YW50cy5SRVFVSVJFRCB9LFxyXG4gICAgeyBUeXBlOiBDb25zdGFudHMuTUlOX0xFTkdUSCwgTWVzc2FnZTogUGFzc3dvcmRWYWxpZGF0aW9uTWVzc2FnZXNDb25zdGFudHMuTUlOX0xFTkdUSCg1KSB9LFxyXG4gICAgeyBUeXBlOiBDb25zdGFudHMuUEFUVEVSTiwgTWVzc2FnZTogUGFzc3dvcmRWYWxpZGF0aW9uTWVzc2FnZXNDb25zdGFudHMuUEFUVEVSTiB9XHJcbiAgXTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBDb25maXJtUGFzc3dvcmQ6IEFycmF5PFZhbGlkYXRpb25NZXNzYWdlTW9kZWw+ID0gW1xyXG4gICAgeyBUeXBlOiBDb25zdGFudHMuUkVRVUlSRUQsIE1lc3NhZ2U6IFBhc3N3b3JkVmFsaWRhdGlvbk1lc3NhZ2VzQ29uc3RhbnRzLkNPTkZJUk1fUkVRVUlSRUQgfSxcclxuICAgIHsgVHlwZTogQ29uc3RhbnRzLlBBU1NXT1JEU19NQVRDSCwgTWVzc2FnZTogUGFzc3dvcmRWYWxpZGF0aW9uTWVzc2FnZXNDb25zdGFudHMuUEFTU1dPUkRTX01BVENIIH1cclxuICBdO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFppcGNvZGU6IEFycmF5PFZhbGlkYXRpb25NZXNzYWdlTW9kZWw+ID0gW1xyXG4gICAgeyBUeXBlOiBDb25zdGFudHMuUEFUVEVSTiwgTWVzc2FnZTogWmlwY29kZVZhbGlkYXRpb25NZXNzYWdlc0NvbnN0YW50cy5QQVRURVJOIH1cclxuICBdO1xyXG59XHJcbiJdfQ==