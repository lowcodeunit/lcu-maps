import { Directive, Input, ElementRef, Renderer2 } from '@angular/core';
/**
 * Directive for setting theme color to a element, color comes from
 * a local stylesheet
 *
 * @use as an attribute: lcuColor="primary-A700", sets the class
 * .primary-A700 {} to the host element
 */
/**
 * SCSS class types
 */
// type ColorClasses = 'primary-500' | 'accent-500' | 'warn-500';
export class ThemeColorDirective {
    constructor(element, renderer) {
        this.element = element;
        this.renderer = renderer;
    }
    /**
     * Set the current theme class to the element
     */
    set lcuThemeColor(val) {
        // this.renderer.removeClass(this.element.nativeElement, `${val}`);
        this.renderer.addClass(this.element.nativeElement, `${val}`);
        // this.readProperty('background-color');
    }
    /**
     * Get the value of a specific style property
     *
     * @param property style property
     */
    readProperty(property) {
        console.log('element', window.getComputedStyle(this.element.nativeElement).getPropertyValue(property));
        // console.log('element', window.getComputedStyle(this.element.nativeElement));
    }
}
ThemeColorDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
ThemeColorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[lcuThemeColor]'
            },] }
];
ThemeColorDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
ThemeColorDirective.propDecorators = {
    lcuThemeColor: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlbWUtY29sb3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGxjdS9jb21tb24vIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy90aGVtZXMvdGhlbWUtY29sb3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHeEU7Ozs7OztHQU1HO0FBRUg7O0dBRUc7QUFDSCxpRUFBaUU7QUFNakUsTUFBTSxPQUFPLG1CQUFtQjtJQWE5QixZQUNZLE9BQW1CLEVBQ25CLFFBQW1CO1FBRG5CLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFDbkIsYUFBUSxHQUFSLFFBQVEsQ0FBVztJQUMzQixDQUFDO0lBZFA7O09BRUc7SUFDRCxJQUFhLGFBQWEsQ0FBQyxHQUFXO1FBRXBDLG1FQUFtRTtRQUNuRSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFFN0QseUNBQXlDO0lBQzNDLENBQUM7SUFPRDs7OztPQUlHO0lBQ08sWUFBWSxDQUFDLFFBQWdCO1FBQ3JDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDdkcsK0VBQStFO0lBQ2pGLENBQUM7OztZQVpvQixVQUFVO1lBQ1QsU0FBUzs7O1lBbkJoQyxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjthQUM1Qjs7O1lBbEIwQixVQUFVO1lBQUUsU0FBUzs7OzRCQXlCN0MsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUaGVtZVBhbGV0dGUgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBEaXJlY3RpdmUgZm9yIHNldHRpbmcgdGhlbWUgY29sb3IgdG8gYSBlbGVtZW50LCBjb2xvciBjb21lcyBmcm9tXHJcbiAqIGEgbG9jYWwgc3R5bGVzaGVldFxyXG4gKlxyXG4gKiBAdXNlIGFzIGFuIGF0dHJpYnV0ZTogbGN1Q29sb3I9XCJwcmltYXJ5LUE3MDBcIiwgc2V0cyB0aGUgY2xhc3NcclxuICogLnByaW1hcnktQTcwMCB7fSB0byB0aGUgaG9zdCBlbGVtZW50XHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFNDU1MgY2xhc3MgdHlwZXNcclxuICovXHJcbi8vIHR5cGUgQ29sb3JDbGFzc2VzID0gJ3ByaW1hcnktNTAwJyB8ICdhY2NlbnQtNTAwJyB8ICd3YXJuLTUwMCc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tsY3VUaGVtZUNvbG9yXSdcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBUaGVtZUNvbG9yRGlyZWN0aXZlIHtcclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIGN1cnJlbnQgdGhlbWUgY2xhc3MgdG8gdGhlIGVsZW1lbnRcclxuICovXHJcbiAgQElucHV0KCkgc2V0IGxjdVRoZW1lQ29sb3IodmFsOiBzdHJpbmcpIHtcclxuXHJcbiAgICAvLyB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LCBgJHt2YWx9YCk7XHJcbiAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LCBgJHt2YWx9YCk7XHJcblxyXG4gICAgLy8gdGhpcy5yZWFkUHJvcGVydHkoJ2JhY2tncm91bmQtY29sb3InKTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJvdGVjdGVkIGVsZW1lbnQ6IEVsZW1lbnRSZWYsXHJcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXI6IFJlbmRlcmVyMlxyXG4gICkgeyB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCB0aGUgdmFsdWUgb2YgYSBzcGVjaWZpYyBzdHlsZSBwcm9wZXJ0eVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHByb3BlcnR5IHN0eWxlIHByb3BlcnR5XHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIHJlYWRQcm9wZXJ0eShwcm9wZXJ0eTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBjb25zb2xlLmxvZygnZWxlbWVudCcsIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5KSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnZWxlbWVudCcsIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50KSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==