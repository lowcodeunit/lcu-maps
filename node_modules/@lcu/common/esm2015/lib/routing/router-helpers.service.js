import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { ActivatedRoute, Router, NavigationCancel, NavigationEnd, NavigationError, NavigationStart } from '@angular/router';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
let RouterHelpersService = class RouterHelpersService {
    // 	Constructors
    constructor(route, router) {
        this.route = route;
        this.router = router;
    }
    // 	API Methods
    RunOnNavigation(action, navEventType = null) {
        return this.router.events.subscribe((event) => {
            if (navEventType == null || event instanceof navEventType) {
                action(event);
            }
        });
    }
    RunOnNavigationCancel(action) {
        return this.RunOnNavigation(action, NavigationCancel);
    }
    RunOnNavigationEnd(action) {
        return this.RunOnNavigation(action, NavigationEnd);
    }
    RunOnNavigationError(action) {
        return this.RunOnNavigation(action, NavigationError);
    }
    RunOnNavigationStart(action) {
        return this.RunOnNavigation(action, NavigationStart);
    }
    RunOnQueryParam(param, action, checkVal = null) {
        return this.route.queryParams.subscribe((params) => {
            if ((checkVal == null && params[param] != null) || (checkVal != null && params[param] === checkVal)) {
                action(params);
            }
        });
    }
    RunOnRouteParam(param, action, checkVal = null) {
        return this.route.params.subscribe((params) => {
            if ((checkVal == null && params[param] != null) || (checkVal != null && params[param] === checkVal)) {
                action(params);
            }
        });
    }
};
RouterHelpersService.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: Router }
];
RouterHelpersService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RouterHelpersService_Factory() { return new RouterHelpersService(i0.ɵɵinject(i1.ActivatedRoute), i0.ɵɵinject(i1.Router)); }, token: RouterHelpersService, providedIn: "root" });
RouterHelpersService = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __metadata("design:paramtypes", [ActivatedRoute, Router])
], RouterHelpersService);
export { RouterHelpersService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLWhlbHBlcnMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BsY3UvY29tbW9uLyIsInNvdXJjZXMiOlsibGliL3JvdXRpbmcvcm91dGVyLWhlbHBlcnMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7QUFLNUgsSUFBYSxvQkFBb0IsR0FBakMsTUFBYSxvQkFBb0I7SUFDL0IsZ0JBQWdCO0lBQ2hCLFlBQXNCLEtBQXFCLEVBQVksTUFBYztRQUEvQyxVQUFLLEdBQUwsS0FBSyxDQUFnQjtRQUFZLFdBQU0sR0FBTixNQUFNLENBQVE7SUFBRyxDQUFDO0lBRXpFLGVBQWU7SUFDUixlQUFlLENBQUMsTUFBNEIsRUFBRSxlQUFvQixJQUFJO1FBQzNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUU7WUFDakQsSUFBSSxZQUFZLElBQUksSUFBSSxJQUFJLEtBQUssWUFBWSxZQUFZLEVBQUU7Z0JBQ3pELE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNmO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0scUJBQXFCLENBQUMsTUFBNEI7UUFDdkQsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFTSxrQkFBa0IsQ0FBQyxNQUE0QjtRQUNwRCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFTSxvQkFBb0IsQ0FBQyxNQUE0QjtRQUN0RCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFTSxvQkFBb0IsQ0FBQyxNQUE0QjtRQUN0RCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFTSxlQUFlLENBQUMsS0FBYSxFQUFFLE1BQTZCLEVBQUUsV0FBZ0IsSUFBSTtRQUN2RixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQVcsRUFBRSxFQUFFO1lBQ3RELElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLFFBQVEsQ0FBQyxFQUFFO2dCQUNuRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDaEI7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxlQUFlLENBQUMsS0FBYSxFQUFFLE1BQTZCLEVBQUUsV0FBZ0IsSUFBSTtRQUN2RixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQVcsRUFBRSxFQUFFO1lBQ2pELElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLFFBQVEsQ0FBQyxFQUFFO2dCQUNuRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDaEI7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRixDQUFBOztZQTFDOEIsY0FBYztZQUFvQixNQUFNOzs7QUFGMUQsb0JBQW9CO0lBSGhDLFVBQVUsQ0FBQztRQUNWLFVBQVUsRUFBRSxNQUFNO0tBQ25CLENBQUM7cUNBRzZCLGNBQWMsRUFBb0IsTUFBTTtHQUYxRCxvQkFBb0IsQ0E0Q2hDO1NBNUNZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIFJvdXRlciwgTmF2aWdhdGlvbkNhbmNlbCwgTmF2aWdhdGlvbkVuZCwgTmF2aWdhdGlvbkVycm9yLCBOYXZpZ2F0aW9uU3RhcnQgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUm91dGVySGVscGVyc1NlcnZpY2Uge1xyXG4gIC8vIFx0Q29uc3RydWN0b3JzXHJcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSwgcHJvdGVjdGVkIHJvdXRlcjogUm91dGVyKSB7fVxyXG5cclxuICAvLyBcdEFQSSBNZXRob2RzXHJcbiAgcHVibGljIFJ1bk9uTmF2aWdhdGlvbihhY3Rpb246IChldmVudDogYW55KSA9PiB2b2lkLCBuYXZFdmVudFR5cGU6IGFueSA9IG51bGwpIHtcclxuICAgIHJldHVybiB0aGlzLnJvdXRlci5ldmVudHMuc3Vic2NyaWJlKChldmVudDogYW55KSA9PiB7XHJcbiAgICAgIGlmIChuYXZFdmVudFR5cGUgPT0gbnVsbCB8fCBldmVudCBpbnN0YW5jZW9mIG5hdkV2ZW50VHlwZSkge1xyXG4gICAgICAgIGFjdGlvbihldmVudCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIFJ1bk9uTmF2aWdhdGlvbkNhbmNlbChhY3Rpb246IChldmVudDogYW55KSA9PiB2b2lkKSB7XHJcbiAgICByZXR1cm4gdGhpcy5SdW5Pbk5hdmlnYXRpb24oYWN0aW9uLCBOYXZpZ2F0aW9uQ2FuY2VsKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBSdW5Pbk5hdmlnYXRpb25FbmQoYWN0aW9uOiAoZXZlbnQ6IGFueSkgPT4gdm9pZCkge1xyXG4gICAgcmV0dXJuIHRoaXMuUnVuT25OYXZpZ2F0aW9uKGFjdGlvbiwgTmF2aWdhdGlvbkVuZCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgUnVuT25OYXZpZ2F0aW9uRXJyb3IoYWN0aW9uOiAoZXZlbnQ6IGFueSkgPT4gdm9pZCkge1xyXG4gICAgcmV0dXJuIHRoaXMuUnVuT25OYXZpZ2F0aW9uKGFjdGlvbiwgTmF2aWdhdGlvbkVycm9yKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBSdW5Pbk5hdmlnYXRpb25TdGFydChhY3Rpb246IChldmVudDogYW55KSA9PiB2b2lkKSB7XHJcbiAgICByZXR1cm4gdGhpcy5SdW5Pbk5hdmlnYXRpb24oYWN0aW9uLCBOYXZpZ2F0aW9uU3RhcnQpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIFJ1bk9uUXVlcnlQYXJhbShwYXJhbTogc3RyaW5nLCBhY3Rpb246IChwYXJhbXM6IGFueSkgPT4gdm9pZCwgY2hlY2tWYWw6IGFueSA9IG51bGwpIHtcclxuICAgIHJldHVybiB0aGlzLnJvdXRlLnF1ZXJ5UGFyYW1zLnN1YnNjcmliZSgocGFyYW1zOiBhbnkpID0+IHtcclxuICAgICAgaWYgKChjaGVja1ZhbCA9PSBudWxsICYmIHBhcmFtc1twYXJhbV0gIT0gbnVsbCkgfHwgKGNoZWNrVmFsICE9IG51bGwgJiYgcGFyYW1zW3BhcmFtXSA9PT0gY2hlY2tWYWwpKSB7XHJcbiAgICAgICAgYWN0aW9uKHBhcmFtcyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIFJ1bk9uUm91dGVQYXJhbShwYXJhbTogc3RyaW5nLCBhY3Rpb246IChwYXJhbXM6IGFueSkgPT4gdm9pZCwgY2hlY2tWYWw6IGFueSA9IG51bGwpIHtcclxuICAgIHJldHVybiB0aGlzLnJvdXRlLnBhcmFtcy5zdWJzY3JpYmUoKHBhcmFtczogYW55KSA9PiB7XHJcbiAgICAgIGlmICgoY2hlY2tWYWwgPT0gbnVsbCAmJiBwYXJhbXNbcGFyYW1dICE9IG51bGwpIHx8IChjaGVja1ZhbCAhPSBudWxsICYmIHBhcmFtc1twYXJhbV0gPT09IGNoZWNrVmFsKSkge1xyXG4gICAgICAgIGFjdGlvbihwYXJhbXMpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19