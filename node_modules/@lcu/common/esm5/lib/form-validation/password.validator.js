// @dynamic
/**
 * @dynamic is used because this class contains static properties
 */
var PasswordValidator = /** @class */ (function () {
    function PasswordValidator() {
    }
    /**
     * Check if password and confirm password match
     *
     * @param password password control
     * @param confirm confirm password control
     */
    PasswordValidator.PasswordsMatch = function (password, confirm) {
        if (!password || !confirm) {
            return;
        }
        return function (formGroup) {
            if (password.value !== confirm.value) {
                confirm.setErrors({ PasswordsMatch: true });
            }
            else {
                confirm.setErrors(null);
            }
            return;
        };
    };
    /**
     * Password regular expression pattern:
     *
     * At least one upper case English letter
     *
     * At least one lower case Englis letter
     *
     * At least one digit
     *
     * At least one special character
     *
     * Minimum of eight characters
     */
    PasswordValidator.StrongPassword = /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\$%\^&\*])(?=.{8,}$)/gm;
    // public static readonly StrongPassword: string = '\(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\$%\^&\*])(?=.{8,}$)';
    PasswordValidator.MediumPassword = /^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})$/gm;
    return PasswordValidator;
}());
export { PasswordValidator };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQudmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGxjdS9jb21tb24vIiwic291cmNlcyI6WyJsaWIvZm9ybS12YWxpZGF0aW9uL3Bhc3N3b3JkLnZhbGlkYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxXQUFXO0FBRVg7O0dBRUc7QUFDSDtJQUFBO0lBa0VBLENBQUM7SUE3Q0M7Ozs7O09BS0c7SUFDVyxnQ0FBYyxHQUE1QixVQUE2QixRQUF5QixFQUFFLE9BQXdCO1FBRTlFLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFBRSxPQUFPO1NBQUU7UUFFdEMsT0FBTyxVQUFDLFNBQVM7WUFDZixJQUFJLFFBQVEsQ0FBQyxLQUFLLEtBQUssT0FBTyxDQUFDLEtBQUssRUFBRTtnQkFDcEMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2FBQzdDO2lCQUFNO2dCQUNMLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDekI7WUFDRCxPQUFPO1FBQ1QsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQXJDRDs7Ozs7Ozs7Ozs7O09BWUc7SUFDb0IsZ0NBQWMsR0FBVyxtRUFBbUUsQ0FBQztJQUNwSCxxSEFBcUg7SUFHOUYsZ0NBQWMsR0FBVywyRkFBMkYsQ0FBQztJQStDOUksd0JBQUM7Q0FBQSxBQWxFRCxJQWtFQztTQWxFWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JtR3JvdXAsIEZvcm1Db250cm9sLCBWYWxpZGF0b3JGbiwgVmFsaWRhdGlvbkVycm9ycywgQWJzdHJhY3RDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5cclxuXHJcbi8vIEBkeW5hbWljXHJcblxyXG4vKipcclxuICogQGR5bmFtaWMgaXMgdXNlZCBiZWNhdXNlIHRoaXMgY2xhc3MgY29udGFpbnMgc3RhdGljIHByb3BlcnRpZXNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBQYXNzd29yZFZhbGlkYXRvciB7XHJcblxyXG4gIC8qKlxyXG4gICAqIFBhc3N3b3JkIHJlZ3VsYXIgZXhwcmVzc2lvbiBwYXR0ZXJuOlxyXG4gICAqXHJcbiAgICogQXQgbGVhc3Qgb25lIHVwcGVyIGNhc2UgRW5nbGlzaCBsZXR0ZXJcclxuICAgKlxyXG4gICAqIEF0IGxlYXN0IG9uZSBsb3dlciBjYXNlIEVuZ2xpcyBsZXR0ZXJcclxuICAgKlxyXG4gICAqIEF0IGxlYXN0IG9uZSBkaWdpdFxyXG4gICAqXHJcbiAgICogQXQgbGVhc3Qgb25lIHNwZWNpYWwgY2hhcmFjdGVyXHJcbiAgICpcclxuICAgKiBNaW5pbXVtIG9mIGVpZ2h0IGNoYXJhY3RlcnNcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFN0cm9uZ1Bhc3N3b3JkOiBSZWdFeHAgPSAvXig/PS4qW2Etel0pKD89LipbQS1aXSkoPz0uKlswLTldKSg/PS4qWyFAI1xcJCVcXF4mXFwqXSkoPz0uezgsfSQpL2dtO1xyXG4gIC8vIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgU3Ryb25nUGFzc3dvcmQ6IHN0cmluZyA9ICdcXCg/PS4qW2Etel0pKD89LipbQS1aXSkoPz0uKlswLTldKSg/PS4qWyFAI1xcJCVcXF4mXFwqXSkoPz0uezgsfSQpJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgTWVkaXVtUGFzc3dvcmQ6IFJlZ0V4cCA9IC9eKCgoPz0uKlthLXpdKSg/PS4qW0EtWl0pKXwoKD89LipbYS16XSkoPz0uKlswLTldKSl8KCg/PS4qW0EtWl0pKD89LipbMC05XSkpKSg/PS57Nix9KSQvZ207XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrIGlmIHBhc3N3b3JkIGFuZCBjb25maXJtIHBhc3N3b3JkIG1hdGNoXHJcbiAgICpcclxuICAgKiBAcGFyYW0gcGFzc3dvcmQgcGFzc3dvcmQgY29udHJvbFxyXG4gICAqIEBwYXJhbSBjb25maXJtIGNvbmZpcm0gcGFzc3dvcmQgY29udHJvbFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgUGFzc3dvcmRzTWF0Y2gocGFzc3dvcmQ6IEFic3RyYWN0Q29udHJvbCwgY29uZmlybTogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdG9yRm4ge1xyXG5cclxuICAgIGlmICghcGFzc3dvcmQgfHwgIWNvbmZpcm0pIHsgcmV0dXJuOyB9XHJcblxyXG4gICAgcmV0dXJuIChmb3JtR3JvdXApOiBWYWxpZGF0aW9uRXJyb3JzID0+IHtcclxuICAgICAgaWYgKHBhc3N3b3JkLnZhbHVlICE9PSBjb25maXJtLnZhbHVlKSB7XHJcbiAgICAgICAgY29uZmlybS5zZXRFcnJvcnMoeyBQYXNzd29yZHNNYXRjaDogdHJ1ZSB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25maXJtLnNldEVycm9ycyhudWxsKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm47XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hlY2sgaWYgcGFzc3dvcmQgYW5kIGNvbmZpcm0gcGFzc3dvcmQgYXJlIGVxdWFsXHJcbiAgICpcclxuICAgKiBAcGFyYW0gZm9ybUdyb3VwIGZvcm1Hcm91cCBjb250YWluaW5nIHRoZSBwYXNzd29yZCBhbmQgY29uZmlybSBwYXNzd29yZCBmaWVsZHNcclxuICAgKi9cclxuICAvLyBwdWJsaWMgc3RhdGljIFBhc3N3b3Jkc01hdGNoKGZvcm1Hcm91cDogRm9ybUdyb3VwKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB7XHJcbiAgLy8gICBsZXQgdmFsdWU6IHN0cmluZztcclxuXHJcbiAgLy8gICBmb3IgKGNvbnN0IGtleSBpbiBmb3JtR3JvdXAuY29udHJvbHMpIHtcclxuICAvLyAgICAgaWYgKGZvcm1Hcm91cC5jb250cm9scy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgLy8gICAgICAgY29uc3QgY29udHJvbDogRm9ybUNvbnRyb2wgPSA8Rm9ybUNvbnRyb2w+Zm9ybUdyb3VwLmNvbnRyb2xzW2tleV07XHJcblxyXG4gIC8vICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgLy8gICAgICAgICB2YWx1ZSA9IGNvbnRyb2wudmFsdWU7XHJcbiAgLy8gICAgICAgfSBlbHNlIHtcclxuICAvLyAgICAgICAgIGlmICh2YWx1ZSAhPT0gY29udHJvbC52YWx1ZSkge1xyXG4gIC8vICAgICAgICAgICByZXR1cm4gKHsgUGFzc3dvcmRzTWF0Y2g6IHRydWUgfSk7XHJcbiAgLy8gICAgICAgICAgIGJyZWFrO1xyXG4gIC8vICAgICAgICAgfVxyXG4gIC8vICAgICAgIH1cclxuICAvLyAgICAgfVxyXG4gIC8vICAgfVxyXG5cclxuICAvLyAgIHJldHVybiBudWxsO1xyXG4gIC8vIH1cclxufVxyXG4iXX0=