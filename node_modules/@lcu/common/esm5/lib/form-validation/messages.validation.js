import { EmailValidationMessagesConstants } from './../utils/constants/email-validation-messages.constants';
import { UserValidationMessagesConstants } from '../utils/constants/user-validation-messages.constants';
import { Constants } from '../utils/constants/constants';
import { PasswordValidationMessagesConstants } from '../utils/constants/password-validation-messages.constants';
import { ZipcodeValidationMessagesConstants } from '../utils/zipcode-validataion-messages.constants';
// @dynamic
/**
 * @dynamic need this because there are static memebers
 */
var ValidationMessages = /** @class */ (function () {
    function ValidationMessages() {
    }
    ValidationMessages.UserName = [
        { Type: Constants.REQUIRED, Message: UserValidationMessagesConstants.REQUIRED },
        { Type: Constants.MIN_LENGTH, Message: UserValidationMessagesConstants.MIN_LENGTH(5) },
        { Type: Constants.MAX_LENGTH, Message: UserValidationMessagesConstants.MAX_LENGTH(25) },
        { Type: Constants.PATTERN, Message: UserValidationMessagesConstants.PATTERN },
        { Type: Constants.VALID_USERNAME, Message: UserValidationMessagesConstants.VALID }
    ];
    ValidationMessages.Email = [
        { Type: Constants.REQUIRED, Message: EmailValidationMessagesConstants.REQUIRED },
        { Type: Constants.PATTERN, Message: EmailValidationMessagesConstants.PATTERN }
    ];
    ValidationMessages.Password = [
        { Type: Constants.REQUIRED, Message: PasswordValidationMessagesConstants.REQUIRED },
        { Type: Constants.MIN_LENGTH, Message: PasswordValidationMessagesConstants.MIN_LENGTH(5) },
        { Type: Constants.PATTERN, Message: PasswordValidationMessagesConstants.PATTERN }
    ];
    ValidationMessages.ConfirmPassword = [
        { Type: Constants.REQUIRED, Message: PasswordValidationMessagesConstants.CONFIRM_REQUIRED },
        { Type: Constants.PASSWORDS_MATCH, Message: PasswordValidationMessagesConstants.PASSWORDS_MATCH }
    ];
    ValidationMessages.Zipcode = [
        { Type: Constants.PATTERN, Message: ZipcodeValidationMessagesConstants.PATTERN }
    ];
    return ValidationMessages;
}());
export { ValidationMessages };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMudmFsaWRhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BsY3UvY29tbW9uLyIsInNvdXJjZXMiOlsibGliL2Zvcm0tdmFsaWRhdGlvbi9tZXNzYWdlcy52YWxpZGF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBRTVHLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBQ3hHLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSwyREFBMkQsQ0FBQztBQUNoSCxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUVyRyxXQUFXO0FBQ1g7O0dBRUc7QUFDSDtJQUFBO0lBNEJBLENBQUM7SUEzQndCLDJCQUFRLEdBQWtDO1FBQy9ELEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLCtCQUErQixDQUFDLFFBQVEsRUFBRTtRQUMvRSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsVUFBVSxFQUFFLE9BQU8sRUFBRSwrQkFBK0IsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDdEYsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsK0JBQStCLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQ3ZGLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLCtCQUErQixDQUFDLE9BQU8sRUFBRTtRQUM3RSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsY0FBYyxFQUFFLE9BQU8sRUFBRSwrQkFBK0IsQ0FBQyxLQUFLLEVBQUU7S0FDbkYsQ0FBQztJQUVxQix3QkFBSyxHQUFrQztRQUM1RCxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxnQ0FBZ0MsQ0FBQyxRQUFRLEVBQUU7UUFDaEYsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsZ0NBQWdDLENBQUMsT0FBTyxFQUFFO0tBQy9FLENBQUM7SUFFcUIsMkJBQVEsR0FBa0M7UUFDL0QsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsbUNBQW1DLENBQUMsUUFBUSxFQUFFO1FBQ25GLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLG1DQUFtQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUMxRixFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxtQ0FBbUMsQ0FBQyxPQUFPLEVBQUU7S0FDbEYsQ0FBQztJQUVxQixrQ0FBZSxHQUFrQztRQUN0RSxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxtQ0FBbUMsQ0FBQyxnQkFBZ0IsRUFBRTtRQUMzRixFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsZUFBZSxFQUFFLE9BQU8sRUFBRSxtQ0FBbUMsQ0FBQyxlQUFlLEVBQUU7S0FDbEcsQ0FBQztJQUVxQiwwQkFBTyxHQUFrQztRQUM5RCxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxrQ0FBa0MsQ0FBQyxPQUFPLEVBQUU7S0FDakYsQ0FBQztJQUNKLHlCQUFDO0NBQUEsQUE1QkQsSUE0QkM7U0E1Qlksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW1haWxWYWxpZGF0aW9uTWVzc2FnZXNDb25zdGFudHMgfSBmcm9tICcuLy4uL3V0aWxzL2NvbnN0YW50cy9lbWFpbC12YWxpZGF0aW9uLW1lc3NhZ2VzLmNvbnN0YW50cyc7XHJcbmltcG9ydCB7IFZhbGlkYXRpb25NZXNzYWdlTW9kZWwgfSBmcm9tICcuLy4uL21vZGVscy92YWxpZGF0aW9uLW1lc3NhZ2UubW9kZWwnO1xyXG5pbXBvcnQgeyBVc2VyVmFsaWRhdGlvbk1lc3NhZ2VzQ29uc3RhbnRzIH0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzL3VzZXItdmFsaWRhdGlvbi1tZXNzYWdlcy5jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tICcuLi91dGlscy9jb25zdGFudHMvY29uc3RhbnRzJztcclxuaW1wb3J0IHsgUGFzc3dvcmRWYWxpZGF0aW9uTWVzc2FnZXNDb25zdGFudHMgfSBmcm9tICcuLi91dGlscy9jb25zdGFudHMvcGFzc3dvcmQtdmFsaWRhdGlvbi1tZXNzYWdlcy5jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBaaXBjb2RlVmFsaWRhdGlvbk1lc3NhZ2VzQ29uc3RhbnRzIH0gZnJvbSAnLi4vdXRpbHMvemlwY29kZS12YWxpZGF0YWlvbi1tZXNzYWdlcy5jb25zdGFudHMnO1xyXG5cclxuLy8gQGR5bmFtaWNcclxuLyoqXHJcbiAqIEBkeW5hbWljIG5lZWQgdGhpcyBiZWNhdXNlIHRoZXJlIGFyZSBzdGF0aWMgbWVtZWJlcnNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBWYWxpZGF0aW9uTWVzc2FnZXMge1xyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgVXNlck5hbWU6IEFycmF5PFZhbGlkYXRpb25NZXNzYWdlTW9kZWw+ID0gW1xyXG4gICAgeyBUeXBlOiBDb25zdGFudHMuUkVRVUlSRUQsIE1lc3NhZ2U6IFVzZXJWYWxpZGF0aW9uTWVzc2FnZXNDb25zdGFudHMuUkVRVUlSRUQgfSxcclxuICAgIHsgVHlwZTogQ29uc3RhbnRzLk1JTl9MRU5HVEgsIE1lc3NhZ2U6IFVzZXJWYWxpZGF0aW9uTWVzc2FnZXNDb25zdGFudHMuTUlOX0xFTkdUSCg1KSB9LFxyXG4gICAgeyBUeXBlOiBDb25zdGFudHMuTUFYX0xFTkdUSCwgTWVzc2FnZTogVXNlclZhbGlkYXRpb25NZXNzYWdlc0NvbnN0YW50cy5NQVhfTEVOR1RIKDI1KSB9LFxyXG4gICAgeyBUeXBlOiBDb25zdGFudHMuUEFUVEVSTiwgTWVzc2FnZTogVXNlclZhbGlkYXRpb25NZXNzYWdlc0NvbnN0YW50cy5QQVRURVJOIH0sXHJcbiAgICB7IFR5cGU6IENvbnN0YW50cy5WQUxJRF9VU0VSTkFNRSwgTWVzc2FnZTogVXNlclZhbGlkYXRpb25NZXNzYWdlc0NvbnN0YW50cy5WQUxJRCB9XHJcbiAgXTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBFbWFpbDogQXJyYXk8VmFsaWRhdGlvbk1lc3NhZ2VNb2RlbD4gPSBbXHJcbiAgICB7IFR5cGU6IENvbnN0YW50cy5SRVFVSVJFRCwgTWVzc2FnZTogRW1haWxWYWxpZGF0aW9uTWVzc2FnZXNDb25zdGFudHMuUkVRVUlSRUQgfSxcclxuICAgIHsgVHlwZTogQ29uc3RhbnRzLlBBVFRFUk4sIE1lc3NhZ2U6IEVtYWlsVmFsaWRhdGlvbk1lc3NhZ2VzQ29uc3RhbnRzLlBBVFRFUk4gfVxyXG4gIF07XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgUGFzc3dvcmQ6IEFycmF5PFZhbGlkYXRpb25NZXNzYWdlTW9kZWw+ID0gW1xyXG4gICAgeyBUeXBlOiBDb25zdGFudHMuUkVRVUlSRUQsIE1lc3NhZ2U6IFBhc3N3b3JkVmFsaWRhdGlvbk1lc3NhZ2VzQ29uc3RhbnRzLlJFUVVJUkVEIH0sXHJcbiAgICB7IFR5cGU6IENvbnN0YW50cy5NSU5fTEVOR1RILCBNZXNzYWdlOiBQYXNzd29yZFZhbGlkYXRpb25NZXNzYWdlc0NvbnN0YW50cy5NSU5fTEVOR1RIKDUpIH0sXHJcbiAgICB7IFR5cGU6IENvbnN0YW50cy5QQVRURVJOLCBNZXNzYWdlOiBQYXNzd29yZFZhbGlkYXRpb25NZXNzYWdlc0NvbnN0YW50cy5QQVRURVJOIH1cclxuICBdO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IENvbmZpcm1QYXNzd29yZDogQXJyYXk8VmFsaWRhdGlvbk1lc3NhZ2VNb2RlbD4gPSBbXHJcbiAgICB7IFR5cGU6IENvbnN0YW50cy5SRVFVSVJFRCwgTWVzc2FnZTogUGFzc3dvcmRWYWxpZGF0aW9uTWVzc2FnZXNDb25zdGFudHMuQ09ORklSTV9SRVFVSVJFRCB9LFxyXG4gICAgeyBUeXBlOiBDb25zdGFudHMuUEFTU1dPUkRTX01BVENILCBNZXNzYWdlOiBQYXNzd29yZFZhbGlkYXRpb25NZXNzYWdlc0NvbnN0YW50cy5QQVNTV09SRFNfTUFUQ0ggfVxyXG4gIF07XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgWmlwY29kZTogQXJyYXk8VmFsaWRhdGlvbk1lc3NhZ2VNb2RlbD4gPSBbXHJcbiAgICB7IFR5cGU6IENvbnN0YW50cy5QQVRURVJOLCBNZXNzYWdlOiBaaXBjb2RlVmFsaWRhdGlvbk1lc3NhZ2VzQ29uc3RhbnRzLlBBVFRFUk4gfVxyXG4gIF07XHJcbn1cclxuIl19