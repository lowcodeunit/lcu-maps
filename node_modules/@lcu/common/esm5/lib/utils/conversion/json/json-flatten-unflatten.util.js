import { __read } from "tslib";
import { IsDataTypeUtil } from './../../type/is-data-type.util';
// @dynamic
/**
 * @dynamic is used because this class contains static properties
 */
/**
 * Flatten and Unflatten JSON
 *
 * Original Code Example: http://jsfiddle.net/crl/WSzec/154/
 */
var JSONFlattenUnflatten = /** @class */ (function () {
    function JSONFlattenUnflatten() {
    }
    /**
     * Flatten a standard JSON Object
     *
     * @param json JSON object to be flattened
     *
     * @param map recursive map data
     *
     * @param prefix dotnotated path
     */
    JSONFlattenUnflatten.Flatten = function (json, map, prefix) {
        var _this = this;
        if (map === void 0) { map = {}; }
        if (prefix === void 0) { prefix = ''; }
        if (Array.isArray(json)) {
            json.forEach(function (itm, idx) {
                if (IsDataTypeUtil.IsObject(json[itm]) && json[itm]) {
                    _this.Flatten(json[itm], map, prefix + '[' + itm + ']');
                }
                else {
                    map[prefix + '[' + itm + ']'] = json[itm];
                }
            });
            return map;
        }
        Object.entries(json).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            if (IsDataTypeUtil.IsObject(json[key]) && json[key]) {
                _this.Flatten(json[key], map, (prefix ? prefix + '.' : '') + key);
            }
            else {
                map[(prefix ? prefix + '.' : '') + key] = json[key];
            }
        });
        return map;
    };
    /**
     * Flatten JSON into a map
     *
     * @param json JSON object to be flattened
     *
     * @param map recursive map data
     *
     * @param prefix dotnotated path
     */
    JSONFlattenUnflatten.FlattenMap = function (json, map, prefix) {
        var _this = this;
        if (map === void 0) { map = new Map(); }
        if (prefix === void 0) { prefix = ''; }
        if (Array.isArray(json)) {
            json.forEach(function (itm, idx) {
                if (IsDataTypeUtil.IsObject(json[itm]) && json[itm]) {
                    _this.FlattenMap(json[itm], map, prefix + '[' + itm + ']');
                }
                else {
                    map.set(prefix + '[' + itm + ']', json[itm]);
                }
            });
            return map;
        }
        Object.entries(json).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            if (IsDataTypeUtil.IsObject(json[key]) && json[key]) {
                if (Object.entries(json[key]).length === 0) {
                    return;
                }
                _this.FlattenMap(json[key], map, (prefix ? prefix + '.' : '') + key);
            }
            else {
                map.set((prefix ? prefix + '.' : '') + key, json[key]);
            }
        });
        return map;
    };
    /**
     * Flatten JSON into a map
     *
     * @param json JSON object to be flattened
     *
     * @param map recursive map data
     *
     * @param prefix dotnotated path
     */
    JSONFlattenUnflatten.FlattenMapTest = function (json, map, prefix) {
        var _this = this;
        if (map === void 0) { map = new Map(); }
        if (prefix === void 0) { prefix = ''; }
        if (Array.isArray(json)) {
            json.forEach(function (itm, idx) {
                if (IsDataTypeUtil.IsObject(json[itm]) && json[itm]) {
                    _this.FlattenMap(json[itm], map, prefix + '[' + itm + ']');
                }
                else {
                    map.set(prefix + '[' + itm + ']', json[itm]);
                }
            });
            return map;
        }
        Object.entries(json).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            if (IsDataTypeUtil.IsObject(json[key]) && json[key]) {
                if (Object.entries(json[key]).length === 0) {
                    return;
                }
                _this.FlattenMapTest(json[key], map, (prefix ? prefix + '.' : '') + key);
            }
            else {
                map.set((prefix ? prefix + '.' : '') + key, json[key]);
            }
        });
        return map;
    };
    /**
     * Flatten JSON into a map
     *
     * @param json JSON object to be flattened
     *
     * @param map recursive map data
     *
     * @param prefix dotnotated path
     */
    JSONFlattenUnflatten.FlattenMapJSONSchemaItem = function (json, map, prefix) {
        var _this = this;
        if (map === void 0) { map = new Map(); }
        if (prefix === void 0) { prefix = ''; }
        if (Array.isArray(json)) {
            json.forEach(function (itm, idx) {
                if (IsDataTypeUtil.IsObject(json[itm]) && json[itm]) {
                    _this.FlattenMap(json[itm], map, prefix + '[' + itm + ']');
                }
                else {
                    map.set(prefix + '[' + itm + ']', json[itm]);
                }
            });
            return map;
        }
        Object.entries(json).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            if (IsDataTypeUtil.IsObject(json[key]) && json[key]) {
                _this.FlattenMap(json[key], map, (prefix ? prefix + '.' : '') + key);
            }
            else {
                map.set((prefix ? prefix + '.' : '') + key, json[key]);
            }
        });
        return map;
    };
    /**
     * Unflatten an already flatten JSON object
     *
     * @param map object to unflatten
     */
    JSONFlattenUnflatten.Unflatten = function (map) {
        var returnObject = {};
        Object.entries(map).forEach(function (_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            var keysRegEx = /(?:\.?([^.[]+))|(\[\d+\])/g;
            var match;
            var oi = returnObject; // ref to returnObject, modified in loop below
            // tslint:disable-next-line:no-conditional-assignment
            while (match = keysRegEx.exec(key)) { // method executes a search for a match in a specified string. Returns a result array,
                var prefix = key[match.index + match[0].length];
                var keyName = match[1];
                if (!prefix) { // nothing more, store value in oi[keyName]
                    oi[keyName] = value;
                }
                else {
                    if (keyName) {
                        if (!oi.hasOwnProperty(keyName)) {
                            oi[keyName] = prefix === '[' ? [] : {};
                        }
                    }
                    else {
                        keyName = match[2].slice(1, -1);
                        if (!oi.hasOwnProperty(keyName)) {
                            oi[keyName] = prefix === '[' ? [] : {};
                        }
                    }
                }
                oi = oi[keyName];
            }
        });
        return returnObject;
    };
    /**
     * Unflatten map data
     *
     * @param map map data
     */
    JSONFlattenUnflatten.UnflattenMap = function (map) {
        var returnObject = {};
        map.forEach(function (value, key) {
            var keysRegEx = /(?:\.?([^.[]+))|(\[\d+\])/g;
            var match;
            var oi = returnObject; // ref to returnObject, modified in loop below
            // tslint:disable-next-line:no-conditional-assignment
            while (match = keysRegEx.exec(key)) { // method executes a search for a match in a specified string. Returns a result array,
                var prefix = key[match.index + match[0].length];
                var keyName = match[1];
                if (!prefix) { // nothing more, store value in oi[keyName]
                    oi[keyName] = value;
                }
                else {
                    if (keyName) {
                        if (!oi.hasOwnProperty(keyName)) {
                            oi[keyName] = prefix === '[' ? [] : {};
                        }
                    }
                    else {
                        keyName = match[2].slice(1, -1);
                        if (!oi.hasOwnProperty(keyName)) {
                            oi[keyName] = prefix === '[' ? [] : {};
                        }
                    }
                }
                oi = oi[keyName];
            }
        });
        return returnObject;
    };
    return JSONFlattenUnflatten;
}());
export { JSONFlattenUnflatten };
//# sourceMappingURL=data:application/json;base64,