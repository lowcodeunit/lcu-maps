import { __assign, __read, __spread } from "tslib";
// @dynamic
/**
 * @dynamic is used because this class contains static properties
 */
var DotNotationUtil = /** @class */ (function () {
    function DotNotationUtil() {
    }
    /**
     * Using dot notation, iterate the object and change the key's value
     *
     * @param obj object to test
     *
     * @param propertyPath Dot notation path
     *
     * @param newVal Changed value
     */
    DotNotationUtil.SetValue = function (obj, propertyPath, newVal) {
        /**
         * split propertyPath string into an array of strings and iterate each itm with reduce
         *
         * @param acc(accumulator) returned object to iterate
         *
         * @param curr(current value) current element being processed in the array
         *
         * @param idx index position of the current element being processed in the array
         *
         * @param arr array we created with the split function above
         *
         */
        return propertyPath.split('.').reduce(function (acc, curr, idx, arr) {
            if (idx === (arr.length - 1) && acc) {
                acc[curr] = newVal;
            }
            // return a new accumulator to the reduce callback(starts the loop with the next curr value)
            return acc ? acc[curr] : null;
            // inital value to use as the first argument(this is the item to start the iteration with)
        }, obj);
    };
    /**
     * Using dot notation, iterate the object and return the key's value
     *
     * @param obj object to test
     *
     * @param pathArr array of names used to drill into objects
     */
    DotNotationUtil.GetValue = function (obj, propertyPath) {
        /**
         * split propertyPath string into an array of strings and iterate each itm with reduce
         *
         * @param acc(accumulator) returned object to iterate
         *
         * @param curr(current value) current element being processed in the array
         *
         * @param idx index position of the current element being processed in the array
         *
         * @param arr array we created with the split function above
         *
         */
        return propertyPath.split('.').reduce(function (acc, curr, idx, arr) {
            if (idx === (arr.length - 1) && acc) {
                return acc[curr];
            }
            // return a new accumulator to the reduce callback(starts the loop with the next curr value)
            return acc ? acc[curr] : null;
            // inital value to use as the first argument(this is the item to start the iteration with)
        }, obj);
    };
    DotNotationUtil.SetKeyValue = function (json, propertyPath, oldKey, newKey, objToChange) {
        var _this = this;
        // for top level properties
        if (propertyPath.split('.').length === 1) {
            return Object.keys(json).reduce(function (acc, curr, idx, arr) {
                var _a, _b;
                return curr === oldKey ? (__assign(__assign({}, acc), (_a = {}, _a[newKey] = json[oldKey], _a))) : (__assign(__assign({}, acc), (_b = {}, _b[curr] = json[curr], _b)));
            }, {});
        }
        // for nested properties
        if (propertyPath.split('.').length > 1) {
            return propertyPath.split('.').reduce(function (acc, curr, idx, arr) {
                var _a;
                if (idx === (arr.length - 1) && acc) {
                    var idxPos = arr.indexOf(objToChange);
                    var idxPosArr = __spread(arr.splice(0, idxPos + 1));
                    DotNotationUtil.SetValue(json, idxPosArr.join('.'), _this.RenameKeys((_a = {}, _a[oldKey] = newKey, _a), acc));
                    return json;
                    // return {
                    //   ...schema, [objToChange]: this.renameKeys({[oldKey]: newKey}, acc)
                    // };
                }
                return acc ? acc[curr] : null; // if acc, then start additional iterations with acc[curr]
            }, json); // first item to start the loop
        }
    };
    /**
     * Rename property keys
     */
    DotNotationUtil.RenameKeys = function (keysMap, obj) {
        return Object
            .keys(obj)
            .reduce(function (acc, key) {
            var _a;
            var renamedObject = (_a = {},
                _a[keysMap[key] || key] = obj[key],
                _a);
            return __assign(__assign({}, acc), renamedObject);
        }, {});
    };
    return DotNotationUtil;
}());
export { DotNotationUtil };
//# sourceMappingURL=data:application/json;base64,