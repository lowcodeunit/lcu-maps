import { Pipe } from '@angular/core';
import { DatePipe, DecimalPipe, PercentPipe } from '@angular/common';
import { DataPipeConstants } from '../constants/data-pipe.constants';
import { TemperatureConversion } from '../conversion/temperature.conversion';
var DataPipes = /** @class */ (function () {
    function DataPipes() {
    }
    DataPipes.prototype.transform = function (value, args) {
        if (!args) {
            return value;
        }
        /**
         * Return date M/d/YYYY
         */
        if (args.toLowerCase() === DataPipeConstants.PIPE_SHORTDATE) {
            var pipe = new DatePipe('en-US');
            var transformed = pipe.transform(value, DataPipeConstants.DATE_SHORTDATE);
            return transformed;
        }
        /**
         * Return date
         */
        if (args.toLowerCase() === DataPipeConstants.PIPE_DATE) {
            var pipe = new DatePipe('en-US');
            var transformed = pipe.transform(value, DataPipeConstants.DATE_FMT);
            return transformed;
        }
        /**
         * Return date MMM d, y
         */
        if (args.toLowerCase() === DataPipeConstants.PIPE_MEDIUMDATE) {
            var pipe = new DatePipe('en-US');
            var transformed = pipe.transform(value, 'MMM d, y');
            return transformed;
        }
        /**
         * Return date 'EEEE, MMMM d, y'
         */
        if (args.toLowerCase() === DataPipeConstants.PIPE_FULLDATE) {
            var pipe = new DatePipe('en-US');
            var transformed = pipe.transform(value, DataPipeConstants.DATE_FULLDATE);
            return transformed;
        }
        /**
         * Return date from epoch value
         */
        if (args.toLowerCase() === DataPipeConstants.PIPE_EPOCH) {
            var pipe = new DatePipe('en-US');
            var transformed = pipe.transform(value * 1000, DataPipeConstants.DATE_DAY_TIME);
            return transformed;
        }
        /**
         * Return number with decimal
         */
        if (args.toLowerCase() === DataPipeConstants.PIPE_NUMBER) {
            var pipe = new DecimalPipe('en-US');
            var transformed = pipe.transform(value, '1.0-0');
            return transformed;
        }
        /**
         * Return return number with mph appended
         */
        if (args.toLowerCase() === DataPipeConstants.PIPE_MPH) {
            var pipe = new DecimalPipe('en-US');
            var transformed = pipe.transform(value, '1.0-0');
            return transformed + ' mph';
        }
        /**
         * Return percentage
         */
        if (args.toLowerCase() === DataPipeConstants.PIPE_PERCENTAGE) {
            var pipe = new PercentPipe('en-US');
            var transformed = pipe.transform(value);
            return transformed;
        }
        /**
         * Return percentage
         */
        if (args.toLowerCase() === DataPipeConstants.PIPE_PERCENTAGE_DECIMAL) {
            var pipe = new PercentPipe('en-US');
            var transformed = pipe.transform(value, '2.2-2');
            return transformed;
        }
        /**
         * Return percentage with two decimals
         */
        if (args.toLowerCase() === DataPipeConstants.PIPE_DECIMAL_TWO) {
            var pipe = new DecimalPipe('en-US');
            var transformed = pipe.transform(value, '1.2-2');
            return transformed;
        }
        /**
         * Return percentage with four decimals
         */
        if (args.toLowerCase() === DataPipeConstants.PIPE_DECIMAL_FOUR) {
            var pipe = new DecimalPipe('en-US');
            var transformed = pipe.transform(value, '1.4-4');
            return transformed;
        }
        /**
         * Return temperature in fahrenheit, append °F
         */
        if (args.toLowerCase() === DataPipeConstants.PIPE_TEMP_FAHRENHEIT) {
            var pipe = new DecimalPipe('en-US');
            // const temperature = (value * 32) + 1.8;
            var transformed = pipe.transform(value, '1.0-0');
            return transformed + ' °F';
        }
        /**
         * Return temperature in kelvin, append °K
         */
        if (args.toLowerCase() === DataPipeConstants.PIPE_TEMP_KELVIN) {
            var pipe = new DecimalPipe('en-US');
            // const temperature = (value * 32) + 1.8;
            var temperature = TemperatureConversion.FahrenheitToKelvin(value);
            var transformed = pipe.transform(temperature, '1.0-0');
            return transformed + ' °K';
        }
        /**
         * Return temperature in celsius, append °C
         */
        if (args.toLowerCase() === DataPipeConstants.PIPE_TEMP_CELSIUS) {
            var pipe = new DecimalPipe('en-US');
            var temperature = TemperatureConversion.FahrenheitToCelsius(value);
            var transformed = pipe.transform(temperature, '1.0-0');
            return transformed + ' °C';
        }
        /**
         * IF none of the above work, return the original value
         */
        return value;
    };
    DataPipes.decorators = [
        { type: Pipe, args: [{
                    name: 'dataPipes'
                },] }
    ];
    return DataPipes;
}());
export { DataPipes };
//# sourceMappingURL=data:application/json;base64,