import { __decorate } from "tslib";
import { Pipe } from '@angular/core';
import { StringPipeConstants } from '../constants/string-pipe.constants';
var StringPipes = /** @class */ (function () {
    /**
     * Pipes for string values
     */
    function StringPipes() {
    }
    StringPipes.prototype.transform = function (value, args) {
        if (!args) {
            return value;
        }
        /**
         * Return given string formatted as 'thisIsCamelCase'.
         *
         * For example, 'test-string' or 'Test String' would be converted to 'testString'.
         */
        if (args.toLowerCase() === StringPipeConstants.PIPE_CAMEL_CASE) {
            value = value.toString();
            return value.toLowerCase()
                .replace(/[^a-zA-Z0-9]+(.)/g, function (_, chr) { return chr.toUpperCase(); });
        }
        /**
         * Return given string formatted as 'this-is-kebab-case'.
         *
         * For example, 'TestString' would be converted to 'test-string'.
         */
        if (args.toLowerCase() === StringPipeConstants.PIPE_KEBAB_CASE) {
            return value.match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)
                .map(function (x) { return x.toLowerCase(); })
                .join('-');
        }
        /**
         * Return given string formatted as 'ThisIsPascalCase'.
         *
         * For example, 'testString' would be converted to 'Teststring'.
         * For example, 'test string' would be converted to 'Test String'.
         */
        if (args.toLowerCase() === StringPipeConstants.PIPE_PASCAL_CASE) {
            return value.replace(/\w\S*/g, function (m) { return m.charAt(0).toUpperCase() + m.substr(1).toLowerCase(); });
        }
        /**
         * Return given string formatted as 'this_is_snake_case'.
         *
         * For example, 'TestString' would be converted to 'test_string'.
         */
        if (args.toLowerCase() === StringPipeConstants.PIPE_SNAKE_CASE) {
            return value.match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)
                .map(function (x) { return x.toLowerCase(); })
                .join('_');
        }
        /**
         * If none of the above work, return the original value.
         */
        return value;
    };
    StringPipes = __decorate([
        Pipe({
            name: 'stringPipes'
        })
        /**
         * Pipes for string values
         */
    ], StringPipes);
    return StringPipes;
}());
export { StringPipes };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLnBpcGVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGxjdS9jb21tb24vIiwic291cmNlcyI6WyJsaWIvdXRpbHMvcGlwZXMvc3RyaW5nLnBpcGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQWlCLElBQUksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQVN6RTtJQUhBOztPQUVHO0lBQ0g7SUFzREEsQ0FBQztJQXJEQywrQkFBUyxHQUFULFVBQVUsS0FBVSxFQUFFLElBQVU7UUFDOUIsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNULE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRDs7OztXQUlHO1FBQ0gsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssbUJBQW1CLENBQUMsZUFBZSxFQUFFO1lBQzlELEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDekIsT0FBTyxLQUFLLENBQUMsV0FBVyxFQUFFO2lCQUNiLE9BQU8sQ0FBQyxtQkFBbUIsRUFBRSxVQUFDLENBQVMsRUFBRSxHQUFXLElBQUssT0FBQSxHQUFHLENBQUMsV0FBVyxFQUFFLEVBQWpCLENBQWlCLENBQUMsQ0FBQztTQUMxRjtRQUVEOzs7O1dBSUc7UUFDSCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxtQkFBbUIsQ0FBQyxlQUFlLEVBQUU7WUFDOUQsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLG9FQUFvRSxDQUFDO2lCQUMzRSxHQUFHLENBQUMsVUFBQyxDQUFTLElBQUssT0FBQSxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQWYsQ0FBZSxDQUFDO2lCQUNuQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDeEI7UUFFRDs7Ozs7V0FLRztRQUNILElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxLQUFLLG1CQUFtQixDQUFDLGdCQUFnQixFQUFFO1lBQy9ELE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsVUFBQyxDQUFTLElBQUssT0FBQSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQXJELENBQXFELENBQUMsQ0FBQztTQUN0RztRQUVEOzs7O1dBSUc7UUFDSCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxtQkFBbUIsQ0FBQyxlQUFlLEVBQUU7WUFDOUQsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLG9FQUFvRSxDQUFDO2lCQUMzRSxHQUFHLENBQUMsVUFBQyxDQUFTLElBQUssT0FBQSxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQWYsQ0FBZSxDQUFDO2lCQUNuQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDeEI7UUFFRDs7V0FFRztRQUNILE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQXJEVSxXQUFXO1FBUHZCLElBQUksQ0FBQztZQUNKLElBQUksRUFBRSxhQUFhO1NBQ3BCLENBQUM7UUFFRjs7V0FFRztPQUNVLFdBQVcsQ0FzRHZCO0lBQUQsa0JBQUM7Q0FBQSxBQXRERCxJQXNEQztTQXREWSxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZVRyYW5zZm9ybSwgUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdHJpbmdQaXBlQ29uc3RhbnRzIH0gZnJvbSAnLi4vY29uc3RhbnRzL3N0cmluZy1waXBlLmNvbnN0YW50cyc7XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ3N0cmluZ1BpcGVzJ1xyXG59KVxyXG5cclxuLyoqXHJcbiAqIFBpcGVzIGZvciBzdHJpbmcgdmFsdWVzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3RyaW5nUGlwZXMgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICB0cmFuc2Zvcm0odmFsdWU6IGFueSwgYXJncz86IGFueSk6IGFueSB7XHJcbiAgICBpZiAoIWFyZ3MpIHtcclxuICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIGdpdmVuIHN0cmluZyBmb3JtYXR0ZWQgYXMgJ3RoaXNJc0NhbWVsQ2FzZScuXHJcbiAgICAgKlxyXG4gICAgICogRm9yIGV4YW1wbGUsICd0ZXN0LXN0cmluZycgb3IgJ1Rlc3QgU3RyaW5nJyB3b3VsZCBiZSBjb252ZXJ0ZWQgdG8gJ3Rlc3RTdHJpbmcnLlxyXG4gICAgICovXHJcbiAgICBpZiAoYXJncy50b0xvd2VyQ2FzZSgpID09PSBTdHJpbmdQaXBlQ29uc3RhbnRzLlBJUEVfQ0FNRUxfQ0FTRSkge1xyXG4gICAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICAgIHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpXHJcbiAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXmEtekEtWjAtOV0rKC4pL2csIChfOiBzdHJpbmcsIGNocjogc3RyaW5nKSA9PiBjaHIudG9VcHBlckNhc2UoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gZ2l2ZW4gc3RyaW5nIGZvcm1hdHRlZCBhcyAndGhpcy1pcy1rZWJhYi1jYXNlJy5cclxuICAgICAqXHJcbiAgICAgKiBGb3IgZXhhbXBsZSwgJ1Rlc3RTdHJpbmcnIHdvdWxkIGJlIGNvbnZlcnRlZCB0byAndGVzdC1zdHJpbmcnLlxyXG4gICAgICovXHJcbiAgICBpZiAoYXJncy50b0xvd2VyQ2FzZSgpID09PSBTdHJpbmdQaXBlQ29uc3RhbnRzLlBJUEVfS0VCQUJfQ0FTRSkge1xyXG4gICAgICByZXR1cm4gdmFsdWUubWF0Y2goL1tBLVpdezIsfSg/PVtBLVpdW2Etel0rWzAtOV0qfFxcYil8W0EtWl0/W2Etel0rWzAtOV0qfFtBLVpdfFswLTldKy9nKVxyXG4gICAgICAgICAgICAgICAgICAubWFwKCh4OiBzdHJpbmcpID0+IHgudG9Mb3dlckNhc2UoKSlcclxuICAgICAgICAgICAgICAgICAgLmpvaW4oJy0nKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybiBnaXZlbiBzdHJpbmcgZm9ybWF0dGVkIGFzICdUaGlzSXNQYXNjYWxDYXNlJy5cclxuICAgICAqXHJcbiAgICAgKiBGb3IgZXhhbXBsZSwgJ3Rlc3RTdHJpbmcnIHdvdWxkIGJlIGNvbnZlcnRlZCB0byAnVGVzdHN0cmluZycuXHJcbiAgICAgKiBGb3IgZXhhbXBsZSwgJ3Rlc3Qgc3RyaW5nJyB3b3VsZCBiZSBjb252ZXJ0ZWQgdG8gJ1Rlc3QgU3RyaW5nJy5cclxuICAgICAqL1xyXG4gICAgaWYgKGFyZ3MudG9Mb3dlckNhc2UoKSA9PT0gU3RyaW5nUGlwZUNvbnN0YW50cy5QSVBFX1BBU0NBTF9DQVNFKSB7XHJcbiAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9cXHdcXFMqL2csIChtOiBzdHJpbmcpID0+IG0uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBtLnN1YnN0cigxKS50b0xvd2VyQ2FzZSgpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybiBnaXZlbiBzdHJpbmcgZm9ybWF0dGVkIGFzICd0aGlzX2lzX3NuYWtlX2Nhc2UnLlxyXG4gICAgICpcclxuICAgICAqIEZvciBleGFtcGxlLCAnVGVzdFN0cmluZycgd291bGQgYmUgY29udmVydGVkIHRvICd0ZXN0X3N0cmluZycuXHJcbiAgICAgKi9cclxuICAgIGlmIChhcmdzLnRvTG93ZXJDYXNlKCkgPT09IFN0cmluZ1BpcGVDb25zdGFudHMuUElQRV9TTkFLRV9DQVNFKSB7XHJcbiAgICAgIHJldHVybiB2YWx1ZS5tYXRjaCgvW0EtWl17Mix9KD89W0EtWl1bYS16XStbMC05XSp8XFxiKXxbQS1aXT9bYS16XStbMC05XSp8W0EtWl18WzAtOV0rL2cpXHJcbiAgICAgICAgICAgICAgICAgIC5tYXAoKHg6IHN0cmluZykgPT4geC50b0xvd2VyQ2FzZSgpKVxyXG4gICAgICAgICAgICAgICAgICAuam9pbignXycpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSWYgbm9uZSBvZiB0aGUgYWJvdmUgd29yaywgcmV0dXJuIHRoZSBvcmlnaW5hbCB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxufVxyXG4iXX0=