var ToggleThemeUtil = /** @class */ (function () {
    function ToggleThemeUtil() {
    }
    /**
     * Toggle fathym themes // could probably add themes to local storage
     *
     * @param classList classlist that holds the theme class
     *
     * @param val theme to change to
     */
    ToggleThemeUtil.Toggle = function (classList, val) {
        var theme;
        if (classList.contains('arctic-theme')) {
            classList.remove('arctic-theme');
        }
        if (classList.contains('contrast-theme')) {
            classList.remove('contrast-theme');
        }
        if (classList.contains('cool-candy-theme')) {
            classList.remove('cool-candy-theme');
        }
        if (classList.contains('flipper-theme')) {
            classList.remove('flipper-theme');
        }
        if (classList.contains('ice-theme')) {
            classList.remove('ice-theme');
        }
        if (classList.contains('sea-green-theme')) {
            classList.remove('sea-green-theme');
        }
        if (classList.contains('white-mint')) {
            classList.remove('white-mint');
        }
        switch (val.toUpperCase()) {
            case 'ARCTIC-THEME':
                theme = 'arctic-theme';
                classList.add('arctic-theme');
                break;
            case 'CONTRAST-THEME':
                theme = 'contrast-theme';
                classList.add('contrast-theme');
                break;
            case 'COOL-CANDY-THEME':
                theme = 'cool-candy-theme';
                classList.add('cool-candy-theme');
                break;
            case 'FLIPPER-THEME':
                theme = 'flipper-theme';
                classList.add('flipper-theme');
                break;
            case 'ICE-THEME':
                theme = 'ice-theme';
                classList.add('ice-theme');
                break;
            case 'SEA-GREEN-THEME':
                theme = 'sea-green-theme';
                classList.add('sea-green-theme');
                break;
            case 'WHITE-MINT-THEME':
                theme = 'white-mint-theme';
                classList.add('white-mint-theme');
                break;
        }
        return theme;
    };
    return ToggleThemeUtil;
}());
export { ToggleThemeUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlLXRoZW1lLnV0aWxzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGxjdS9jb21tb24vIiwic291cmNlcyI6WyJsaWIvdXRpbHMvdGhlbWluZy90b2dnbGUtdGhlbWUudXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFBQTtJQTBFQSxDQUFDO0lBeEVHOzs7Ozs7T0FNRztJQUNXLHNCQUFNLEdBQXBCLFVBQXFCLFNBQXVCLEVBQUUsR0FBVztRQUVyRCxJQUFJLEtBQWEsQ0FBQztRQUVsQixJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFDcEMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUNwQztRQUVELElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO1lBQ3RDLFNBQVMsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUN0QztRQUVELElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFO1lBQ3hDLFNBQVMsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQztTQUN4QztRQUVELElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsRUFBRTtZQUNyQyxTQUFTLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQ3JDO1FBRUQsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ2pDLFNBQVMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDakM7UUFFRCxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsRUFBRTtZQUN2QyxTQUFTLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7U0FDdkM7UUFFRCxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDbEMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNsQztRQUVELFFBQVEsR0FBRyxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQ3ZCLEtBQUssY0FBYztnQkFDZixLQUFLLEdBQUcsY0FBYyxDQUFDO2dCQUN2QixTQUFTLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO2dCQUM5QixNQUFNO1lBQ1YsS0FBSyxnQkFBZ0I7Z0JBQ2pCLEtBQUssR0FBRyxnQkFBZ0IsQ0FBQztnQkFDekIsU0FBUyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUNoQyxNQUFNO1lBQ1YsS0FBSyxrQkFBa0I7Z0JBQ25CLEtBQUssR0FBRyxrQkFBa0IsQ0FBQztnQkFDM0IsU0FBUyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2dCQUNsQyxNQUFNO1lBQ1YsS0FBSyxlQUFlO2dCQUNoQixLQUFLLEdBQUcsZUFBZSxDQUFDO2dCQUN4QixTQUFTLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO2dCQUMvQixNQUFNO1lBQ1YsS0FBSyxXQUFXO2dCQUNaLEtBQUssR0FBRyxXQUFXLENBQUM7Z0JBQ3BCLFNBQVMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQzNCLE1BQU07WUFDVixLQUFLLGlCQUFpQjtnQkFDbEIsS0FBSyxHQUFHLGlCQUFpQixDQUFDO2dCQUMxQixTQUFTLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7Z0JBQ2pDLE1BQU07WUFDVixLQUFLLGtCQUFrQjtnQkFDbkIsS0FBSyxHQUFHLGtCQUFrQixDQUFDO2dCQUMzQixTQUFTLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7Z0JBQ2xDLE1BQU07U0FDWDtRQUVILE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFDTCxzQkFBQztBQUFELENBQUMsQUExRUQsSUEwRUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgVG9nZ2xlVGhlbWVVdGlsIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRvZ2dsZSBmYXRoeW0gdGhlbWVzIC8vIGNvdWxkIHByb2JhYmx5IGFkZCB0aGVtZXMgdG8gbG9jYWwgc3RvcmFnZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBjbGFzc0xpc3QgY2xhc3NsaXN0IHRoYXQgaG9sZHMgdGhlIHRoZW1lIGNsYXNzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHZhbCB0aGVtZSB0byBjaGFuZ2UgdG9cclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBUb2dnbGUoY2xhc3NMaXN0OiBET01Ub2tlbkxpc3QsIHZhbDogc3RyaW5nKTogc3RyaW5nIHtcclxuXHJcbiAgICAgICAgbGV0IHRoZW1lOiBzdHJpbmc7XHJcblxyXG4gICAgICAgIGlmIChjbGFzc0xpc3QuY29udGFpbnMoJ2FyY3RpYy10aGVtZScpKSB7XHJcbiAgICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoJ2FyY3RpYy10aGVtZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNsYXNzTGlzdC5jb250YWlucygnY29udHJhc3QtdGhlbWUnKSkge1xyXG4gICAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKCdjb250cmFzdC10aGVtZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNsYXNzTGlzdC5jb250YWlucygnY29vbC1jYW5keS10aGVtZScpKSB7XHJcbiAgICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoJ2Nvb2wtY2FuZHktdGhlbWUnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjbGFzc0xpc3QuY29udGFpbnMoJ2ZsaXBwZXItdGhlbWUnKSkge1xyXG4gICAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKCdmbGlwcGVyLXRoZW1lJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2xhc3NMaXN0LmNvbnRhaW5zKCdpY2UtdGhlbWUnKSkge1xyXG4gICAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKCdpY2UtdGhlbWUnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjbGFzc0xpc3QuY29udGFpbnMoJ3NlYS1ncmVlbi10aGVtZScpKSB7XHJcbiAgICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoJ3NlYS1ncmVlbi10aGVtZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNsYXNzTGlzdC5jb250YWlucygnd2hpdGUtbWludCcpKSB7XHJcbiAgICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoJ3doaXRlLW1pbnQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN3aXRjaCAodmFsLnRvVXBwZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgY2FzZSAnQVJDVElDLVRIRU1FJzpcclxuICAgICAgICAgICAgICAgIHRoZW1lID0gJ2FyY3RpYy10aGVtZSc7XHJcbiAgICAgICAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdhcmN0aWMtdGhlbWUnKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdDT05UUkFTVC1USEVNRSc6XHJcbiAgICAgICAgICAgICAgICB0aGVtZSA9ICdjb250cmFzdC10aGVtZSc7XHJcbiAgICAgICAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdjb250cmFzdC10aGVtZScpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ0NPT0wtQ0FORFktVEhFTUUnOlxyXG4gICAgICAgICAgICAgICAgdGhlbWUgPSAnY29vbC1jYW5keS10aGVtZSc7XHJcbiAgICAgICAgICAgICAgICBjbGFzc0xpc3QuYWRkKCdjb29sLWNhbmR5LXRoZW1lJyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnRkxJUFBFUi1USEVNRSc6XHJcbiAgICAgICAgICAgICAgICB0aGVtZSA9ICdmbGlwcGVyLXRoZW1lJztcclxuICAgICAgICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ2ZsaXBwZXItdGhlbWUnKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdJQ0UtVEhFTUUnOlxyXG4gICAgICAgICAgICAgICAgdGhlbWUgPSAnaWNlLXRoZW1lJztcclxuICAgICAgICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ2ljZS10aGVtZScpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ1NFQS1HUkVFTi1USEVNRSc6XHJcbiAgICAgICAgICAgICAgICB0aGVtZSA9ICdzZWEtZ3JlZW4tdGhlbWUnO1xyXG4gICAgICAgICAgICAgICAgY2xhc3NMaXN0LmFkZCgnc2VhLWdyZWVuLXRoZW1lJyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnV0hJVEUtTUlOVC1USEVNRSc6XHJcbiAgICAgICAgICAgICAgICB0aGVtZSA9ICd3aGl0ZS1taW50LXRoZW1lJztcclxuICAgICAgICAgICAgICAgIGNsYXNzTGlzdC5hZGQoJ3doaXRlLW1pbnQtdGhlbWUnKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhlbWU7XHJcbiAgICB9XHJcbn0iXX0=