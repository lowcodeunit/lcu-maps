import { __values } from "tslib";
import { Inject } from '@angular/core';
import { InjectionToken } from '@angular/core';
export var BROWSER_FAVICONS_CONFIG = new InjectionToken('Favicons Configuration');
/**
 * Abstract class that acts as both interface for implementation and as the dependency-injection
 */
var FaviconsService = /** @class */ (function () {
    function FaviconsService() {
    }
    return FaviconsService;
}());
export { FaviconsService };
/**
 * Provide the browser-oriented implementation of the Favicons class
 */
var BrowserFavicons = /** @class */ (function () {
    /**
     * initialize the Favicons service.
     */
    function BrowserFavicons(config) {
        this.elementId = 'favicons-service-injected-node';
        this.icons = Object.assign(Object.create(null), config.icons);
        this.useCacheBusting = (config.cacheBusting || false);
        // Since the document may have a static favicon definition, we want to strip out
        // any exisitng elements that are attempting to define a favicon. This way, there
        // is only one favicon element on the page at a time.
        this.removeExternalLinkElements();
    }
    /**
     * Active favicon with given identifier
     *
     * @param name favicon name
     */
    BrowserFavicons.prototype.activate = function (name) {
        if (!this.icons[name]) {
            throw (new Error("Favicon for [ " + name + " ] not found."));
        }
        this.setNode(this.icons[name].type, this.icons[name].href);
    };
    /**
     * Activate the default favicon (with isDefault set to True)
     */
    BrowserFavicons.prototype.reset = function () {
        var e_1, _a;
        try {
            for (var _b = __values(Object.keys(this.icons)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var name_1 = _c.value;
                var icon = this.icons[name_1];
                if (icon.isDefault) {
                    this.setNode(icon.type, icon.href);
                    return;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // If we made it this far, none of the favicons were flagged as default. In that
        // case, let's just remove the favicon node altogether.
        this.removeNode();
    };
    /**
     * Inject the favicon element into the document header
     *
     * @param type type of icon (.png, .jpeg, etc)
     *
     * @param href location
     */
    BrowserFavicons.prototype.addNode = function (type, href) {
        var linkElement = document.createElement('link');
        linkElement.setAttribute('id', this.elementId);
        linkElement.setAttribute('rel', 'icon');
        linkElement.setAttribute('type', type);
        linkElement.setAttribute('href', href);
        document.head.appendChild(linkElement);
    };
    /**
     * Return an augmented HREF value with a cache-busting query-string parameter
     *
     * @param href location
     */
    BrowserFavicons.prototype.cacheBustHref = function (href) {
        var augmentedHref = (href.indexOf('?') === -1)
            ? href + "?faviconCacheBust=" + Date.now()
            : href + "&faviconCacheBust=" + Date.now();
        return (augmentedHref);
    };
    /**
     * I remove any favicon nodes that are not controlled by this service
     */
    BrowserFavicons.prototype.removeExternalLinkElements = function () {
        var e_2, _a;
        // tslint:disable-next-line:prefer-const
        var linkElements = document.querySelectorAll("link[ rel ~= 'icon' i]");
        try {
            for (var _b = __values(Array.from(linkElements)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var linkElement = _c.value;
                linkElement.parentNode.removeChild(linkElement);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    /**
     * Remove the favicon node from the document header
     */
    BrowserFavicons.prototype.removeNode = function () {
        var linkElement = document.head.querySelector('#' + this.elementId);
        if (linkElement) {
            document.head.removeChild(linkElement);
        }
    };
    /**
     * Remove existing favicon node and inject a new favicon node with the give
     * elemet settings
     *
     * @param type type of favicon
     * @param href location
     */
    BrowserFavicons.prototype.setNode = function (type, href) {
        var augmentedHref = this.useCacheBusting
            ? this.cacheBustHref(href)
            : href;
        this.removeNode();
        this.addNode(type, augmentedHref);
    };
    BrowserFavicons.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [BROWSER_FAVICONS_CONFIG,] }] }
    ]; };
    return BrowserFavicons;
}());
export { BrowserFavicons };
//# sourceMappingURL=data:application/json;base64,