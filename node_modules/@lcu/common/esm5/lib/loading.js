import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var Loading = /** @class */ (function () {
    // 	Constructors
    function Loading() {
        this.Clear();
    }
    Object.defineProperty(Loading.prototype, "Value", {
        // 	Properties
        get: function () {
            return this.loaders && this.loaders.length > 0 && this.loaders.every(function (loader) { return loader; });
        },
        enumerable: true,
        configurable: true
    });
    // 	API Methods
    Loading.prototype.Clear = function () {
        this.loaders = [];
    };
    Loading.prototype.Set = function (loading) {
        if (loading) {
            this.loaders.push(loading);
        }
        else if (this.loaders && this.loaders.length > 0) {
            this.loaders.splice(0, 1);
        }
    };
    Loading.ɵprov = i0.ɵɵdefineInjectable({ factory: function Loading_Factory() { return new Loading(); }, token: Loading, providedIn: "root" });
    Loading = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [])
    ], Loading);
    return Loading;
}());
export { Loading };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BsY3UvY29tbW9uLyIsInNvdXJjZXMiOlsibGliL2xvYWRpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzNDO0lBU0UsZ0JBQWdCO0lBQ2hCO1FBQ0UsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2YsQ0FBQztJQVBELHNCQUFXLDBCQUFLO1FBRGhCLGNBQWM7YUFDZDtZQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBQSxNQUFNLElBQUksT0FBQSxNQUFNLEVBQU4sQ0FBTSxDQUFDLENBQUM7UUFDekYsQ0FBQzs7O09BQUE7SUFPRCxlQUFlO0lBQ1IsdUJBQUssR0FBWjtRQUNFLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFTSxxQkFBRyxHQUFWLFVBQVcsT0FBZ0I7UUFDekIsSUFBSSxPQUFPLEVBQUU7WUFDWCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUM1QjthQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDbEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQzNCO0lBQ0gsQ0FBQzs7SUF6QlUsT0FBTztRQUhuQixVQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDOztPQUNXLE9BQU8sQ0E0Qm5CO2tCQWpDRDtDQWlDQyxBQTVCRCxJQTRCQztTQTVCWSxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTG9hZGluZyB7XHJcbiAgLy8gXHRGaWVsZHNcclxuICBwcm90ZWN0ZWQgbG9hZGVyczogYm9vbGVhbltdO1xyXG5cclxuICAvLyBcdFByb3BlcnRpZXNcclxuICBwdWJsaWMgZ2V0IFZhbHVlKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMubG9hZGVycyAmJiB0aGlzLmxvYWRlcnMubGVuZ3RoID4gMCAmJiB0aGlzLmxvYWRlcnMuZXZlcnkobG9hZGVyID0+IGxvYWRlcik7XHJcbiAgfVxyXG5cclxuICAvLyBcdENvbnN0cnVjdG9yc1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5DbGVhcigpO1xyXG4gIH1cclxuXHJcbiAgLy8gXHRBUEkgTWV0aG9kc1xyXG4gIHB1YmxpYyBDbGVhcigpIHtcclxuICAgIHRoaXMubG9hZGVycyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIFNldChsb2FkaW5nOiBib29sZWFuKSB7XHJcbiAgICBpZiAobG9hZGluZykge1xyXG4gICAgICB0aGlzLmxvYWRlcnMucHVzaChsb2FkaW5nKTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5sb2FkZXJzICYmIHRoaXMubG9hZGVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHRoaXMubG9hZGVycy5zcGxpY2UoMCwgMSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBcdEhlbHBlcnNcclxufVxyXG4iXX0=