import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var Loading = /** @class */ (function () {
    // 	Constructors
    function Loading() {
        this.Clear();
    }
    Object.defineProperty(Loading.prototype, "Value", {
        // 	Properties
        get: function () {
            return this.loaders && this.loaders.length > 0 && this.loaders.every(function (loader) { return loader; });
        },
        enumerable: false,
        configurable: true
    });
    // 	API Methods
    Loading.prototype.Clear = function () {
        this.loaders = [];
    };
    Loading.prototype.Set = function (loading) {
        if (loading) {
            this.loaders.push(loading);
        }
        else if (this.loaders && this.loaders.length > 0) {
            this.loaders.splice(0, 1);
        }
    };
    Loading.ɵprov = i0.ɵɵdefineInjectable({ factory: function Loading_Factory() { return new Loading(); }, token: Loading, providedIn: "root" });
    Loading.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    Loading.ctorParameters = function () { return []; };
    return Loading;
}());
export { Loading };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BsY3UvY29tbW9uLyIsInNvdXJjZXMiOlsibGliL2xvYWRpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFFM0M7SUFZRSxnQkFBZ0I7SUFDaEI7UUFDRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDZixDQUFDO0lBUEQsc0JBQVcsMEJBQUs7UUFEaEIsY0FBYzthQUNkO1lBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sRUFBTixDQUFNLENBQUMsQ0FBQztRQUN6RixDQUFDOzs7T0FBQTtJQU9ELGVBQWU7SUFDUix1QkFBSyxHQUFaO1FBQ0UsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVNLHFCQUFHLEdBQVYsVUFBVyxPQUFnQjtRQUN6QixJQUFJLE9BQU8sRUFBRTtZQUNYLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzVCO2FBQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNsRCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDM0I7SUFDSCxDQUFDOzs7Z0JBNUJGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7OztrQkFKRDtDQWlDQyxBQS9CRCxJQStCQztTQTVCWSxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTG9hZGluZyB7XHJcbiAgLy8gXHRGaWVsZHNcclxuICBwcm90ZWN0ZWQgbG9hZGVyczogYm9vbGVhbltdO1xyXG5cclxuICAvLyBcdFByb3BlcnRpZXNcclxuICBwdWJsaWMgZ2V0IFZhbHVlKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMubG9hZGVycyAmJiB0aGlzLmxvYWRlcnMubGVuZ3RoID4gMCAmJiB0aGlzLmxvYWRlcnMuZXZlcnkobG9hZGVyID0+IGxvYWRlcik7XHJcbiAgfVxyXG5cclxuICAvLyBcdENvbnN0cnVjdG9yc1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5DbGVhcigpO1xyXG4gIH1cclxuXHJcbiAgLy8gXHRBUEkgTWV0aG9kc1xyXG4gIHB1YmxpYyBDbGVhcigpIHtcclxuICAgIHRoaXMubG9hZGVycyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIFNldChsb2FkaW5nOiBib29sZWFuKSB7XHJcbiAgICBpZiAobG9hZGluZykge1xyXG4gICAgICB0aGlzLmxvYWRlcnMucHVzaChsb2FkaW5nKTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5sb2FkZXJzICYmIHRoaXMubG9hZGVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHRoaXMubG9hZGVycy5zcGxpY2UoMCwgMSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBcdEhlbHBlcnNcclxufVxyXG4iXX0=