var Guid = /** @class */ (function () {
    // 	Constructors
    function Guid(guid) {
        if (!guid) {
            throw new TypeError('Invalid argument; `value` has no value.');
        }
        this.value = Guid.Empty;
        if (guid && Guid.IsGuid(guid)) {
            this.value = guid;
        }
    }
    // 	API Methods
    Guid.Create = function () {
        return Guid.Parse(Guid.CreateRaw());
    };
    Guid.CreateEmpty = function () {
        return Guid.Parse('emptyguid');
    };
    Guid.CreateRaw = function () {
        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join('-');
    };
    Guid.IsGuid = function (guid) {
        var value = guid.toString();
        return guid && (guid instanceof Guid || Guid.GuidValidator.test(value));
    };
    Guid.Parse = function (guid) {
        return new Guid(guid);
    };
    // 	Helpers
    Guid.gen = function (count) {
        var out = '';
        for (var i = 0; i < count; i++) {
            // tslint:disable-next-line:no-bitwise
            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        }
        return out;
    };
    Guid.prototype.Equals = function (other) {
        return Guid.IsGuid(other) && this.value === other.toString();
    };
    Guid.prototype.IsEmpty = function () {
        return this.value === Guid.Empty;
    };
    Guid.prototype.ToJSON = function () {
        return {
            Value: this.value
        };
    };
    Guid.prototype.ToString = function () {
        return this.value;
    };
    // 	Properties
    Guid.GuidValidator = new RegExp('^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$', 'i');
    Guid.Empty = '00000000-0000-0000-0000-000000000000';
    return Guid;
}());
export { Guid };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BsY3UvY29tbW9uLyIsInNvdXJjZXMiOlsibGliL2d1aWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDRSxnQkFBZ0I7SUFDaEIsY0FBb0IsSUFBWTtRQUM5QixJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1QsTUFBTSxJQUFJLFNBQVMsQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO1NBQ2hFO1FBRUQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBRXhCLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7U0FDbkI7SUFDSCxDQUFDO0lBU0QsZUFBZTtJQUNELFdBQU0sR0FBcEI7UUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVhLGdCQUFXLEdBQXpCO1FBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFYSxjQUFTLEdBQXZCO1FBQ0UsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyRixDQUFDO0lBRWEsV0FBTSxHQUFwQixVQUFxQixJQUFTO1FBQzVCLElBQU0sS0FBSyxHQUFXLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUV0QyxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksWUFBWSxJQUFJLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRWEsVUFBSyxHQUFuQixVQUFvQixJQUFZO1FBQzlCLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVELFdBQVc7SUFDSSxRQUFHLEdBQWxCLFVBQW1CLEtBQWE7UUFDOUIsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM5QixzQ0FBc0M7WUFDdEMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3hFO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRU0scUJBQU0sR0FBYixVQUFjLEtBQVc7UUFDdkIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQy9ELENBQUM7SUFFTSxzQkFBTyxHQUFkO1FBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDbkMsQ0FBQztJQUVNLHFCQUFNLEdBQWI7UUFDRSxPQUFPO1lBQ0wsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1NBQ2xCLENBQUM7SUFDSixDQUFDO0lBRU0sdUJBQVEsR0FBZjtRQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBeERELGNBQWM7SUFDQSxrQkFBYSxHQUFHLElBQUksTUFBTSxDQUFDLGdFQUFnRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRWxHLFVBQUssR0FBRyxzQ0FBc0MsQ0FBQztJQXNEL0QsV0FBQztDQUFBLEFBdkVELElBdUVDO1NBdkVZLElBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgR3VpZCB7XHJcbiAgLy8gXHRDb25zdHJ1Y3RvcnNcclxuICBwcml2YXRlIGNvbnN0cnVjdG9yKGd1aWQ6IHN0cmluZykge1xyXG4gICAgaWYgKCFndWlkKSB7XHJcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgYXJndW1lbnQ7IGB2YWx1ZWAgaGFzIG5vIHZhbHVlLicpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudmFsdWUgPSBHdWlkLkVtcHR5O1xyXG5cclxuICAgIGlmIChndWlkICYmIEd1aWQuSXNHdWlkKGd1aWQpKSB7XHJcbiAgICAgIHRoaXMudmFsdWUgPSBndWlkO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gXHRQcm9wZXJ0aWVzXHJcbiAgcHVibGljIHN0YXRpYyBHdWlkVmFsaWRhdG9yID0gbmV3IFJlZ0V4cCgnXlthLXowLTldezh9LVthLXowLTldezR9LVthLXowLTldezR9LVthLXowLTldezR9LVthLXowLTldezEyfSQnLCAnaScpO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIEVtcHR5ID0gJzAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCc7XHJcbiAgLy8gXHRGaWVsZHNcclxuICBwcm90ZWN0ZWQgdmFsdWU6IHN0cmluZztcclxuXHJcbiAgLy8gXHRBUEkgTWV0aG9kc1xyXG4gIHB1YmxpYyBzdGF0aWMgQ3JlYXRlKCk6IEd1aWQge1xyXG4gICAgcmV0dXJuIEd1aWQuUGFyc2UoR3VpZC5DcmVhdGVSYXcoKSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIENyZWF0ZUVtcHR5KCk6IEd1aWQge1xyXG4gICAgcmV0dXJuIEd1aWQuUGFyc2UoJ2VtcHR5Z3VpZCcpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBDcmVhdGVSYXcoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBbR3VpZC5nZW4oMiksIEd1aWQuZ2VuKDEpLCBHdWlkLmdlbigxKSwgR3VpZC5nZW4oMSksIEd1aWQuZ2VuKDMpXS5qb2luKCctJyk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIElzR3VpZChndWlkOiBhbnkpIHtcclxuICAgIGNvbnN0IHZhbHVlOiBzdHJpbmcgPSBndWlkLnRvU3RyaW5nKCk7XHJcblxyXG4gICAgcmV0dXJuIGd1aWQgJiYgKGd1aWQgaW5zdGFuY2VvZiBHdWlkIHx8IEd1aWQuR3VpZFZhbGlkYXRvci50ZXN0KHZhbHVlKSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIFBhcnNlKGd1aWQ6IHN0cmluZyk6IEd1aWQge1xyXG4gICAgcmV0dXJuIG5ldyBHdWlkKGd1aWQpO1xyXG4gIH1cclxuXHJcbiAgLy8gXHRIZWxwZXJzXHJcbiAgcHJpdmF0ZSBzdGF0aWMgZ2VuKGNvdW50OiBudW1iZXIpIHtcclxuICAgIGxldCBvdXQgPSAnJztcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYml0d2lzZVxyXG4gICAgICBvdXQgKz0gKCgoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMCkgfCAwKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG91dDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBFcXVhbHMob3RoZXI6IEd1aWQpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBHdWlkLklzR3VpZChvdGhlcikgJiYgdGhpcy52YWx1ZSA9PT0gb3RoZXIudG9TdHJpbmcoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBJc0VtcHR5KCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMudmFsdWUgPT09IEd1aWQuRW1wdHk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgVG9KU09OKCk6IGFueSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBWYWx1ZTogdGhpcy52YWx1ZVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBUb1N0cmluZygpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgfVxyXG59XHJcbiJdfQ==