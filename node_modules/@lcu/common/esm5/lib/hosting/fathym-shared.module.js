import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { LCUInterceptor } from '../api/daf/lcu.interceptor';
import { RealTimeService } from '../api/real-time/real-time.service';
import { LCUServiceSettings } from '../api/lcu-service-settings';
import { SafePipe } from '../pipes/safe-pipe';
export var winAny = window;
var FathymSharedModule = /** @class */ (function () {
    function FathymSharedModule() {
    }
    //  Fields
    //  API Methods
    FathymSharedModule.DefaultServiceSettings = function (env, apiRoot) {
        return {
            APIRoot: winAny.LCU && winAny.LCU.APIRoot ? winAny.LCU.APIRoot : '',
            AppConfig: {
                ID: winAny.LCU && winAny.LCU.Application && winAny.LCU.Application.ID ? winAny.LCU.Application.ID : 'test-app',
                EnterpriseAPIKey: winAny.LCU && winAny.LCU.Application.EnterpriseAPIKey ? winAny.LCU.Application.EnterpriseAPIKey : 'test-app'
            },
            StateConfig: {
                Environment: winAny.LCU.State ? winAny.LCU.State.Environment : '',
                ActionRoot: winAny.LCU.State ? winAny.LCU.State.Root : '',
                Root: winAny.LCU.State ? winAny.LCU.State.Root : '',
                UsernameMock: winAny.LCU.State ? winAny.LCU.State.UsernameMock : ''
            },
            Settings: winAny.LCU.Settings
        };
    };
    FathymSharedModule.forRoot = function () {
        return {
            ngModule: FathymSharedModule,
            providers: [
                RealTimeService,
                {
                    provide: HTTP_INTERCEPTORS,
                    useClass: LCUInterceptor,
                    multi: true,
                    deps: [LCUServiceSettings]
                }
            ]
        };
    };
    FathymSharedModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [SafePipe],
                    imports: [CommonModule, FormsModule, HttpClientModule, RouterModule],
                    exports: [CommonModule, FormsModule, HttpClientModule, RouterModule, SafePipe],
                    providers: [],
                    entryComponents: []
                },] }
    ];
    return FathymSharedModule;
}());
export { FathymSharedModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmF0aHltLXNoYXJlZC5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbGN1L2NvbW1vbi8iLCJzb3VyY2VzIjpbImxpYi9ob3N0aW5nL2ZhdGh5bS1zaGFyZWQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsV0FBVyxFQUF1QixNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUUzRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUU5QyxNQUFNLENBQUMsSUFBTSxNQUFNLEdBQVEsTUFBTSxDQUFDO0FBRWxDO0lBQUE7SUEyQ0EsQ0FBQztJQW5DQyxVQUFVO0lBRVYsZUFBZTtJQUNSLHlDQUFzQixHQUE3QixVQUE4QixHQUE0QixFQUFFLE9BQWdCO1FBQzFFLE9BQTJCO1lBQ3pCLE9BQU8sRUFBRSxNQUFNLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNuRSxTQUFTLEVBQUU7Z0JBQ1QsRUFBRSxFQUFFLE1BQU0sQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVU7Z0JBQzlHLGdCQUFnQixFQUNkLE1BQU0sQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxVQUFVO2FBQy9HO1lBQ0QsV0FBVyxFQUFFO2dCQUNYLFdBQVcsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNqRSxVQUFVLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDekQsSUFBSSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ25ELFlBQVksRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFO2FBQ3BFO1lBQ0QsUUFBUSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUTtTQUM5QixDQUFDO0lBQ0osQ0FBQztJQUVNLDBCQUFPLEdBQWQ7UUFDRSxPQUFPO1lBQ0wsUUFBUSxFQUFFLGtCQUFrQjtZQUM1QixTQUFTLEVBQUU7Z0JBQ1QsZUFBZTtnQkFDZjtvQkFDRSxPQUFPLEVBQUUsaUJBQWlCO29CQUMxQixRQUFRLEVBQUUsY0FBYztvQkFDeEIsS0FBSyxFQUFFLElBQUk7b0JBQ1gsSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUM7aUJBQzNCO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzs7Z0JBMUNGLFFBQVEsU0FBQztvQkFDUixZQUFZLEVBQUUsQ0FBQyxRQUFRLENBQUM7b0JBQ3hCLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsWUFBWSxDQUFDO29CQUNwRSxPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLFlBQVksRUFBRSxRQUFRLENBQUM7b0JBQzlFLFNBQVMsRUFBRSxFQUFFO29CQUNiLGVBQWUsRUFBRSxFQUFFO2lCQUNwQjs7SUFxQ0QseUJBQUM7Q0FBQSxBQTNDRCxJQTJDQztTQXBDWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGb3Jtc01vZHVsZSwgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgUm91dGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgSHR0cENsaWVudE1vZHVsZSwgSFRUUF9JTlRFUkNFUFRPUlMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcblxyXG5pbXBvcnQgeyBMQ1VJbnRlcmNlcHRvciB9IGZyb20gJy4uL2FwaS9kYWYvbGN1LmludGVyY2VwdG9yJztcclxuaW1wb3J0IHsgUmVhbFRpbWVTZXJ2aWNlIH0gZnJvbSAnLi4vYXBpL3JlYWwtdGltZS9yZWFsLXRpbWUuc2VydmljZSc7XHJcbmltcG9ydCB7IExDVVNlcnZpY2VTZXR0aW5ncyB9IGZyb20gJy4uL2FwaS9sY3Utc2VydmljZS1zZXR0aW5ncyc7XHJcbmltcG9ydCB7IFNhZmVQaXBlIH0gZnJvbSAnLi4vcGlwZXMvc2FmZS1waXBlJztcclxuXHJcbmV4cG9ydCBjb25zdCB3aW5BbnkgPSA8YW55PndpbmRvdztcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbU2FmZVBpcGVdLFxyXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIEZvcm1zTW9kdWxlLCBIdHRwQ2xpZW50TW9kdWxlLCBSb3V0ZXJNb2R1bGVdLFxyXG4gIGV4cG9ydHM6IFtDb21tb25Nb2R1bGUsIEZvcm1zTW9kdWxlLCBIdHRwQ2xpZW50TW9kdWxlLCBSb3V0ZXJNb2R1bGUsIFNhZmVQaXBlXSxcclxuICBwcm92aWRlcnM6IFtdLFxyXG4gIGVudHJ5Q29tcG9uZW50czogW11cclxufSlcclxuZXhwb3J0IGNsYXNzIEZhdGh5bVNoYXJlZE1vZHVsZSB7XHJcbiAgLy8gIEZpZWxkc1xyXG5cclxuICAvLyAgQVBJIE1ldGhvZHNcclxuICBzdGF0aWMgRGVmYXVsdFNlcnZpY2VTZXR0aW5ncyhlbnY6IHsgcHJvZHVjdGlvbjogYm9vbGVhbiB9LCBhcGlSb290Pzogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gPExDVVNlcnZpY2VTZXR0aW5ncz57XHJcbiAgICAgIEFQSVJvb3Q6IHdpbkFueS5MQ1UgJiYgd2luQW55LkxDVS5BUElSb290ID8gd2luQW55LkxDVS5BUElSb290IDogJycsXHJcbiAgICAgIEFwcENvbmZpZzoge1xyXG4gICAgICAgIElEOiB3aW5BbnkuTENVICYmIHdpbkFueS5MQ1UuQXBwbGljYXRpb24gJiYgd2luQW55LkxDVS5BcHBsaWNhdGlvbi5JRCA/IHdpbkFueS5MQ1UuQXBwbGljYXRpb24uSUQgOiAndGVzdC1hcHAnLFxyXG4gICAgICAgIEVudGVycHJpc2VBUElLZXk6XHJcbiAgICAgICAgICB3aW5BbnkuTENVICYmIHdpbkFueS5MQ1UuQXBwbGljYXRpb24uRW50ZXJwcmlzZUFQSUtleSA/IHdpbkFueS5MQ1UuQXBwbGljYXRpb24uRW50ZXJwcmlzZUFQSUtleSA6ICd0ZXN0LWFwcCdcclxuICAgICAgfSxcclxuICAgICAgU3RhdGVDb25maWc6IHtcclxuICAgICAgICBFbnZpcm9ubWVudDogd2luQW55LkxDVS5TdGF0ZSA/IHdpbkFueS5MQ1UuU3RhdGUuRW52aXJvbm1lbnQgOiAnJyxcclxuICAgICAgICBBY3Rpb25Sb290OiB3aW5BbnkuTENVLlN0YXRlID8gd2luQW55LkxDVS5TdGF0ZS5Sb290IDogJycsXHJcbiAgICAgICAgUm9vdDogd2luQW55LkxDVS5TdGF0ZSA/IHdpbkFueS5MQ1UuU3RhdGUuUm9vdCA6ICcnLFxyXG4gICAgICAgIFVzZXJuYW1lTW9jazogd2luQW55LkxDVS5TdGF0ZSA/IHdpbkFueS5MQ1UuU3RhdGUuVXNlcm5hbWVNb2NrIDogJydcclxuICAgICAgfSxcclxuICAgICAgU2V0dGluZ3M6IHdpbkFueS5MQ1UuU2V0dGluZ3NcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPEZhdGh5bVNoYXJlZE1vZHVsZT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmdNb2R1bGU6IEZhdGh5bVNoYXJlZE1vZHVsZSxcclxuICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgUmVhbFRpbWVTZXJ2aWNlLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLFxyXG4gICAgICAgICAgdXNlQ2xhc3M6IExDVUludGVyY2VwdG9yLFxyXG4gICAgICAgICAgbXVsdGk6IHRydWUsXHJcbiAgICAgICAgICBkZXBzOiBbTENVU2VydmljZVNldHRpbmdzXVxyXG4gICAgICAgIH1cclxuICAgICAgXVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19