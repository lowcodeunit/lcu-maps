import { throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { LCUServiceSettings } from '../lcu-service-settings';
var DAFService = /** @class */ (function () {
    //  Constructors
    function DAFService(injector) {
        this.injector = injector;
        this.http = injector.get(HttpClient);
        try {
            this.settings = injector.get(LCUServiceSettings);
        }
        catch (err) { }
    }
    //  Helpers
    DAFService.prototype.catchError = function () {
        return catchError(this.handleError);
    };
    DAFService.prototype.delete = function (path) {
        return this.http.delete(this.resolvePath(path)).pipe(this.catchError());
    };
    DAFService.prototype.get = function (path) {
        return this.http.get(this.resolvePath(path)).pipe(this.catchError());
    };
    DAFService.prototype.handleError = function (error) {
        // In a real world app, we might use a remote logging infrastructure
        // We'd also dig deeper into the error to get a better message
        var errMsg = error.message ? error.message : error.status ? error.status + " - " + error.statusText : 'Server error';
        console.error(errMsg); // log to console instead
        return throwError(errMsg);
    };
    DAFService.prototype.patch = function (data, path) {
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json'
            })
        };
        return this.http.patch(this.resolvePath(path), data, options).pipe(this.catchError());
    };
    DAFService.prototype.post = function (data, path) {
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json'
            })
        };
        return this.http.post(this.resolvePath(path), data, options).pipe(this.catchError());
    };
    DAFService.prototype.put = function (data, path) {
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json'
            })
        };
        return this.http.put(this.resolvePath(path), data, options).pipe(this.catchError());
    };
    DAFService.prototype.resolvePath = function (path) {
        if (this.settings && this.settings.APIRoot) {
            if (this.settings.APIRoot.endsWith('/')) {
                this.settings.APIRoot = this.settings.APIRoot.substring(this.settings.APIRoot.length - 1);
            }
            if (path.startsWith('/')) {
                path = path.substring(1);
            }
            return this.settings.APIRoot + "/" + path;
        }
        else {
            return path;
        }
    };
    return DAFService;
}());
export { DAFService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFmLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbGN1L2NvbW1vbi8iLCJzb3VyY2VzIjpbImxpYi9hcGkvZGFmL2RhZi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBZ0MsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hFLE9BQU8sRUFBTyxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVqRCxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRy9ELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRTdEO0lBTUUsZ0JBQWdCO0lBQ2hCLG9CQUFzQixRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ3RDLElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVyQyxJQUFJO1lBQ0YsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7U0FDbEQ7UUFBQyxPQUFPLEdBQUcsRUFBRSxHQUFFO0lBQ2xCLENBQUM7SUFFRCxXQUFXO0lBQ0QsK0JBQVUsR0FBcEI7UUFDRSxPQUFPLFVBQVUsQ0FBVyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVTLDJCQUFNLEdBQWhCLFVBQWlCLElBQVk7UUFDM0IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBZSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQ3hGLENBQUM7SUFFUyx3QkFBRyxHQUFiLFVBQWlCLElBQVk7UUFDM0IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBeUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FB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bGUsIE9wZXJhdG9yRnVuY3Rpb24sIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwLCBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi4vYmFzZS1yZXNwb25zZSc7XHJcbmltcG9ydCB7IEJhc2VNb2RlbGVkUmVzcG9uc2UgfSBmcm9tICcuLi9iYXNlLW1vZGVsZWQtcmVzcG9uc2UnO1xyXG5pbXBvcnQgeyBMQ1VTZXJ2aWNlU2V0dGluZ3MgfSBmcm9tICcuLi9sY3Utc2VydmljZS1zZXR0aW5ncyc7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgREFGU2VydmljZSB7XHJcbiAgLy8gXHRGaWVsZHNcclxuICBwcm90ZWN0ZWQgaHR0cDogSHR0cENsaWVudDtcclxuXHJcbiAgcHJvdGVjdGVkIHNldHRpbmdzOiBMQ1VTZXJ2aWNlU2V0dGluZ3M7XHJcblxyXG4gIC8vICBDb25zdHJ1Y3RvcnNcclxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yKSB7XHJcbiAgICB0aGlzLmh0dHAgPSBpbmplY3Rvci5nZXQoSHR0cENsaWVudCk7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgdGhpcy5zZXR0aW5ncyA9IGluamVjdG9yLmdldChMQ1VTZXJ2aWNlU2V0dGluZ3MpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7fVxyXG4gIH1cclxuXHJcbiAgLy8gIEhlbHBlcnNcclxuICBwcm90ZWN0ZWQgY2F0Y2hFcnJvcigpOiBPcGVyYXRvckZ1bmN0aW9uPGFueSwgYW55PiB7XHJcbiAgICByZXR1cm4gY2F0Y2hFcnJvcjxhbnksIGFueT4odGhpcy5oYW5kbGVFcnJvcik7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgZGVsZXRlKHBhdGg6IHN0cmluZyk6IE9ic2VydmFibGU8QmFzZVJlc3BvbnNlPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmRlbGV0ZTxCYXNlUmVzcG9uc2U+KHRoaXMucmVzb2x2ZVBhdGgocGF0aCkpLnBpcGUodGhpcy5jYXRjaEVycm9yKCkpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGdldDxUPihwYXRoOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEJhc2VNb2RlbGVkUmVzcG9uc2U8VD4+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PEJhc2VNb2RlbGVkUmVzcG9uc2U8VD4+KHRoaXMucmVzb2x2ZVBhdGgocGF0aCkpLnBpcGUodGhpcy5jYXRjaEVycm9yKCkpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGhhbmRsZUVycm9yKGVycm9yOiBhbnkpOiBhbnkge1xyXG4gICAgLy8gSW4gYSByZWFsIHdvcmxkIGFwcCwgd2UgbWlnaHQgdXNlIGEgcmVtb3RlIGxvZ2dpbmcgaW5mcmFzdHJ1Y3R1cmVcclxuICAgIC8vIFdlJ2QgYWxzbyBkaWcgZGVlcGVyIGludG8gdGhlIGVycm9yIHRvIGdldCBhIGJldHRlciBtZXNzYWdlXHJcbiAgICBjb25zdCBlcnJNc2cgPSBlcnJvci5tZXNzYWdlID8gZXJyb3IubWVzc2FnZSA6IGVycm9yLnN0YXR1cyA/IGAke2Vycm9yLnN0YXR1c30gLSAke2Vycm9yLnN0YXR1c1RleHR9YCA6ICdTZXJ2ZXIgZXJyb3InO1xyXG5cclxuICAgIGNvbnNvbGUuZXJyb3IoZXJyTXNnKTsgLy8gbG9nIHRvIGNvbnNvbGUgaW5zdGVhZFxyXG5cclxuICAgIHJldHVybiB0aHJvd0Vycm9yKGVyck1zZyk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgcGF0Y2g8VD4oZGF0YTogYW55LCBwYXRoOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEJhc2VNb2RlbGVkUmVzcG9uc2U8VD4+IHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIGhlYWRlcnM6IG5ldyBIdHRwSGVhZGVycyh7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICB9KVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5odHRwLnBhdGNoPEJhc2VNb2RlbGVkUmVzcG9uc2U8VD4+KHRoaXMucmVzb2x2ZVBhdGgocGF0aCksIGRhdGEsIG9wdGlvbnMpLnBpcGUodGhpcy5jYXRjaEVycm9yKCkpO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIHBvc3Q8VD4oZGF0YTogYW55LCBwYXRoOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEJhc2VNb2RlbGVkUmVzcG9uc2U8VD4+IHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIGhlYWRlcnM6IG5ldyBIdHRwSGVhZGVycyh7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICB9KVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3Q8QmFzZU1vZGVsZWRSZXNwb25zZTxUPj4odGhpcy5yZXNvbHZlUGF0aChwYXRoKSwgZGF0YSwgb3B0aW9ucykucGlwZSh0aGlzLmNhdGNoRXJyb3IoKSk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgcHV0PFQ+KGRhdGE6IGFueSwgcGF0aDogc3RyaW5nKTogT2JzZXJ2YWJsZTxCYXNlTW9kZWxlZFJlc3BvbnNlPFQ+PiB7XHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBoZWFkZXJzOiBuZXcgSHR0cEhlYWRlcnMoe1xyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgfSlcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wdXQ8QmFzZU1vZGVsZWRSZXNwb25zZTxUPj4odGhpcy5yZXNvbHZlUGF0aChwYXRoKSwgZGF0YSwgb3B0aW9ucykucGlwZSh0aGlzLmNhdGNoRXJyb3IoKSk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgcmVzb2x2ZVBhdGgocGF0aDogc3RyaW5nKSB7XHJcbiAgICBpZiAodGhpcy5zZXR0aW5ncyAmJiB0aGlzLnNldHRpbmdzLkFQSVJvb3QpIHtcclxuICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuQVBJUm9vdC5lbmRzV2l0aCgnLycpKSB7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5BUElSb290ID0gdGhpcy5zZXR0aW5ncy5BUElSb290LnN1YnN0cmluZyh0aGlzLnNldHRpbmdzLkFQSVJvb3QubGVuZ3RoIC0gMSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChwYXRoLnN0YXJ0c1dpdGgoJy8nKSkge1xyXG4gICAgICAgIHBhdGggPSBwYXRoLnN1YnN0cmluZygxKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGAke3RoaXMuc2V0dGluZ3MuQVBJUm9vdH0vJHtwYXRofWA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gcGF0aDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19