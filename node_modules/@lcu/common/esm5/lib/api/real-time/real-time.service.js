import { __awaiter, __generator, __read, __spread } from "tslib";
import * as signalR from '@aspnet/signalr';
import { NgZone } from '@angular/core';
import { Injectable, Injector } from '@angular/core';
import { LCUServiceSettings } from '../lcu-service-settings';
import { Observable, ReplaySubject, Subject } from 'rxjs';
import * as i0 from "@angular/core";
//  TODO:  Need to manage reconnection to hub scenarios here
var RealTimeService = /** @class */ (function () {
    //  Constructors
    function RealTimeService(injector) {
        this.injector = injector;
        this.ReconnectionAttempt = new Subject();
        this.connectionAttempts = 0;
        try {
            this.Settings = injector.get(LCUServiceSettings);
            this.zone = injector.get(NgZone);
        }
        catch (err) { }
        this.started = new ReplaySubject();
        this.Started = this.started.asObservable();
        this.start();
    }
    //  API Methods
    RealTimeService.prototype.Start = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.buildHub('').then(function (hub) {
                _this.hub = hub;
                _this.hub.serverTimeoutInMilliseconds = 600000;
                _this.hub.onclose(function (err) {
                    console.log('onclose: ' + err);
                    _this.retryConnection();
                });
                try {
                    _this.hub
                        .start()
                        .then(function () {
                        // this.connectionAttempts = 0;
                        console.log("Connection started");
                        resolve(_this.hub);
                    })
                        .catch(function (err) {
                        _this.retryConnection();
                        if (_this.showConnectionError) {
                            reject(err);
                            console.log('Error while starting connection: ' + err);
                            _this.showConnectionError = false;
                        }
                    });
                }
                catch (err) {
                    console.log('Error while starting connection 02: ' + err);
                    _this.retryConnection();
                }
            });
        });
    };
    RealTimeService.prototype.RegisterHandler = function (methodName) {
        var _this = this;
        return this.WithHub(function (hub) {
            return Observable.create(function (obs) {
                try {
                    hub.on(methodName, function (req) {
                        obs.next(req);
                        _this.zone.run(function () { });
                    });
                }
                catch (err) {
                    console.log("Error while handling " + methodName + ": " + err);
                    obs.error(err);
                    _this.retryConnection();
                }
            });
        });
    };
    RealTimeService.prototype.Invoke = function (methodName) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return this.WithHub(function (hub) {
            return Observable.create(function (obs) {
                try {
                    hub
                        .invoke.apply(hub, __spread([methodName], args)).then(function (res) {
                        obs.next(res);
                        _this.zone.run(function () { });
                    })
                        .catch(function (e) {
                        obs.error(e);
                    });
                }
                catch (err) {
                    console.log("Error while invoking " + methodName + ": " + err);
                    obs.error(err);
                    _this.retryConnection();
                }
            });
        });
    };
    RealTimeService.prototype.WithHub = function (action) {
        var _this = this;
        try {
            return Observable.create(function (obs) {
                if (_this.hub.state !== signalR.HubConnectionState.Connected) {
                    _this.Start().then(function (hub) {
                        console.log('Restarting connection in flight...');
                        _this.runWithHub(obs, action);
                    });
                }
                else {
                    _this.runWithHub(obs, action);
                }
            });
        }
        catch (err) {
            return Observable.create(function (obs) {
                obs.error(err);
                obs.complete();
            });
        }
    };
    //  Helpers
    RealTimeService.prototype.buildHub = function (urlRoot) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.url = this.buildHubUrl(urlRoot);
                return [2 /*return*/, (new signalR.HubConnectionBuilder()
                        .configureLogging(signalR.LogLevel.Information)
                        .withUrl(this.url)
                        // .withUrl(this.url, {
                        //   transport: signalR.HttpTransportType.LongPolling
                        // })
                        .build())];
            });
        });
    };
    RealTimeService.prototype.buildHubUrl = function (urlRoot) {
        var url = this.loadHubUrl(urlRoot);
        return url;
    };
    RealTimeService.prototype.loadHubPath = function () {
        var stateRoot = this.loadStateRoot();
        return stateRoot + "?lcu-app-id=" + this.Settings.AppConfig.ID + "&lcu-app-ent-api-key=" + this.Settings.AppConfig.EnterpriseAPIKey + "&lcu-environment=" + (this.Settings.StateConfig.Environment || '');
    };
    RealTimeService.prototype.loadHubUrl = function (urlRoot) {
        var apiRoot = this.Settings ? this.Settings.APIRoot || '' : '';
        var hubPath = this.loadHubPath();
        return "" + apiRoot + (urlRoot || '') + hubPath;
    };
    RealTimeService.prototype.loadStateRoot = function () {
        // return this.Settings.StateConfig &&
        //   this.Settings.StateConfig.Root !== undefined
        //   ? this.Settings.StateConfig.Root
        //   : '/state';
        return '/state';
    };
    RealTimeService.prototype.runWithHub = function (obs, action) {
        var _this = this;
        var res = action(this.hub);
        if (res) {
            res.subscribe(function (r) {
                obs.next(r);
                _this.zone.run(function () { });
            }, function (e) {
                obs.error(e);
            });
        }
    };
    RealTimeService.prototype.start = function () {
        var _this = this;
        setTimeout(function () {
            _this.Start().then(function (hub) { return _this.started.next(hub); });
        }, 50);
    };
    RealTimeService.prototype.stop = function () {
        // this.hub.stop();
        this.showConnectionError = true;
    };
    /**
     * Retry connection
     */
    RealTimeService.prototype.retryConnection = function () {
        if (this.connectionAttempts < 5) {
            console.log("Retrying connection attempt " + this.connectionAttempts);
            this.connectionAttempts += 1;
            this.reconnect();
        }
        else if (this.connectionAttempts >= 5) {
            this.stopReconnection();
        }
    };
    /**
     * Attempt to reconnect
     */
    RealTimeService.prototype.reconnect = function () {
        this.attemptingToReconnect = true;
        this.reconnectionMessage();
        this.start();
    };
    /**
     * Stop trying to reconnect
     */
    RealTimeService.prototype.stopReconnection = function () {
        this.attemptingToReconnect = false;
        this.reconnectionMessage();
        this.stop();
    };
    /**
     * Notify user of reconnection attempt(s)
     */
    RealTimeService.prototype.reconnectionMessage = function () {
        this.ReconnectionAttempt.next(this.attemptingToReconnect);
    };
    RealTimeService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    RealTimeService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RealTimeService_Factory() { return new RealTimeService(i0.ɵɵinject(i0.INJECTOR)); }, token: RealTimeService, providedIn: "root" });
    RealTimeService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    RealTimeService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return RealTimeService;
}());
export { RealTimeService };
//# sourceMappingURL=data:application/json;base64,