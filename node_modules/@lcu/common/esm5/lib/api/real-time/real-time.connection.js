import { __awaiter, __generator, __read, __spread } from "tslib";
import * as signalR from '@aspnet/signalr';
import { EventEmitter } from '@angular/core';
import { Observable } from 'rxjs';
var RealTimeConnection = /** @class */ (function () {
    //  Constructors
    function RealTimeConnection(http, rtUrl, actionUrl, maxConnectionRetryAttempts) {
        if (maxConnectionRetryAttempts === void 0) { maxConnectionRetryAttempts = 10; }
        this.http = http;
        this.actionUrl = actionUrl;
        this.connectionAttempts = 0;
        this.rtUrl = rtUrl;
        this.ConnectionError = new EventEmitter();
        this.ReconnectionAttempt = new EventEmitter();
        this.MaxConnectionRetryAttempts = maxConnectionRetryAttempts;
        this.Started = new EventEmitter();
    }
    //  API Methods
    RealTimeConnection.prototype.Start = function (transport) {
        var _this = this;
        if (transport === void 0) { transport = signalR.HttpTransportType.WebSockets; }
        this.buildHub(transport).then(function (hub) {
            _this.Hub = hub;
            _this.Hub.serverTimeoutInMilliseconds = 600000;
            _this.Hub.onclose(function (err) {
                console.log('onclose: ' + err);
                _this.retryConnection();
            });
            try {
                _this.Hub.start()
                    .then(function () {
                    _this.connectionAttempts = 0;
                    console.log("Connection started");
                    _this.Started.emit(_this.Hub);
                })
                    .catch(function (err) {
                    console.log('Error while starting connection: ' + err);
                    _this.ConnectionError.emit(err);
                    _this.retryConnection();
                });
            }
            catch (err) {
                console.log('Error while starting connection: ' + err);
                _this.retryConnection();
            }
        });
    };
    RealTimeConnection.prototype.RegisterHandler = function (methodName) {
        var _this = this;
        return new Observable(function (obs) {
            if (_this.Hub) {
                try {
                    _this.Hub.on(methodName, function (req) {
                        obs.next(req);
                    });
                }
                catch (err) {
                    console.log("Error while handling " + methodName + ": " + err);
                    obs.error(err);
                }
            }
            else {
                obs.error('The hub must be started and configured before registering a handler.');
            }
        });
    };
    RealTimeConnection.prototype.InvokeAction = function (methodName, headers, args) {
        var url = this.actionUrl + "/" + methodName;
        return this.http.post(url, args, {
            headers: headers,
            withCredentials: true
        });
    };
    RealTimeConnection.prototype.Invoke = function (methodName) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return new Observable(function (obs) {
            var _a;
            if (_this.Hub) {
                try {
                    (_a = _this.Hub).invoke.apply(_a, __spread([methodName], args)).then(function (res) {
                        obs.next(res);
                    })
                        .catch(function (e) {
                        obs.error(e);
                    });
                }
                catch (err) {
                    console.log("Error while invoking " + methodName + ": " + err);
                    obs.error(err);
                }
            }
            else {
                obs.error('The hub must be started and configured before invoking.');
            }
        });
    };
    //  Helpers
    RealTimeConnection.prototype.buildHub = function (transport) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, new signalR.HubConnectionBuilder()
                        .configureLogging(signalR.LogLevel.Information)
                        .withUrl(this.rtUrl, {
                        transport: transport
                    })
                        .build()];
            });
        });
    };
    RealTimeConnection.prototype.stop = function () {
        return this.Hub.stop();
    };
    /**
     * Retry connection
     */
    RealTimeConnection.prototype.retryConnection = function () {
        var _this = this;
        if (this.connectionAttempts < this.MaxConnectionRetryAttempts) {
            console.log("Retrying connection attempt " + this.connectionAttempts);
            this.connectionAttempts += 1;
            setTimeout(function () {
                _this.reconnect();
            }, 1000);
        }
        else if (this.connectionAttempts >= this.MaxConnectionRetryAttempts) {
            this.stop().then();
            this.ConnectionError.emit('The maximum number of connection retries has been met.');
        }
    };
    /**
     * Attempt to reconnect
     */
    RealTimeConnection.prototype.reconnect = function () {
        this.ReconnectionAttempt.emit(this.connectionAttempts);
        this.Start();
    };
    return RealTimeConnection;
}());
export { RealTimeConnection };
//# sourceMappingURL=data:application/json;base64,