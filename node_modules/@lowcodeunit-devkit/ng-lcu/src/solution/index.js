"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("@schematics/angular/utility/config");
const schematics_1 = require("@angular-devkit/schematics");
const find_module_1 = require("@schematics/angular/utility/find-module");
const schematics_2 = require("@angular-devkit/schematics");
const parse_name_1 = require("@schematics/angular/utility/parse-name");
const core_1 = require("@angular-devkit/core");
const module_helpers_1 = require("../utils/module-helpers");
function solution(options) {
    return (host, context) => {
        context.logger.debug('Starting solution...');
        setupOptions(host, options);
        addSolutionCapabilities(host, options);
        const project = config_1.getWorkspace(host).projects[options.project];
        const solutionSource = schematics_1.apply(schematics_1.url('./files/default'), [
            options.spec ? schematics_1.noop() : schematics_1.filter(path => !path.endsWith('.spec.ts')),
            schematics_1.template(Object.assign(Object.assign({}, core_1.strings), options)),
            schematics_1.move(options.path)
        ]);
        const rule = schematics_1.chain([
            schematics_2.branchAndMerge(schematics_1.chain([
                schematics_1.mergeWith(solutionSource, schematics_1.MergeStrategy.Default),
                module_helpers_1.addSolutionToNgModule(options),
                !options.export ? schematics_1.noop() : prepareLcuApiExport(project, options)
            ]))
        ]);
        return rule(host, context);
    };
}
exports.solution = solution;
function prepareLcuApiExport(project, options) {
    return (host) => {
        const exportFile = core_1.normalize('/' + project.root + '/' + options.export);
        const textBuf = host.read(exportFile);
        const componentPath = `${options.path}/`
            + core_1.strings.dasherize(options.name) + '/'
            + core_1.strings.dasherize(options.name)
            + '.component';
        const relativePath = find_module_1.buildRelativePath(exportFile, componentPath);
        let text = textBuf ? textBuf.toString('utf8') : '';
        let newExport = `export * from '${relativePath}';`;
        if (text.indexOf(newExport) < 0) {
            text += `${newExport}\r\n`;
            host.overwrite(exportFile, text);
        }
        return host;
    };
}
function setupOptions(host, options) {
    var lcuFile = host.get('lcu.json');
    var lcuJson = lcuFile ? JSON.parse(lcuFile.content.toString('utf8')) : {};
    const workspace = config_1.getWorkspace(host);
    options.scope = lcuJson.templates.scope;
    options.workspace = lcuJson.templates.workspace;
    options.disableLcuBootstrap = options.disableLcuBootstrap || false;
    options.export = options.export || 'src/lcu.api.ts';
    options.name = options.name || 'solution';
    options.spec = options.spec || false;
    if (!options.project) {
        options.project = Object.keys(workspace.projects)[0];
    }
    const project = workspace.projects[options.project];
    const projectDirName = project.projectType === 'application' ? 'app' : 'lib';
    options.path = `/${project.root}/src/` + (options.path ? options.path : projectDirName);
    const parsedPath = parse_name_1.parseName(options.path, options.name);
    options.name = parsedPath.name;
    options.path = parsedPath.path;
    let moduleOptions = Object.assign({}, options);
    moduleOptions.path = 'projects/common/src/lib';
    options.module = find_module_1.findModuleFromOptions(host, moduleOptions) || '';
    return host;
}
function addSolutionCapabilities(host, options) {
    let lcuFile = host.get('lcu.json');
    let lcuJson = lcuFile ? JSON.parse(lcuFile.content.toString('utf8')) : {};
    let capabilityName = options.name || 'config-manager';
    let elementName = lcuJson.templates.workspace + '-' + options.name + '-element';
    lcuJson.config.solutions[capabilityName] = {
        element: elementName
    };
    host.overwrite('lcu.json', JSON.stringify(lcuJson, null, '\t'));
    return host;
}
//# sourceMappingURL=index.js.map