import { Rule } from '@angular-devkit/schematics';
import { ModuleOptions } from '@schematics/angular/utility/find-module';
export declare class AddToModuleContext {
    classifiedName: string;
    filePath: string;
    relativePath: string;
    source: any;
}
export declare class AddImportToModuleContext {
    moduleName: string;
    modulePath: string;
    importName: string;
    importPath: string;
    forRoot?: boolean;
}
/**
 * The context necessary for adding a component to a specific file.
 *
 * @property {string} appRoutingModulePath - The path of the app-routing module that the route should be added to.
 * @property {string} componentName - The name of the component. I.e. 'example.component' or just 'example'.
 * @property {string} componentPath - The relative path to the component.
 * @property {string} route - Optional route for adding to app-routing.module.
 * @property {string} source - Optional source file of the app-routing.module.
 */
export declare class AddToRoutesContext {
    appRoutingModulePath: string;
    componentName: string;
    componentPath: string;
    route?: string;
    source?: any;
}
/**
 * Adds a route with the specified component into the app-routing module.
 *
 * @param context The context information of what is being added to the app-routing module.
 */
export declare function addComponentToAppRouting(context: AddToRoutesContext): Rule;
/**
 * When the 'solution' command is executed, adds the generated component to the given project module.
 * By default, it also adds a custom bootstrap function to the app.module file.
 *
 * @param options The options passed from the calling command
 */
export declare function addSolutionToNgModule(options: ModuleOptions | any): Rule;
/**
 * Adds the specified element type (i.e. Directive, Service, etc.) to the given project module.
 * Must specify the 'classifiedName' and 'componentPath' properties for it to work properly.
 *
 * @param options The options passed from the calling command
 */
export declare function addElementToNgModule(options: ModuleOptions | any, exportElement?: boolean): Rule;
/**
 * Adds the specified Module dependency to the imports array of the target Module.
 *
 * @param context The context information of what is being added to the imports array.
 */
export declare function importModule(context: AddImportToModuleContext): Rule;
/**
 * When the 'lcu' command is executed, it updates the 'lcu' project app.module and adds project module to it.
 *
 * @param options The options passed from the calling command
 * @param appModulePath (Optional) Specifies the path to look for the app.module in
 */
export declare function updateAppModule(options: ModuleOptions, appModulePath?: string): Rule;
