"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const config_1 = require("@schematics/angular/utility/config");
const core_1 = require("@angular-devkit/core");
function lcuStarterApp(options) {
    return (host, context) => {
        context.logger.info(`lcuStarterApp() - initializing... ${JSON.stringify(options)}`);
        setupOptions(host, options);
        context.logger.info(`lcuStarterApp() - options: ${JSON.stringify(options)}`);
        const workspace = config_1.getWorkspace(host);
        let project = workspace.projects[options.project];
        const targetPath = core_1.normalize(project.root + '/src');
        const appSource = schematics_1.apply(schematics_1.url('./files/app'), [
            schematics_1.template(Object.assign(Object.assign({}, core_1.strings), options)),
            schematics_1.move(targetPath + '/app'),
        ]);
        const styleSource = schematics_1.apply(schematics_1.url('./files/style'), [
            schematics_1.template(Object.assign(Object.assign({}, core_1.strings), options)),
            schematics_1.move(targetPath),
        ]);
        return schematics_1.chain([
            schematics_1.mergeWith(appSource, schematics_1.MergeStrategy.Default),
            schematics_1.mergeWith(styleSource, schematics_1.MergeStrategy.Overwrite)
        ]);
    };
}
exports.lcuStarterApp = lcuStarterApp;
function setupOptions(host, options) {
    let lcuFile = host.get('lcu.json');
    let lcuJson = lcuFile ? JSON.parse(lcuFile.content.toString('utf8')) : {};
    const workspace = config_1.getWorkspace(host);
    options.scope = lcuJson.templates.scope;
    options.workspace = lcuJson.templates.workspace;
    options.project = options.project ? options.project :
        workspace.defaultProject ? workspace.defaultProject : Object.keys(workspace.projects)[0];
    options.name = options.name;
    return host;
}
//# sourceMappingURL=index.js.map