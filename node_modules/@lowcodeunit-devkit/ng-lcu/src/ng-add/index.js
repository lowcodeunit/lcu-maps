"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const core_1 = require("@angular-devkit/core");
const helpers_1 = require("../utils/helpers");
// You don't have to export the function as default. You can also have more than one rule factory
// per file.
function ngAdd(options) {
    return (tree, context) => {
        options.repository = options.repository || options.repo;
        options.docs = options.docs || false;
        const templateSource = schematics_1.apply(schematics_1.url('./files/project'), [
            schematics_1.template(Object.assign(Object.assign({}, core_1.strings), options)),
            schematics_1.move('./')
        ]);
        const docsSource = schematics_1.apply(schematics_1.url('./files/docs'), [
            schematics_1.template(Object.assign(Object.assign({}, core_1.strings), options)),
            schematics_1.move('./docs')
        ]);
        const rule = schematics_1.chain([
            schematics_1.mergeWith(templateSource, schematics_1.MergeStrategy.Default),
            !options.docs ? schematics_1.noop() : schematics_1.mergeWith(docsSource, schematics_1.MergeStrategy.Default),
            adjustPackageValues(options),
            addDeployScripts(),
            addGitIgnore()
        ]);
        return rule(tree, context);
    };
}
exports.ngAdd = ngAdd;
/**
 * add .gitignore file
 */
function addGitIgnore() {
    return (host) => {
        /** read .gitignore and turn into a string */
        let newGitignore = String(host.read('.gitignore'));
        /** add new values to gitignore string
         *
         * we can add any values we want, the below is just for testing
         */
        newGitignore += '\n' + '# Mac OSX Finder files' + '\n' + '**/.DS_Store' + '\n' + '.DS_Store' + '\n' + 'test/' + '\n' + 'tester/';
        /** overwrite existing .gitignore with new values */
        host.overwrite('.gitignore', newGitignore);
        return host;
    };
}
exports.addGitIgnore = addGitIgnore;
function addDeployScripts() {
    return (host) => {
        helpers_1.addScriptsToPackageFile(host, [
            {
                key: 'deploy',
                value: `npm version patch && npm run deploy:all`
            },
            {
                key: 'deploy:all',
                value: ``
            }
        ]);
        return host;
    };
}
exports.addDeployScripts = addDeployScripts;
function adjustPackageValues(options) {
    return (host) => {
        var name = options.scope ? `${options.scope}/${options.workspace}` : options.workspace;
        helpers_1.adjustValueInPackageFile(host, 'name', `"${name}"`);
        helpers_1.adjustValueInPackageFile(host, 'version', `"0.0.1"`);
        helpers_1.adjustValueInPackageFile(host, 'private', 'false');
        return host;
    };
}
exports.adjustPackageValues = adjustPackageValues;
// function addDependencies(options: any) {
//   return (host: Tree) => {
//     [{
//       type: NodeDependencyType.Default,
//       name: '@lcu/common',
//       version: '^2.0.8'
//     }].forEach(dependency => addPackageJsonDependency(host, dependency));
//     return host;
//   };
// }
//# sourceMappingURL=index.js.map