"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const config_1 = require("@schematics/angular/utility/config");
const core_1 = require("@angular-devkit/core");
const module_helpers_1 = require("../utils/module-helpers");
const helpers_1 = require("../utils/helpers");
/**
 * Schematic for adding the LCU-Documentation library and accompanying documents to an Application.
 *
 * @param options The options passed from the CLI.
 */
function documentation(options) {
    return (host, context) => {
        context.logger.info(`Starting documentation...`);
        setupOptions(host, options);
        const projectRoot = helpers_1.findProjectRoot(host, options);
        options.targetPath = core_1.normalize(projectRoot + "/src/" + options.path);
        const templateSource = schematics_1.apply(schematics_1.url(`./files/init-with/${options.initWith}`), [
            schematics_1.template(Object.assign(Object.assign({}, core_1.strings), options)),
            schematics_1.move(options.targetPath)
        ]);
        const moduleContext = {
            moduleName: 'app',
            modulePath: `${projectRoot}/src/app`,
            importName: 'LcuDocumentationModule',
            importPath: '@lowcodeunit/lcu-documentation-common',
            forRoot: true
        };
        const routesContext = {
            appRoutingModulePath: `${projectRoot}/src/app/app-routing.module.ts`,
            componentName: 'documentation',
            componentPath: './controls/documentation/documentation.component',
            route: 'documentation'
        };
        return schematics_1.chain([
            schematics_1.mergeWith(templateSource, schematics_1.MergeStrategy.Default),
            options.includeComponent ? addComponentFiles(options) : schematics_1.noop(),
            options.includeRouting ? module_helpers_1.addComponentToAppRouting(routesContext) : schematics_1.noop(),
            module_helpers_1.importModule(moduleContext),
            addDocsToAssetsPath(options)
        ]);
    };
}
exports.documentation = documentation;
/**
 * Adds the local path of the documents to the 'angular.json' file so they are served up with the app.
 *
 * @param options The options passed from the calling command.
 * @param docsPath Optional path to specify the location of the documents. If no path given, defaults to target path.
 */
function addDocsToAssetsPath(options, docsPath) {
    return (host) => {
        const projectSafeName = options.project ? core_1.strings.dasherize(options.project) : 'demo';
        const path = docsPath ? docsPath : options.targetPath;
        let angularFile = host.get('angular.json');
        let angularJson = angularFile ? JSON.parse(angularFile.content.toString('utf8')) : {};
        angularJson.projects[projectSafeName].architect.build.options.assets.push(path);
        host.overwrite('angular.json', JSON.stringify(angularJson, null, '\t'));
        return host;
    };
}
exports.addDocsToAssetsPath = addDocsToAssetsPath;
/**
 * Adds the component files necessary to contain and run the lcu-documentation tool.
 *
 * @param options The options passed from the calling command.
 */
function addComponentFiles(options) {
    return (host) => {
        const workspace = config_1.getWorkspace(host);
        const project = workspace.projects[options.project];
        const targetPath = core_1.normalize(project.root + "/src/app/controls");
        const templateSource = schematics_1.apply(schematics_1.url(`./files/controls`), [
            schematics_1.template(Object.assign(Object.assign({}, core_1.strings), options)),
            schematics_1.move(targetPath)
        ]);
        options.classifiedName = 'DocumentationComponent';
        options.componentPath = `/${project.root}/src/app/controls/documentation/documentation.component`;
        options.module = `/${project.root}/src/app/app.module.ts`;
        return schematics_1.chain([
            schematics_1.mergeWith(templateSource, schematics_1.MergeStrategy.Default),
            module_helpers_1.addElementToNgModule(options)
        ]);
    };
}
/**
 * Sets up the options specific to this schematic.
 *
 * @param host The current application Tree.
 * @param options The options passed from the calling command.
 */
function setupOptions(host, options) {
    const workspace = config_1.getWorkspace(host);
    options.project = options.project
        ? options.project
        : workspace.defaultProject
            ? workspace.defaultProject
            : Object.keys(workspace.projects)[0];
    options.path = options.path || "docs";
    options.initWith = options.initWith || 'default'; // TODO: Do I need to lowercase() here?
    options.name = options.name || "docs";
    options.spec = options.spec || false;
    return host;
}
//# sourceMappingURL=index.js.map