"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("@schematics/angular/utility/config");
const schematics_1 = require("@angular-devkit/schematics");
const core_1 = require("@angular-devkit/core");
/**
 * Rule Factory (entry function) that returns a Rule
 *
 * @param options options passed from the command line when calling the schematic
 *
 * A Rule is a function that applies actions to a Tree given the SchematicContext
 */
function lcuCoreApp(options) {
    /** A tree is a staging area for changes,
     * containing the original file system, and a list of changes to apply to it.
     * */
    return (host, context) => {
        setupOptions(host, options);
        const workspace = config_1.getWorkspace(host);
        context.logger.info(`LCU Core App OPTIONS: ${JSON.stringify(options)}...`);
        let project = workspace.projects[options.project];
        /** source within of root path */
        const targetPath = core_1.normalize(project.root + '/src/');
        /** location of source files */
        const solutionSource = schematics_1.apply(schematics_1.url('./files/src'), [
            /** template function executes the templates that can be found */
            schematics_1.template(Object.assign(Object.assign({}, core_1.strings), options)),
            /** move everything to the correct folder */
            schematics_1.move(targetPath),
        ]);
        // const docsSource = apply(url('./files/docs'), [
        //   template({
        //     ...strings,
        //     ...options,
        //   }),
        //   move('./docs'),
        // ]);
        /** return a chain of existing rules */
        return schematics_1.chain([
            schematics_1.mergeWith(solutionSource, schematics_1.MergeStrategy.Default),
        ]);
    };
}
exports.lcuCoreApp = lcuCoreApp;
function setupOptions(host, options) {
    let lcuFile = host.get('lcu.json');
    let lcuJson = lcuFile ? JSON.parse(lcuFile.content.toString('utf8')) : {};
    const workspace = config_1.getWorkspace(host);
    options.scope = lcuJson.templates.scope;
    options.workspace = lcuJson.templates.workspace;
    options.project = options.project ? options.project :
        workspace.defaultProject ? workspace.defaultProject : Object.keys(workspace.projects)[0];
    options.name = options.name;
    return host;
}
//# sourceMappingURL=index.js.map