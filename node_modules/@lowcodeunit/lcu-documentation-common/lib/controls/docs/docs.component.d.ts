/// <reference types="marked" />
import { HttpClient } from '@angular/common/http';
import { OnInit, EventEmitter } from '@angular/core';
import { LcuMarkdownDocsConfig, LcuMarkdownDocChangeEvent, LcuMarkdownDoc } from '../../models/docs-config';
import { FlatTreeControl } from '@angular/cdk/tree';
import { MatTreeFlattener, MatTreeFlatDataSource } from '@angular/material/tree';
import { Observable } from 'rxjs';
import { MarkedOptions } from 'ngx-markdown';
export declare class FileNode {
    children: FileNode[];
    filename: string;
    level: number;
    path: string;
}
/** Flat node with expandable and level information */
export declare class FileFlatNode {
    expandable: boolean;
    filename: string;
    level: number;
    path: string;
    constructor(expandable: boolean, filename: string, level: number, path: string);
}
export declare const originalHeading: (text: string, level: 1 | 2 | 6 | 5 | 4 | 3, raw: string, slugger: import("marked").Slugger) => string;
export declare function markedOptionsFactory(): MarkedOptions;
export declare class LcuDocsComponent implements OnInit {
    protected http: HttpClient;
    ActiveDocData: string;
    ActiveDocPath: string;
    DataSource: MatTreeFlatDataSource<FileNode, FileFlatNode>;
    TreeControl: FlatTreeControl<FileFlatNode>;
    TreeFlattener: MatTreeFlattener<FileNode, FileFlatNode>;
    Config: LcuMarkdownDocsConfig;
    set Docs(docs: string);
    DocChange: EventEmitter<LcuMarkdownDocChangeEvent>;
    constructor(http: HttpClient);
    ngOnInit(): void;
    onClick(btn: any): boolean;
    BuildFileTree(): void;
    FindDoc(path: string): LcuMarkdownDoc;
    GoToDoc(docOpt: LcuMarkdownDoc | string): void;
    HasChild(_: number, nodeData: FileFlatNode): boolean;
    Reload(): void;
    Transformer(node: FileNode): FileFlatNode;
    protected buildFileTree(docs: LcuMarkdownDoc[], level: number): FileNode[];
    protected buildFileNodeFromDoc(doc: LcuMarkdownDoc, level: number, bypassChildren?: boolean): FileNode;
    protected calculateActiveDocData(): void;
    protected getLevel(node: FileFlatNode): number;
    protected isExpandable(node: FileFlatNode): boolean;
    protected getChildren(node: FileNode): Observable<FileNode[]>;
}
