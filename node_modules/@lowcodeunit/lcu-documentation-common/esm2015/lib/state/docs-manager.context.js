import { Injectable, Injector } from '@angular/core';
import { StateContext } from '@lcu/common';
import * as i0 from "@angular/core";
export class DocsManagerContext extends StateContext {
    constructor(injector) {
        super(injector);
        this.injector = injector;
    }
    GetDocsById(id) {
        this.State.Loading = true;
        this.Execute({
            Arguments: {
                DocsId: id
            },
            Type: 'get-docs-by-id'
        });
    }
    loadStateKey() {
        return 'main';
    }
    loadStateName() {
        return 'docs';
    }
}
DocsManagerContext.ɵprov = i0.ɵɵdefineInjectable({ factory: function DocsManagerContext_Factory() { return new DocsManagerContext(i0.ɵɵinject(i0.INJECTOR)); }, token: DocsManagerContext, providedIn: "root" });
DocsManagerContext.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
DocsManagerContext.ctorParameters = () => [
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jcy1tYW5hZ2VyLmNvbnRleHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb21tb24vc3JjL2xpYi9zdGF0ZS9kb2NzLW1hbmFnZXIuY29udGV4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sYUFBYSxDQUFDOztBQU0zQyxNQUFNLE9BQU8sa0JBQW1CLFNBQVEsWUFBdUI7SUFJM0QsWUFBc0IsUUFBa0I7UUFDcEMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBREUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUV4QyxDQUFDO0lBRU0sV0FBVyxDQUFDLEVBQVU7UUFDekIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBRTFCLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDVCxTQUFTLEVBQUU7Z0JBQ1AsTUFBTSxFQUFFLEVBQUU7YUFDYjtZQUNELElBQUksRUFBRSxnQkFBZ0I7U0FDekIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVTLFlBQVk7UUFDbEIsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVTLGFBQWE7UUFDbkIsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQzs7OztZQTVCSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7OztZQU5vQixRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3RhdGVDb250ZXh0IH0gZnJvbSAnQGxjdS9jb21tb24nO1xyXG5pbXBvcnQgeyBEb2NzTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvZG9jcy5tb2RlbCc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIERvY3NNYW5hZ2VyQ29udGV4dCBleHRlbmRzIFN0YXRlQ29udGV4dDxEb2NzTW9kZWw+IHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgU3RhdGU6IERvY3NNb2RlbDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yKSB7XHJcbiAgICAgICAgc3VwZXIoaW5qZWN0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBHZXREb2NzQnlJZChpZDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5TdGF0ZS5Mb2FkaW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5FeGVjdXRlKHtcclxuICAgICAgICAgICAgQXJndW1lbnRzOiB7XHJcbiAgICAgICAgICAgICAgICBEb2NzSWQ6IGlkXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIFR5cGU6ICdnZXQtZG9jcy1ieS1pZCdcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgbG9hZFN0YXRlS2V5KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuICdtYWluJztcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgbG9hZFN0YXRlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiAnZG9jcyc7XHJcbiAgICB9XHJcbn1cclxuIl19