import { __decorate } from "tslib";
import { Injectable, Injector } from '@angular/core';
import { StateContext } from '@lcu/common';
import * as i0 from "@angular/core";
let DocsManagerContext = class DocsManagerContext extends StateContext {
    constructor(injector) {
        super(injector);
        this.injector = injector;
    }
    GetDocsById(id) {
        this.State.Loading = true;
        this.Execute({
            Arguments: {
                DocsId: id
            },
            Type: 'get-docs-by-id'
        });
    }
    loadStateKey() {
        return 'main';
    }
    loadStateName() {
        return 'docs';
    }
};
DocsManagerContext.ctorParameters = () => [
    { type: Injector }
];
DocsManagerContext.ɵprov = i0.ɵɵdefineInjectable({ factory: function DocsManagerContext_Factory() { return new DocsManagerContext(i0.ɵɵinject(i0.INJECTOR)); }, token: DocsManagerContext, providedIn: "root" });
DocsManagerContext = __decorate([
    Injectable({
        providedIn: 'root'
    })
], DocsManagerContext);
export { DocsManagerContext };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jcy1tYW5hZ2VyLmNvbnRleHQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbG93Y29kZXVuaXQvbGN1LWRvY3VtZW50YXRpb24tY29tbW9uLyIsInNvdXJjZXMiOlsibGliL3N0YXRlL2RvY3MtbWFuYWdlci5jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sYUFBYSxDQUFDOztBQU0zQyxJQUFhLGtCQUFrQixHQUEvQixNQUFhLGtCQUFtQixTQUFRLFlBQXVCO0lBSTNELFlBQXNCLFFBQWtCO1FBQ3BDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQURFLGFBQVEsR0FBUixRQUFRLENBQVU7SUFFeEMsQ0FBQztJQUVNLFdBQVcsQ0FBQyxFQUFVO1FBQ3pCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUUxQixJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1QsU0FBUyxFQUFFO2dCQUNQLE1BQU0sRUFBRSxFQUFFO2FBQ2I7WUFDRCxJQUFJLEVBQUUsZ0JBQWdCO1NBQ3pCLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFUyxZQUFZO1FBQ2xCLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFUyxhQUFhO1FBQ25CLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7Q0FDSixDQUFBOztZQXRCbUMsUUFBUTs7O0FBSi9CLGtCQUFrQjtJQUg5QixVQUFVLENBQUM7UUFDUixVQUFVLEVBQUUsTUFBTTtLQUNyQixDQUFDO0dBQ1csa0JBQWtCLENBMEI5QjtTQTFCWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdGF0ZUNvbnRleHQgfSBmcm9tICdAbGN1L2NvbW1vbic7XHJcbmltcG9ydCB7IERvY3NNb2RlbCB9IGZyb20gJy4uL21vZGVscy9kb2NzLm1vZGVsJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRG9jc01hbmFnZXJDb250ZXh0IGV4dGVuZHMgU3RhdGVDb250ZXh0PERvY3NNb2RlbD4ge1xyXG5cclxuICAgIHByb3RlY3RlZCBTdGF0ZTogRG9jc01vZGVsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBpbmplY3RvcjogSW5qZWN0b3IpIHtcclxuICAgICAgICBzdXBlcihpbmplY3Rvcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEdldERvY3NCeUlkKGlkOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLlN0YXRlLkxvYWRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLkV4ZWN1dGUoe1xyXG4gICAgICAgICAgICBBcmd1bWVudHM6IHtcclxuICAgICAgICAgICAgICAgIERvY3NJZDogaWRcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgVHlwZTogJ2dldC1kb2NzLWJ5LWlkJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBsb2FkU3RhdGVLZXkoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gJ21haW4nO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBsb2FkU3RhdGVOYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuICdkb2NzJztcclxuICAgIH1cclxufVxyXG4iXX0=