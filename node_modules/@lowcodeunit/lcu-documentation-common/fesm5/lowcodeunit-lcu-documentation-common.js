import { __decorate, __assign, __extends } from 'tslib';
import { ɵɵdefineInjectable, Injectable, EventEmitter, Input, Output, HostListener, Component, NgModule, Injector, ɵɵinject, INJECTOR } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { FlexLayoutModule } from '@angular/flex-layout';
import { FathymSharedModule, MaterialModule, StateContext } from '@lcu/common';
import pathBrowserify from 'path-browserify';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { isString } from 'util';
import { FlatTreeControl } from '@angular/cdk/tree';
import { MatTreeFlattener, MatTreeFlatDataSource } from '@angular/material/tree';
import { of } from 'rxjs';
import { MarkedRenderer, MarkdownModule, MarkedOptions } from 'ngx-markdown';

var DocsService = /** @class */ (function () {
    function DocsService() {
    }
    DocsService.ɵprov = ɵɵdefineInjectable({ factory: function DocsService_Factory() { return new DocsService(); }, token: DocsService, providedIn: "root" });
    DocsService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], DocsService);
    return DocsService;
}());

var FileNode = /** @class */ (function () {
    function FileNode() {
    }
    return FileNode;
}());
/** Flat node with expandable and level information */
var FileFlatNode = /** @class */ (function () {
    function FileFlatNode(expandable, filename, level, path) {
        this.expandable = expandable;
        this.filename = filename;
        this.level = level;
        this.path = path;
    }
    return FileFlatNode;
}());
var originalHeading = new MarkedRenderer().heading;
function markedOptionsFactory() {
    var renderer = new MarkedRenderer();
    var lastLevel = 0;
    renderer.heading = function (text, level, raw) {
        lastLevel = level;
        return '<h' + level + '>' + text + '</h' + level + '>\n';
    };
    renderer.link = function (href, title, text) {
        return "<a title=\"" + (title || '') + "\" href=\"" + href + "\">" + (text ||
            title ||
            href) + "</a>";
    };
    renderer.paragraph = function (text) {
        var pClass = '';
        switch (lastLevel) {
            case 1:
            case 2:
                pClass = 'mat-body-3';
                break;
            case 3:
            case 4:
                pClass = 'mat-body-2';
                break;
            default:
                pClass = 'mat-body-1';
                break;
        }
        return "<p class=\"" + pClass + "\">" + text + "</p>";
    };
    return { renderer: renderer };
}

var LcuDocsComponent = /** @class */ (function () {
    //  Constructors
    function LcuDocsComponent(http) {
        this.http = http;
        this.DocChange = new EventEmitter();
        this.TreeFlattener = new MatTreeFlattener(this.Transformer, this.getLevel, this.isExpandable, this.getChildren);
        this.TreeControl = new FlatTreeControl(this.getLevel, this.isExpandable);
        this.DataSource = new MatTreeFlatDataSource(this.TreeControl, this.TreeFlattener);
    }
    Object.defineProperty(LcuDocsComponent.prototype, "Docs", {
        set: function (docs) {
            var _this = this;
            this.http
                .get(pathBrowserify.join(docs, 'lcu.docs.json'))
                .subscribe(function (res) {
                _this.Config = res;
                _this.Reload();
            });
        },
        enumerable: true,
        configurable: true
    });
    //  Life Cycle
    LcuDocsComponent.prototype.ngOnInit = function () {
        this.Reload();
    };
    LcuDocsComponent.prototype.onClick = function (btn) {
        if (btn && btn.href && btn.href.endsWith('.md')) {
            var path_1 = btn.href.replace(document.getElementsByTagName('base')[0].href, '');
            console.log("Going to doc: " + path_1);
            this.GoToDoc(path_1);
            return false;
        }
    };
    //  API Methods
    LcuDocsComponent.prototype.BuildFileTree = function () {
        this.DataSource.data = this.buildFileTree(this.Config.Docs, 0);
    };
    LcuDocsComponent.prototype.FindDoc = function (path) {
        return this.Config.Docs.find(function (d) { return d.Path === path; });
    };
    LcuDocsComponent.prototype.GoToDoc = function (docOpt) {
        var docPath = isString(docOpt)
            ? docOpt
            : docOpt.Path;
        if (this.ActiveDocPath !== docPath) {
            this.ActiveDocPath = docPath;
        }
        this.calculateActiveDocData();
        this.DocChange.emit({ DocPath: docPath });
    };
    LcuDocsComponent.prototype.HasChild = function (_, nodeData) {
        return nodeData.expandable;
    };
    LcuDocsComponent.prototype.Reload = function () {
        if (this.Config && this.Config.Docs && this.Config.Docs.length > 0) {
            this.BuildFileTree();
            this.GoToDoc(this.ActiveDocPath || this.Config.DefaultDocPath || this.Config.Docs[0]);
        }
    };
    LcuDocsComponent.prototype.Transformer = function (node) {
        return new FileFlatNode(!!node.children, node.filename, node.level, node.path);
    };
    //  Helpers
    LcuDocsComponent.prototype.buildFileTree = function (docs, level) {
        var _this = this;
        return docs.reduce(function (accumulator, doc) {
            var node = _this.buildFileNodeFromDoc(doc, level);
            return accumulator.concat(node);
        }, []);
    };
    LcuDocsComponent.prototype.buildFileNodeFromDoc = function (doc, level, bypassChildren) {
        var node = new FileNode();
        if (doc != null) {
            node.filename = doc.Title;
            node.level = level;
            if (!bypassChildren && doc.Children && doc.Children.length > 0) {
                node.children = this.buildFileTree(doc.Children, level + 1);
                var docCatch = __assign({}, doc);
                docCatch.Children = null;
            }
            else {
                node.path = doc.Path;
            }
        }
        return node;
    };
    LcuDocsComponent.prototype.calculateActiveDocData = function () {
        if (this.Config && this.ActiveDocPath) {
            this.ActiveDocData = pathBrowserify.join(this.Config.LocationRoot, this.ActiveDocPath);
        }
        else {
            this.ActiveDocData = null;
        }
    };
    LcuDocsComponent.prototype.getLevel = function (node) {
        return node.level;
    };
    LcuDocsComponent.prototype.isExpandable = function (node) {
        return node.expandable;
    };
    LcuDocsComponent.prototype.getChildren = function (node) {
        return of(node.children);
    };
    LcuDocsComponent.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    __decorate([
        Input('config')
    ], LcuDocsComponent.prototype, "Config", void 0);
    __decorate([
        Input('docs')
    ], LcuDocsComponent.prototype, "Docs", null);
    __decorate([
        Output('docChange')
    ], LcuDocsComponent.prototype, "DocChange", void 0);
    __decorate([
        HostListener('click', ['$event.target'])
    ], LcuDocsComponent.prototype, "onClick", null);
    LcuDocsComponent = __decorate([
        Component({
            selector: 'lcu-markdown-docs',
            template: "<div fxLayout=\"row\" *ngIf=\"Config\">\r\n  <div fxFlex=\"0 1 auto\">\r\n    <mat-tree [dataSource]=\"DataSource\" [treeControl]=\"TreeControl\">\r\n      <mat-tree-node\r\n        *matTreeNodeDef=\"let node\"\r\n        matTreeNodeToggle\r\n        [matTreeNodePadding]=\"Config.IndentVariant * node.level\"\r\n      >\r\n        <button mat-icon-button disabled></button>\r\n\r\n        <a mat-button (click)=\"GoToDoc(node.path)\">{{ node.filename }}</a>\r\n      </mat-tree-node>\r\n\r\n      <mat-tree-node\r\n        *matTreeNodeDef=\"let node; when: HasChild\"\r\n        [matTreeNodePadding]=\"Config.IndentVariant * node.level\"\r\n      >\r\n        <button\r\n          mat-icon-button\r\n          matTreeNodeToggle\r\n          [attr.aria-label]=\"'toggle ' + node.filename\"\r\n        >\r\n          <mat-icon class=\"mat-icon-rtl-mirror\">\r\n            {{ TreeControl.isExpanded(node) ? \"expand_more\" : \"chevron_right\" }}\r\n          </mat-icon>\r\n        </button>\r\n\r\n        <a mat-button matTreeNodeToggle>{{ node.filename }}</a>\r\n      </mat-tree-node>\r\n    </mat-tree>\r\n  </div>\r\n\r\n  <div fxFlex=\"auto\">\r\n    <div class=\"push-right\">\r\n      <ng-container *ngIf=\"!!ActiveDocData\">\r\n        <markdown [src]=\"ActiveDocData\"></markdown>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
            styles: [":host .mat-tree{padding:1rem}"]
        })
    ], LcuDocsComponent);
    return LcuDocsComponent;
}());

var ɵ0 = markedOptionsFactory;
var LcuDocumentationModule = /** @class */ (function () {
    function LcuDocumentationModule() {
    }
    LcuDocumentationModule_1 = LcuDocumentationModule;
    LcuDocumentationModule.forRoot = function () {
        return {
            ngModule: LcuDocumentationModule_1,
            providers: [DocsService]
        };
    };
    var LcuDocumentationModule_1;
    LcuDocumentationModule = LcuDocumentationModule_1 = __decorate([
        NgModule({
            declarations: [LcuDocsComponent],
            imports: [
                FathymSharedModule,
                FormsModule,
                ReactiveFormsModule,
                FlexLayoutModule,
                MaterialModule,
                HttpClientModule,
                MarkdownModule.forRoot({
                    loader: HttpClient,
                    markedOptions: {
                        provide: MarkedOptions,
                        useFactory: ɵ0
                    }
                })
            ],
            exports: [LcuDocsComponent],
            entryComponents: []
        })
    ], LcuDocumentationModule);
    return LcuDocumentationModule;
}());

var LcuMarkdownDocsConfig = /** @class */ (function () {
    function LcuMarkdownDocsConfig(opts) {
        Object.assign(this, opts);
    }
    return LcuMarkdownDocsConfig;
}());
var LcuMarkdownDoc = /** @class */ (function () {
    function LcuMarkdownDoc(opts) {
        Object.assign(this, opts);
    }
    return LcuMarkdownDoc;
}());
var LcuMarkdownDocChangeEvent = /** @class */ (function () {
    function LcuMarkdownDocChangeEvent(opts) {
        Object.assign(this, opts);
    }
    return LcuMarkdownDocChangeEvent;
}());

var DocsModel = /** @class */ (function () {
    function DocsModel() {
    }
    return DocsModel;
}());

var DocsManagerContext = /** @class */ (function (_super) {
    __extends(DocsManagerContext, _super);
    function DocsManagerContext(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        return _this;
    }
    DocsManagerContext.prototype.GetDocsById = function (id) {
        this.State.Loading = true;
        this.Execute({
            Arguments: {
                DocsId: id
            },
            Type: 'get-docs-by-id'
        });
    };
    DocsManagerContext.prototype.loadStateKey = function () {
        return 'main';
    };
    DocsManagerContext.prototype.loadStateName = function () {
        return 'docs';
    };
    DocsManagerContext.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    DocsManagerContext.ɵprov = ɵɵdefineInjectable({ factory: function DocsManagerContext_Factory() { return new DocsManagerContext(ɵɵinject(INJECTOR)); }, token: DocsManagerContext, providedIn: "root" });
    DocsManagerContext = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], DocsManagerContext);
    return DocsManagerContext;
}(StateContext));

var DocsUtils = /** @class */ (function () {
    function DocsUtils() {
    }
    DocsUtils.upperDocs = function (input) {
        return input.toUpperCase();
    };
    return DocsUtils;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { DocsManagerContext, DocsModel, DocsService, DocsUtils, FileFlatNode, FileNode, LcuDocsComponent, LcuDocumentationModule, LcuMarkdownDoc, LcuMarkdownDocChangeEvent, LcuMarkdownDocsConfig, markedOptionsFactory, originalHeading, ɵ0 };
//# sourceMappingURL=lowcodeunit-lcu-documentation-common.js.map
