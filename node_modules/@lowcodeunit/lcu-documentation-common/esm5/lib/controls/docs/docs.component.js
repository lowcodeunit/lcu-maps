import { __assign, __decorate } from "tslib";
import { HttpClient } from '@angular/common/http';
import { Component, Input, Output, EventEmitter, HostListener } from '@angular/core';
import { isString } from 'util';
import { FlatTreeControl } from '@angular/cdk/tree';
import { MatTreeFlattener, MatTreeFlatDataSource } from '@angular/material/tree';
import { of as observableOf } from 'rxjs';
import { MarkedRenderer } from 'ngx-markdown';
var FileNode = /** @class */ (function () {
    function FileNode() {
    }
    return FileNode;
}());
export { FileNode };
/** Flat node with expandable and level information */
var FileFlatNode = /** @class */ (function () {
    function FileFlatNode(expandable, filename, level, path) {
        this.expandable = expandable;
        this.filename = filename;
        this.level = level;
        this.path = path;
    }
    return FileFlatNode;
}());
export { FileFlatNode };
export var originalHeading = new MarkedRenderer().heading;
export function markedOptionsFactory() {
    var renderer = new MarkedRenderer();
    var lastLevel = 0;
    renderer.heading = function (text, level, raw) {
        lastLevel = level;
        return '<h' + level + '>' + text + '</h' + level + '>\n';
    };
    renderer.link = function (href, title, text) {
        return "<a title=\"" + (title || '') + "\" href=\"" + href + "\">" + (text ||
            title ||
            href) + "</a>";
    };
    renderer.paragraph = function (text) {
        var pClass = '';
        switch (lastLevel) {
            case 1:
            case 2:
                pClass = 'mat-body-3';
                break;
            case 3:
            case 4:
                pClass = 'mat-body-2';
                break;
            default:
                pClass = 'mat-body-1';
                break;
        }
        return "<p class=\"" + pClass + "\">" + text + "</p>";
    };
    return { renderer: renderer };
}
var path = require('path-browserify');
var LcuDocsComponent = /** @class */ (function () {
    //  Constructors
    function LcuDocsComponent(http) {
        this.http = http;
        this.DocChange = new EventEmitter();
        this.TreeFlattener = new MatTreeFlattener(this.Transformer, this.getLevel, this.isExpandable, this.getChildren);
        this.TreeControl = new FlatTreeControl(this.getLevel, this.isExpandable);
        this.DataSource = new MatTreeFlatDataSource(this.TreeControl, this.TreeFlattener);
    }
    Object.defineProperty(LcuDocsComponent.prototype, "Docs", {
        set: function (docs) {
            var _this = this;
            this.http
                .get(path.join(docs, 'lcu.docs.json'))
                .subscribe(function (res) {
                _this.Config = res;
                _this.Reload();
            });
        },
        enumerable: true,
        configurable: true
    });
    //  Life Cycle
    LcuDocsComponent.prototype.ngOnInit = function () {
        this.Reload();
    };
    LcuDocsComponent.prototype.onClick = function (btn) {
        if (btn && btn.href && btn.href.endsWith('.md')) {
            var path_1 = btn.href.replace(document.getElementsByTagName('base')[0].href, '');
            console.log("Going to doc: " + path_1);
            this.GoToDoc(path_1);
            return false;
        }
    };
    //  API Methods
    LcuDocsComponent.prototype.BuildFileTree = function () {
        this.DataSource.data = this.buildFileTree(this.Config.Docs, 0);
    };
    LcuDocsComponent.prototype.FindDoc = function (path) {
        return this.Config.Docs.find(function (d) { return d.Path === path; });
    };
    LcuDocsComponent.prototype.GoToDoc = function (docOpt) {
        var docPath = isString(docOpt)
            ? docOpt
            : docOpt.Path;
        if (this.ActiveDocPath !== docPath) {
            this.ActiveDocPath = docPath;
        }
        this.calculateActiveDocData();
        this.DocChange.emit({ DocPath: docPath });
    };
    LcuDocsComponent.prototype.HasChild = function (_, nodeData) {
        return nodeData.expandable;
    };
    LcuDocsComponent.prototype.Reload = function () {
        if (this.Config && this.Config.Docs && this.Config.Docs.length > 0) {
            this.BuildFileTree();
            this.GoToDoc(this.ActiveDocPath || this.Config.DefaultDocPath || this.Config.Docs[0]);
        }
    };
    LcuDocsComponent.prototype.Transformer = function (node) {
        return new FileFlatNode(!!node.children, node.filename, node.level, node.path);
    };
    //  Helpers
    LcuDocsComponent.prototype.buildFileTree = function (docs, level) {
        var _this = this;
        return docs.reduce(function (accumulator, doc) {
            var node = _this.buildFileNodeFromDoc(doc, level);
            return accumulator.concat(node);
        }, []);
    };
    LcuDocsComponent.prototype.buildFileNodeFromDoc = function (doc, level, bypassChildren) {
        var node = new FileNode();
        if (doc != null) {
            node.filename = doc.Title;
            node.level = level;
            if (!bypassChildren && doc.Children && doc.Children.length > 0) {
                node.children = this.buildFileTree(doc.Children, level + 1);
                var docCatch = __assign({}, doc);
                docCatch.Children = null;
            }
            else {
                node.path = doc.Path;
            }
        }
        return node;
    };
    LcuDocsComponent.prototype.calculateActiveDocData = function () {
        if (this.Config && this.ActiveDocPath) {
            this.ActiveDocData = path.join(this.Config.LocationRoot, this.ActiveDocPath);
        }
        else {
            this.ActiveDocData = null;
        }
    };
    LcuDocsComponent.prototype.getLevel = function (node) {
        return node.level;
    };
    LcuDocsComponent.prototype.isExpandable = function (node) {
        return node.expandable;
    };
    LcuDocsComponent.prototype.getChildren = function (node) {
        return observableOf(node.children);
    };
    LcuDocsComponent.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    __decorate([
        Input('config')
    ], LcuDocsComponent.prototype, "Config", void 0);
    __decorate([
        Input('docs')
    ], LcuDocsComponent.prototype, "Docs", null);
    __decorate([
        Output('docChange')
    ], LcuDocsComponent.prototype, "DocChange", void 0);
    __decorate([
        HostListener('click', ['$event.target'])
    ], LcuDocsComponent.prototype, "onClick", null);
    LcuDocsComponent = __decorate([
        Component({
            selector: 'lcu-markdown-docs',
            template: "<div fxLayout=\"row\" *ngIf=\"Config\">\r\n  <div fxFlex=\"0 1 auto\">\r\n    <mat-tree [dataSource]=\"DataSource\" [treeControl]=\"TreeControl\">\r\n      <mat-tree-node\r\n        *matTreeNodeDef=\"let node\"\r\n        matTreeNodeToggle\r\n        [matTreeNodePadding]=\"Config.IndentVariant * node.level\"\r\n      >\r\n        <button mat-icon-button disabled></button>\r\n\r\n        <a mat-button (click)=\"GoToDoc(node.path)\">{{ node.filename }}</a>\r\n      </mat-tree-node>\r\n\r\n      <mat-tree-node\r\n        *matTreeNodeDef=\"let node; when: HasChild\"\r\n        [matTreeNodePadding]=\"Config.IndentVariant * node.level\"\r\n      >\r\n        <button\r\n          mat-icon-button\r\n          matTreeNodeToggle\r\n          [attr.aria-label]=\"'toggle ' + node.filename\"\r\n        >\r\n          <mat-icon class=\"mat-icon-rtl-mirror\">\r\n            {{ TreeControl.isExpanded(node) ? \"expand_more\" : \"chevron_right\" }}\r\n          </mat-icon>\r\n        </button>\r\n\r\n        <a mat-button matTreeNodeToggle>{{ node.filename }}</a>\r\n      </mat-tree-node>\r\n    </mat-tree>\r\n  </div>\r\n\r\n  <div fxFlex=\"auto\">\r\n    <div class=\"push-right\">\r\n      <ng-container *ngIf=\"!!ActiveDocData\">\r\n        <markdown [src]=\"ActiveDocData\"></markdown>\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
            styles: [":host .mat-tree{padding:1rem}"]
        })
    ], LcuDocsComponent);
    return LcuDocsComponent;
}());
export { LcuDocsComponent };
//# sourceMappingURL=data:application/json;base64,