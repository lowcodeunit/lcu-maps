import { __decorate, __extends } from "tslib";
import { Injectable, Injector } from '@angular/core';
import { StateContext } from '@lcu/common';
import * as i0 from "@angular/core";
var DocsManagerContext = /** @class */ (function (_super) {
    __extends(DocsManagerContext, _super);
    function DocsManagerContext(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        return _this;
    }
    DocsManagerContext.prototype.GetDocsById = function (id) {
        this.State.Loading = true;
        this.Execute({
            Arguments: {
                DocsId: id
            },
            Type: 'get-docs-by-id'
        });
    };
    DocsManagerContext.prototype.loadStateKey = function () {
        return 'main';
    };
    DocsManagerContext.prototype.loadStateName = function () {
        return 'docs';
    };
    DocsManagerContext.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    DocsManagerContext.ɵprov = i0.ɵɵdefineInjectable({ factory: function DocsManagerContext_Factory() { return new DocsManagerContext(i0.ɵɵinject(i0.INJECTOR)); }, token: DocsManagerContext, providedIn: "root" });
    DocsManagerContext = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], DocsManagerContext);
    return DocsManagerContext;
}(StateContext));
export { DocsManagerContext };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jcy1tYW5hZ2VyLmNvbnRleHQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbG93Y29kZXVuaXQvbGN1LWRvY3VtZW50YXRpb24tY29tbW9uLyIsInNvdXJjZXMiOlsibGliL3N0YXRlL2RvY3MtbWFuYWdlci5jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sYUFBYSxDQUFDOztBQU0zQztJQUF3QyxzQ0FBdUI7SUFJM0QsNEJBQXNCLFFBQWtCO1FBQXhDLFlBQ0ksa0JBQU0sUUFBUSxDQUFDLFNBQ2xCO1FBRnFCLGNBQVEsR0FBUixRQUFRLENBQVU7O0lBRXhDLENBQUM7SUFFTSx3Q0FBVyxHQUFsQixVQUFtQixFQUFVO1FBQ3pCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUUxQixJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1QsU0FBUyxFQUFFO2dCQUNQLE1BQU0sRUFBRSxFQUFFO2FBQ2I7WUFDRCxJQUFJLEVBQUUsZ0JBQWdCO1NBQ3pCLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFUyx5Q0FBWSxHQUF0QjtRQUNJLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFUywwQ0FBYSxHQUF2QjtRQUNJLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7O2dCQXJCK0IsUUFBUTs7O0lBSi9CLGtCQUFrQjtRQUg5QixVQUFVLENBQUM7WUFDUixVQUFVLEVBQUUsTUFBTTtTQUNyQixDQUFDO09BQ1csa0JBQWtCLENBMEI5Qjs2QkFqQ0Q7Q0FpQ0MsQUExQkQsQ0FBd0MsWUFBWSxHQTBCbkQ7U0ExQlksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3RhdGVDb250ZXh0IH0gZnJvbSAnQGxjdS9jb21tb24nO1xyXG5pbXBvcnQgeyBEb2NzTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvZG9jcy5tb2RlbCc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIERvY3NNYW5hZ2VyQ29udGV4dCBleHRlbmRzIFN0YXRlQ29udGV4dDxEb2NzTW9kZWw+IHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgU3RhdGU6IERvY3NNb2RlbDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yKSB7XHJcbiAgICAgICAgc3VwZXIoaW5qZWN0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBHZXREb2NzQnlJZChpZDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5TdGF0ZS5Mb2FkaW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5FeGVjdXRlKHtcclxuICAgICAgICAgICAgQXJndW1lbnRzOiB7XHJcbiAgICAgICAgICAgICAgICBEb2NzSWQ6IGlkXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIFR5cGU6ICdnZXQtZG9jcy1ieS1pZCdcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgbG9hZFN0YXRlS2V5KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuICdtYWluJztcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgbG9hZFN0YXRlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiAnZG9jcyc7XHJcbiAgICB9XHJcbn1cclxuIl19