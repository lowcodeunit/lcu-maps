/// <reference path="../../types/atlas.d.ts"/>
import { __decorate } from "tslib";
import { Component, OnInit, Injector, AfterContentInit, AfterViewInit, Input, Output, ViewChild, ViewContainerRef, ElementRef, EventEmitter, ContentChild, TemplateRef, EmbeddedViewRef, QueryList, ViewChildren } from '@angular/core';
import { LCUElementContext, LcuElementComponent } from '@lcu/common';
import { AtlasPopupDirective } from '../../directives/atlas-popup.directive';
import { LoadMapService } from '../../services/load-map.service';
export class LcuMapsAzureMapElementState {
}
export class LcuMapsAzureMapContext extends LCUElementContext {
}
export const SELECTOR_LCU_MAPS_AZURE_MAP_ELEMENT = 'lcu-maps-azure-map-element';
let LcuMapsAzureMapElementComponent = class LcuMapsAzureMapElementComponent extends LcuElementComponent {
    //  Constructors
    constructor(injector, mapService) {
        super(injector);
        this.injector = injector;
        this.mapService = mapService;
        this.customPins = [];
        this.features = []; // Array of ours points to add on map
        this.pointsArray = [];
        this.cssArray = [];
        this.OnMapClick = new EventEmitter();
        this.Loaded = new EventEmitter();
    }
    //  Life Cycle
    ngOnInit() {
        super.ngOnInit();
    }
    ngAfterContentInit() {
        // this.createMap(this.ID, this.InitialConfig); // Initial map
        // this.startMapClickListener(); // Start emitter
    }
    ngAfterViewInit() {
        this.childrenComponent.forEach((instance) => {
            this.mapWrapper = instance;
        });
        this.createMap(this.ID, this.InitialConfig); // Initial map
        this.startMapClickListener(); // Start emitter
        this.emitLoaded();
        // this.childrenComponent.changes.subscribe((comps: QueryList<LcuMapsAzureMapElementComponent>) => {
        //   debugger;
        // });
    }
    //  API Methods
    //  Helpers
    createMap(id, config) {
        try {
            if (!this.mapWrapper) {
                return;
            }
            this.mapWrapper.nativeElement.setAttribute('id', id);
            this.map = new atlas.Map(id, config); // Init map box
            console.log('Map was created!', this.map);
        }
        catch (e) {
            console.log('CHECK YOUR CONFIG!', e);
        }
    }
    emitLoaded() {
        if (this.map) {
            if (!this.Loaded) {
                this.Loaded = new EventEmitter();
            }
            this.Loaded.emit(true);
        }
        else {
            setTimeout(this.emitLoaded, 100);
        }
    }
    changeMapCamera(options) {
        this.map.setCamera(options);
    }
    changeMapStyle(options) {
        this.map.setStyle(options);
    }
    changeUserInteraction(options) {
        this.map.setUserInteraction(options);
    }
    /**
     * Founding all unique layers from features Array
     * @param AmFeature[] features
     * @returns string[]
     */
    findUniqueLayers(features) {
        const allLayers = features.map(it => it.Layer);
        return Array.from(new Set(allLayers));
    }
    startMapClickListener() {
        if (!this.map) {
            return;
        }
        this.map.addEventListener('click', (e) => {
            this.OnMapClick.emit(e.position);
            // On click you emit geo position
        });
    }
    /**
     * Creating popUpContainer and injected to parent Template
     * @param context
     */
    createComponent(context) {
        if (this.popupView) {
            this.popupView.destroy();
        }
        this.popupView = this.popupsContainer.createEmbeddedView(this.popupTemplate, context);
    }
    addItem(id, loc, clas) {
        let customHTML;
        const idItem = clas + id;
        const pos = new atlas.data.Position(loc.lnt, loc.lng);
        this.cssArray.push(idItem); // Saving existing HTML elements
        customHTML = document.createElement('div');
        customHTML.setAttribute('id', idItem);
        customHTML.setAttribute('class', clas);
        this.map.addHtml(customHTML, pos); // add to map
    }
    /**
     * Drawin point on the map as pins
     * @Incjet createPopups()
     * @param  features
     */
    createPoints(features) {
        if (features.length === 0) {
            console.log('No data available');
            return;
        }
        for (const item of features) {
            this.map.addPins([item.AtlasFeature], item.PinConfig);
            if (item.AtlasFeature.properties.cssClass) {
                this.addItem(item.DataElement.id, item.DataElement.localization, item.AtlasFeature.properties.cssClass);
                this.customPins.push(item.AtlasFeature.properties.cssClass);
            }
            this.pointsArray.push(item.AtlasFeature);
        }
        this.createPopups(features);
    }
    /**
     * Created popUps for all features by type of layers
     * Adding event on 'mouseover'
     * @param features
     */
    createPopups(features) {
        for (const item of this.findUniqueLayers(features)) {
            if (this.popupTemplate) {
                this.map.addEventListener('mouseover', item, (e) => {
                    const amFeature = features.find(it => it.DataElement.name === e.features[0].properties.name);
                    this.createComponent({
                        /**
                         * sent to template variable
                         * raw data from input
                         */
                        DataElement: amFeature.DataElement
                    });
                    this.popupAtlas.setPopupOptions({
                        position: e.features[0].geometry.coordinates,
                        content: document.getElementById(`popupWrapper`),
                    });
                    this.popupAtlas.open(this.map);
                });
            }
        }
    }
    updatePoints(features) {
        this.map.removeLayers(this.findUniqueLayers(features));
        if (this.cssArray.length) {
            this.cssArray.forEach(value => {
                document.querySelectorAll(`#${value}`).forEach((it) => it.remove());
                this.map.removeHtml(value);
            });
            this.cssArray = [];
        }
        this.createPoints(features);
    }
    removeMap() {
        this.map.remove();
    }
};
LcuMapsAzureMapElementComponent.ctorParameters = () => [
    { type: Injector },
    { type: LoadMapService }
];
__decorate([
    Input('initial-config')
], LcuMapsAzureMapElementComponent.prototype, "InitialConfig", void 0);
__decorate([
    Input('id')
], LcuMapsAzureMapElementComponent.prototype, "ID", void 0);
__decorate([
    Output('on-map-click')
], LcuMapsAzureMapElementComponent.prototype, "OnMapClick", void 0);
__decorate([
    Output('loaded')
], LcuMapsAzureMapElementComponent.prototype, "Loaded", void 0);
__decorate([
    ViewChild('popupsContainer', { read: ViewContainerRef })
], LcuMapsAzureMapElementComponent.prototype, "popupsContainer", void 0);
__decorate([
    ViewChildren('mapWrapper')
], LcuMapsAzureMapElementComponent.prototype, "childrenComponent", void 0);
__decorate([
    ContentChild(AtlasPopupDirective, { read: TemplateRef })
], LcuMapsAzureMapElementComponent.prototype, "popupTemplate", void 0);
LcuMapsAzureMapElementComponent = __decorate([
    Component({
        selector: SELECTOR_LCU_MAPS_AZURE_MAP_ELEMENT,
        template: "<div #mapWrapper class=\"atlas-map\"></div>\r\n\r\n<div id=\"popupWrapper\">\r\n  <div #popupsContainer>\r\n  </div>\r\n</div>",
        styles: [".atlas-map{position:relative;width:100%;height:100%}"]
    })
], LcuMapsAzureMapElementComponent);
export { LcuMapsAzureMapElementComponent };
//# sourceMappingURL=data:application/json;base64,